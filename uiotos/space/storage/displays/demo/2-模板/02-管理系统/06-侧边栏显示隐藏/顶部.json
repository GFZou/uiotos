{
  "v": "7.7.5",
  "p": {
    "autoAdjustIndex": true,
    "hierarchicalRendering": true
  },
  "a": {
    "rotateAsClock": false,
    "gridBlockSize": 20,
    "connectActionType": null,
    "fitContent": false,
    "zoomable": false,
    "rectSelectable": false,
    "pannable": false
  },
  "d": [
    {
      "c": "ht.Node",
      "i": 2899092,
      "p": {
        "name": "base",
        "displayName": "底板（_base）",
        "tag": "_base",
        "position": {
          "x": 828.14732,
          "y": 16.99586
        },
        "width": 448.99973,
        "height": 33.99174
      },
      "s": {
        "shape": "rect",
        "shape.background": "rgb(247,247,247)",
        "fullscreen": "fill",
        "fullscreen.gap": 0,
        "2d.movable": false,
        "label.opacity": 1,
        "interactive": true,
        "label.position": 17,
        "label.offset.y": 0,
        "label.color": "rgb(61,61,61)",
        "label.font": "12px arial, sans-serif",
        "label": "顶部",
        "shape.border.color": "rgb(213,213,213)",
        "note.font": "22px arial, sans-serif",
        "note.color": "rgb(212,0,0)",
        "note.background": "rgb(255,235,195)",
        "note.position": 3,
        "note.offset.x": 0,
        "note.offset.y": -5,
        "note.border.width": 10,
        "note.border.color": "rgb(255,235,195)",
        "note.opacity": 0,
        "note.align": "left"
      }
    },
    {
      "c": "ht.Node",
      "i": 2899093,
      "p": {
        "name": "sw",
        "displayName": "开关（sw1）",
        "toolTip": "<p style='color:rgb(242,83,75);margin-top:5px;margin-bottom:5px;font-weight:bold;line-height:1.5em;'>已被布局，不允许拖动（shift+回车可解除）</p>",
        "tag": "sw1",
        "dataBindings": {
          "a": {
            "open": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "onChange": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "textClose": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "textOpen": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "display": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popDirection": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popBackground": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popPadding": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popWidth": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popHeight": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popBorderColor": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popBorderWidth": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popBorderRadius": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popTriggerEvent": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            }
          }
        },
        "image": {
          "modified": "Wed May 22 2024 13:42:50 GMT+0800 (中国标准时间)",
          "dataBindings": [
            {
              "attr": "symbol",
              "valueType": "Image"
            },
            {
              "attr": "open",
              "valueType": "Boolean",
              "defaultValue": true,
              "group": "功能（关键）"
            },
            {
              "attr": "background",
              "valueType": "Color",
              "defaultValue": "rgb(0,199,7)"
            },
            {
              "attr": "closedColor",
              "valueType": "Color",
              "defaultValue": null
            },
            {
              "attr": "back.borderWidth",
              "valueType": "Number",
              "defaultValue": 1
            },
            {
              "attr": "back.radius",
              "valueType": "Number",
              "defaultValue": 18
            },
            {
              "attr": "dot.dotScale",
              "valueType": "Number",
              "defaultValue": 1
            },
            {
              "attr": "textScale",
              "valueType": "Number",
              "defaultValue": 1
            },
            {
              "attr": "textOpen",
              "valueType": "String",
              "defaultValue": "开启"
            },
            {
              "attr": "textClose",
              "valueType": "String",
              "defaultValue": "关闭"
            },
            {
              "attr": "textVisible",
              "valueType": "Boolean",
              "defaultValue": true
            },
            {
              "attr": "font",
              "valueType": "Font",
              "defaultValue": "12px sans-serif, Arial"
            },
            {
              "attr": "gapsAdjust",
              "valueType": "NumberArray",
              "defaultValue": [
                0,
                0
              ]
            },
            {
              "attr": "bindControlsTag",
              "valueType": "StringArray",
              "group": "bindControls"
            },
            {
              "attr": "bindControlsAttr",
              "valueType": "StringArray"
            },
            {
              "attr": "bindControlsVal",
              "valueType": "ObjectArray",
              "description": "静态值。也用作数组索引、JSON对象解析提取值用途。\n<br>\n一、静态值用途：\n<br>对常规类型的属性赋值且没有反向关联属性值，传入为数值时，\n<br>不会作为数组的索引，而会当成常量值对外赋值。\n<br>\n二、数组索引用途\n<br>情况1：被操作的组件属性原先值是数组时（包括空数组），会\n<br>将待输出的值作为被操作数组指定索引的值来传入，而不是整体\n<br>覆盖。\n<br>\n情况2：如果要被操作的组件属性原先值不是数组，而且待输出的\n<br>值为数组类型并且长度也在索引范围内，那么会按照索引取自身数\n<br>组指定元素再对外输出。（如果想要取待输出索引值，赋值给被操\n<br>纵属性的指定索引，那么需要中间组件属性连线过渡以下，无法直\n<br>接操作）\n<br>\n情况3：如果要被操作的组件属性是数组，而且待输出的值也是数组\n<br>类型，此时当情况1来处理。\n<br>\n三、数据解析用途：\n<br>待输出的值为JSON对象时，用x.y.z这种以字符.或者>为间隔的方式\n<br>实现对JSON字段层次逐层定位，当是数组时x.0.y.1这种以数字的方\n<br>式来指定数组的某个索引。以此实现对任意结果JSON对象字段的定\n<br>位，获取结构内指定字段对应的值。"
            },
            {
              "attr": "paramControlTag",
              "valueType": "StringArray"
            },
            {
              "attr": "paramControlAttr",
              "valueType": "StringArray"
            },
            {
              "attr": "paramsGenerator",
              "valueType": "Function",
              "defaultValue": "__ht__function(data, val, index, node,oldVal,form,type,inner) {//绑定组索引对应的函数处理，用来动态生成复杂的参数变量传入\r\nswitch(index){\r\n    case 0:\r\n        break;\r\n    case 1:\r\n        break;\r\n    case 2:\r\n        break;\r\n    default:\r\n        break;\r\n}\r\n\r\nreturn val;}",
              "extraInfo": {
                "arguments": [
                  "data",
                  "val",
                  "index",
                  "node",
                  "oldVal",
                  "form",
                  "type",
                  "inner"
                ]
              }
            },
            {
              "attr": "useAttrCORS",
              "valueType": "Boolean",
              "defaultValue": false,
              "description": "属性同源操作。\n                连线操作传递是否限定双方。比如有A/B/C/D/O五个组件，连线操作关系：\n                A→O、B→O、C→O、D→O，以及O→A、O→B、O→C、O→D，总结为\n                A、B、C、D分别与O有往返操作。\n                默认不勾选该属性时，A到D任何一个向O的连线操作，都不会影响到O自身\n                对A到D的下一步操作。勾选了该属性后，那么每次相邻的两次连线交互，\n                则会有同源选择性，比如A→O，下一步则O之会选择到A的操作即O→A。\n                同源操作通常用户多个组件共用一个配置弹窗的情况，比如上述A、B、C、D\n                相当于是四个同类型的组件，而O是公共的属性配置窗口，任何一个比如A点\n                击，可通过O弹窗显示属性，然后修改后将属性值回写到A，且并不会将值给\n                到其他几个组件，即便有连线在。\n                同源操作规则：当连线满足A/B→O.x，且有O.x→A/B时，即前一次组件A连线\n                操作O的x属性，那么，O对外触发且关联x属性值对外时，勾选了本属性同源\n                属性操作的前提下，将只会执行O.x→A，而忽略O.x→B/C等其他非A的图元组\n                件的连线操作。",
              "dynamicCreate": true
            },
            {
              "attr": "userData",
              "valueType": "ObjectArray"
            },
            {
              "attr": "display",
              "name": "display",
              "valueType": "Image",
              "defaultValue": "",
              "description": "自定义页面地址。\n                可以是编辑器中的其他页面，也可以\n                是外部网页链接地址。",
              "group": "弹出框",
              "dynamicCreate": true
            },
            {
              "attr": "popDirection",
              "name": "popDirection",
              "valueType": "SideDirection",
              "defaultValue": "right",
              "description": "提示显示位置。",
              "dynamicCreate": true
            },
            {
              "attr": "popBackground",
              "name": "popBackground",
              "valueType": "Color",
              "defaultValue": "white",
              "description": "箭头和背景色。",
              "dynamicCreate": true
            },
            {
              "attr": "popPadding",
              "name": "padding",
              "valueType": "NumberArray",
              "defaultValue": [
                2,
                2,
                2,
                2
              ],
              "description": "内间距。",
              "dynamicCreate": true
            },
            {
              "attr": "popWidth",
              "name": "popWidth",
              "valueType": "Number",
              "defaultValue": 400,
              "description": "弹出框宽度。",
              "dynamicCreate": true
            },
            {
              "attr": "popHeight",
              "name": "popHeight",
              "valueType": "Number",
              "defaultValue": 300,
              "description": "弹出框高度。",
              "dynamicCreate": true
            },
            {
              "attr": "popBorderColor",
              "name": "popBorderColor",
              "valueType": "Color",
              "defaultValue": "rgb(51,51,51)",
              "description": "边框线颜色。\n                    注意，是设置了边框宽度非0后的边框颜色。\n                    默认边框宽度属性为0时，实际上是白色并\n                    带有箭头指示的边框。本属性不用于修改默\n                    认边框色。",
              "dynamicCreate": true
            },
            {
              "attr": "popBorderWidth",
              "name": "popBorderWidth",
              "valueType": "Number",
              "defaultValue": 0,
              "description": "边框线宽度。\n                    默认值为0，此时边框默认为白色并且带有\n                    箭头指示。当设置宽度后，颜色将取边框颜\n                    色属性的设置，并且不再有箭头指示。",
              "dynamicCreate": true
            },
            {
              "attr": "popBorderRadius",
              "name": "popBorderRadius",
              "valueType": "Number",
              "defaultValue": 0,
              "description": "边框线圆角。\n                    设置圆角线后，如果此前默认是白色边框带有\n                    指示箭头，那么将自动不可见，只对内容区域\n                    产生圆角。",
              "dynamicCreate": true
            },
            {
              "attr": "popTriggerEvent",
              "name": "popTriggerEvent",
              "valueType": "MouseEvent",
              "defaultValue": "hover",
              "description": "触发方式。\n                支持鼠标移入、点击（按钮时）\n                两种触发提示的方式。",
              "dynamicCreate": true
            },
            {
              "attr": "onChange",
              "valueType": "Function",
              "extraInfo": {
                "arguments": [
                  "data",
                  "gv",
                  "cache",
                  "value",
                  "extra"
                ]
              },
              "defaultValue": "__ht__function(data, gv, cache, value, extra) {}",
              "description": "变化时触发。\n<br>初始加载会发生。"
            },
            {
              "attr": "onOpen",
              "valueType": "Function",
              "description": "打开时触发。",
              "extraInfo": {
                "arguments": [
                  "data",
                  "gv",
                  "cache",
                  "value",
                  "extra"
                ]
              }
            },
            {
              "attr": "onClose",
              "valueType": "Function",
              "description": "关闭时触发。",
              "extraInfo": {
                "arguments": [
                  "data",
                  "gv",
                  "cache",
                  "value",
                  "extra"
                ]
              }
            }
          ],
          "snapshotURL": "symbols/develop/uiotos/arranged/controls/forms_icon/开关.json",
          "onUp": "__ht__function(event, data, view, point, width, height) {\ndata.ca('open',!data.ca('open'));\n}",
          "onEnter": "__ht__function(event, data, view, point, width, height) {\nview.getView().style.cursor = 'pointer'\n}",
          "onLeave": "__ht__function(event, data, view, point, width, height) {\nview.getView().style.cursor = 'default'\n}",
          "renderHTML": "__ht__function(data, gv, cache) {__switch_lite(data,gv,cache);}",
          "width": 82,
          "height": 35,
          "comps": [
            {
              "type": "roundRect",
              "background": {
                "func": "attr@background",
                "value": "rgb(0,199,7)"
              },
              "borderWidth": {
                "func": "attr@borderWidth",
                "value": 1
              },
              "borderColor": {
                "func": "attr@borderColor",
                "value": "rgb(0,199,7)"
              },
              "borderWidthAbsolute": true,
              "cornerRadius": {
                "func": "attr@radius",
                "value": 18
              },
              "layoutH": "center",
              "layoutV": "center",
              "prefix": "back",
              "displayName": "n（Node1）",
              "rect": [
                2.59922,
                1,
                76.80155,
                33
              ]
            },
            {
              "type": "oval",
              "background": {
                "func": "attr@background",
                "value": "rgb(255,255,255)"
              },
              "borderColor": "#979797",
              "layoutH": "center",
              "layoutV": "center",
              "prefix": "dot",
              "scaleX": {
                "func": "attr@dotScale",
                "value": 1
              },
              "scaleY": {
                "func": "attr@dotScale",
                "value": 1
              },
              "rect": {
                "func": "attr@rect",
                "value": [
                  48.5,
                  5,
                  25,
                  25
                ]
              }
            },
            {
              "type": "text",
              "text": {
                "func": "attr@text",
                "value": "开启"
              },
              "align": "center",
              "color": {
                "func": "attr@textColor",
                "value": "rgb(255,255,255)"
              },
              "font": {
                "func": "attr@font",
                "value": "12px arial, sans-serif"
              },
              "visible": {
                "func": "attr@textVisible",
                "value": true
              },
              "layoutH": "center",
              "layoutV": "center",
              "displayName": "打开",
              "scaleX": {
                "func": "attr@textScale",
                "value": 1
              },
              "scaleY": {
                "func": "attr@textScale",
                "value": 1
              },
              "rect": {
                "func": "attr@textRect",
                "value": [
                  15.44891,
                  9.5,
                  30,
                  18
                ]
              }
            }
          ],
          "uuid": "86D1C3B0-4F69-4FBA-A1DF-22DAEB3CDB15"
        },
        "host": {
          "__i": 2899092
        },
        "position": {
          "x": 652.8815,
          "y": 16.99586
        },
        "width": 69.8488,
        "height": 29.61587
      },
      "s": {
        "label.position": 14,
        "label.offset.x": -10,
        "label.offset.y": 0,
        "label.color": "rgb(61,61,61)",
        "interactive": true,
        "label.opacity": 0,
        "2d.movable": false,
        "layout.h": "left",
        "layout.v": "center"
      },
      "a": {
        "symbol": "symbols/develop/uiotos/arranged/controls/forms/01-按钮点击/开关.json",
        "open": true,
        "bindEvents": [
          "*",
          "onChange",
          "onOpen"
        ],
        "back.background": "rgb(124,145,155)",
        "dot.background": "white",
        "text": "显示",
        "textColor": "white",
        "textRect": [
          14,
          8.5,
          30,
          18
        ],
        "back.borderColor": "rgb(124,145,155)",
        "dot.rect": [
          47.5,
          5,
          25,
          25
        ],
        "textOpen": "显示",
        "visible": true,
        "textClose": "隐藏",
        "background": "rgb(124,145,155)",
        "font": "14px sans-serif, Arial",
        "gapsAdjust": [
          1,
          0
        ],
        "closedColor": "rgb(0,21,41)"
      }
    },
    {
      "c": "ht.Node",
      "i": 2899094,
      "p": {
        "name": "sw",
        "displayName": "开关（sw2）",
        "toolTip": "<p style='color:rgb(242,83,75);margin-top:5px;margin-bottom:5px;font-weight:bold;line-height:1.5em;'>已被布局，不允许拖动（shift+回车可解除）</p>",
        "tag": "sw2",
        "dataBindings": {
          "a": {
            "open": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "onChange": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "textClose": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "textOpen": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "display": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popDirection": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popBackground": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popPadding": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popWidth": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popHeight": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popBorderColor": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popBorderWidth": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popBorderRadius": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popTriggerEvent": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            }
          }
        },
        "image": {
          "modified": "Thu May 16 2024 11:42:59 GMT+0800 (中国标准时间)",
          "dataBindings": [
            {
              "attr": "symbol",
              "valueType": "Image"
            },
            {
              "attr": "open",
              "valueType": "Boolean",
              "defaultValue": true,
              "group": "功能（关键）"
            },
            {
              "attr": "background",
              "valueType": "Color",
              "defaultValue": "rgb(0,199,7)"
            },
            {
              "attr": "closedColor",
              "valueType": "Color",
              "defaultValue": null
            },
            {
              "attr": "back.borderWidth",
              "valueType": "Number",
              "defaultValue": 1
            },
            {
              "attr": "back.radius",
              "valueType": "Number",
              "defaultValue": 18
            },
            {
              "attr": "dot.dotScale",
              "valueType": "Number",
              "defaultValue": 1
            },
            {
              "attr": "textScale",
              "valueType": "Number",
              "defaultValue": 1
            },
            {
              "attr": "textOpen",
              "valueType": "String",
              "defaultValue": "开启"
            },
            {
              "attr": "textClose",
              "valueType": "String",
              "defaultValue": "关闭"
            },
            {
              "attr": "textVisible",
              "valueType": "Boolean",
              "defaultValue": true
            },
            {
              "attr": "font",
              "valueType": "Font",
              "defaultValue": "12px sans-serif, Arial"
            },
            {
              "attr": "gapsAdjust",
              "valueType": "NumberArray",
              "defaultValue": [
                0,
                0
              ]
            },
            {
              "attr": "bindControlsTag",
              "valueType": "StringArray",
              "group": "bindControls"
            },
            {
              "attr": "bindControlsAttr",
              "valueType": "StringArray"
            },
            {
              "attr": "bindControlsVal",
              "valueType": "ObjectArray",
              "description": "静态值。也用作数组索引、JSON对象解析提取值用途。\n<br>\n一、静态值用途：\n<br>对常规类型的属性赋值且没有反向关联属性值，传入为数值时，\n<br>不会作为数组的索引，而会当成常量值对外赋值。\n<br>\n二、数组索引用途\n<br>情况1：被操作的组件属性原先值是数组时（包括空数组），会\n<br>将待输出的值作为被操作数组指定索引的值来传入，而不是整体\n<br>覆盖。\n<br>\n情况2：如果要被操作的组件属性原先值不是数组，而且待输出的\n<br>值为数组类型并且长度也在索引范围内，那么会按照索引取自身数\n<br>组指定元素再对外输出。（如果想要取待输出索引值，赋值给被操\n<br>纵属性的指定索引，那么需要中间组件属性连线过渡以下，无法直\n<br>接操作）\n<br>\n情况3：如果要被操作的组件属性是数组，而且待输出的值也是数组\n<br>类型，此时当情况1来处理。\n<br>\n三、数据解析用途：\n<br>待输出的值为JSON对象时，用x.y.z这种以字符.或者>为间隔的方式\n<br>实现对JSON字段层次逐层定位，当是数组时x.0.y.1这种以数字的方\n<br>式来指定数组的某个索引。以此实现对任意结果JSON对象字段的定\n<br>位，获取结构内指定字段对应的值。"
            },
            {
              "attr": "paramControlTag",
              "valueType": "StringArray"
            },
            {
              "attr": "paramControlAttr",
              "valueType": "StringArray"
            },
            {
              "attr": "paramsGenerator",
              "valueType": "Function",
              "defaultValue": "__ht__function(data, val, index, node,oldVal,form,type,inner) {//绑定组索引对应的函数处理，用来动态生成复杂的参数变量传入\r\nswitch(index){\r\n    case 0:\r\n        break;\r\n    case 1:\r\n        break;\r\n    case 2:\r\n        break;\r\n    default:\r\n        break;\r\n}\r\n\r\nreturn val;}",
              "extraInfo": {
                "arguments": [
                  "data",
                  "val",
                  "index",
                  "node",
                  "oldVal",
                  "form",
                  "type",
                  "inner"
                ]
              }
            },
            {
              "attr": "useAttrCORS",
              "valueType": "Boolean",
              "defaultValue": false,
              "description": "属性同源操作。\n                连线操作传递是否限定双方。比如有A/B/C/D/O五个组件，连线操作关系：\n                A→O、B→O、C→O、D→O，以及O→A、O→B、O→C、O→D，总结为\n                A、B、C、D分别与O有往返操作。\n                默认不勾选该属性时，A到D任何一个向O的连线操作，都不会影响到O自身\n                对A到D的下一步操作。勾选了该属性后，那么每次相邻的两次连线交互，\n                则会有同源选择性，比如A→O，下一步则O之会选择到A的操作即O→A。\n                同源操作通常用户多个组件共用一个配置弹窗的情况，比如上述A、B、C、D\n                相当于是四个同类型的组件，而O是公共的属性配置窗口，任何一个比如A点\n                击，可通过O弹窗显示属性，然后修改后将属性值回写到A，且并不会将值给\n                到其他几个组件，即便有连线在。\n                同源操作规则：当连线满足A/B→O.x，且有O.x→A/B时，即前一次组件A连线\n                操作O的x属性，那么，O对外触发且关联x属性值对外时，勾选了本属性同源\n                属性操作的前提下，将只会执行O.x→A，而忽略O.x→B/C等其他非A的图元组\n                件的连线操作。",
              "dynamicCreate": true
            },
            {
              "attr": "userData",
              "valueType": "ObjectArray"
            },
            {
              "attr": "display",
              "name": "display",
              "valueType": "Image",
              "defaultValue": "",
              "description": "自定义页面地址。\n                可以是编辑器中的其他页面，也可以\n                是外部网页链接地址。",
              "group": "弹出框",
              "dynamicCreate": true
            },
            {
              "attr": "popDirection",
              "name": "popDirection",
              "valueType": "SideDirection",
              "defaultValue": "right",
              "description": "提示显示位置。",
              "dynamicCreate": true
            },
            {
              "attr": "popBackground",
              "name": "popBackground",
              "valueType": "Color",
              "defaultValue": "white",
              "description": "箭头和背景色。",
              "dynamicCreate": true
            },
            {
              "attr": "popPadding",
              "name": "padding",
              "valueType": "NumberArray",
              "defaultValue": [
                2,
                2,
                2,
                2
              ],
              "description": "内间距。",
              "dynamicCreate": true
            },
            {
              "attr": "popWidth",
              "name": "popWidth",
              "valueType": "Number",
              "defaultValue": 400,
              "description": "弹出框宽度。",
              "dynamicCreate": true
            },
            {
              "attr": "popHeight",
              "name": "popHeight",
              "valueType": "Number",
              "defaultValue": 300,
              "description": "弹出框高度。",
              "dynamicCreate": true
            },
            {
              "attr": "popBorderColor",
              "name": "popBorderColor",
              "valueType": "Color",
              "defaultValue": "rgb(51,51,51)",
              "description": "边框线颜色。\n                    注意，是设置了边框宽度非0后的边框颜色。\n                    默认边框宽度属性为0时，实际上是白色并\n                    带有箭头指示的边框。本属性不用于修改默\n                    认边框色。",
              "dynamicCreate": true
            },
            {
              "attr": "popBorderWidth",
              "name": "popBorderWidth",
              "valueType": "Number",
              "defaultValue": 0,
              "description": "边框线宽度。\n                    默认值为0，此时边框默认为白色并且带有\n                    箭头指示。当设置宽度后，颜色将取边框颜\n                    色属性的设置，并且不再有箭头指示。",
              "dynamicCreate": true
            },
            {
              "attr": "popBorderRadius",
              "name": "popBorderRadius",
              "valueType": "Number",
              "defaultValue": 0,
              "description": "边框线圆角。\n                    设置圆角线后，如果此前默认是白色边框带有\n                    指示箭头，那么将自动不可见，只对内容区域\n                    产生圆角。",
              "dynamicCreate": true
            },
            {
              "attr": "popTriggerEvent",
              "name": "popTriggerEvent",
              "valueType": "MouseEvent",
              "defaultValue": "hover",
              "description": "触发方式。\n                支持鼠标移入、点击（按钮时）\n                两种触发提示的方式。",
              "dynamicCreate": true
            },
            {
              "attr": "onChange",
              "valueType": "Function",
              "extraInfo": {
                "arguments": [
                  "data",
                  "gv",
                  "cache",
                  "value",
                  "extra"
                ]
              },
              "defaultValue": "__ht__function(data, gv, cache, value, extra) {}"
            }
          ],
          "snapshotURL": "symbols/develop/uiotos/arranged/controls/forms_icon/开关.json",
          "onUp": "__ht__function(event, data, view, point, width, height) {\ndata.ca('open',!data.ca('open'));\n}",
          "onEnter": "__ht__function(event, data, view, point, width, height) {\nview.getView().style.cursor = 'pointer'\n}",
          "onLeave": "__ht__function(event, data, view, point, width, height) {\nview.getView().style.cursor = 'default'\n}",
          "renderHTML": "__ht__function(data, gv, cache) {__switch_lite(data,gv,cache);}",
          "width": 82,
          "height": 35,
          "comps": [
            {
              "type": "roundRect",
              "background": {
                "func": "attr@background",
                "value": "rgb(0,199,7)"
              },
              "borderWidth": {
                "func": "attr@borderWidth",
                "value": 1
              },
              "borderColor": {
                "func": "attr@borderColor",
                "value": "rgb(0,199,7)"
              },
              "borderWidthAbsolute": true,
              "cornerRadius": {
                "func": "attr@radius",
                "value": 18
              },
              "layoutH": "center",
              "layoutV": "center",
              "prefix": "back",
              "rect": [
                2.59922,
                1,
                76.80155,
                33
              ]
            },
            {
              "type": "oval",
              "background": {
                "func": "attr@background",
                "value": "rgb(255,255,255)"
              },
              "borderColor": "#979797",
              "layoutH": "center",
              "layoutV": "center",
              "prefix": "dot",
              "scaleX": {
                "func": "attr@dotScale",
                "value": 1
              },
              "scaleY": {
                "func": "attr@dotScale",
                "value": 1
              },
              "rect": {
                "func": "attr@rect",
                "value": [
                  48.5,
                  5,
                  25,
                  25
                ]
              }
            },
            {
              "type": "text",
              "text": {
                "func": "attr@text",
                "value": "开启"
              },
              "align": "center",
              "color": {
                "func": "attr@textColor",
                "value": "rgb(255,255,255)"
              },
              "font": {
                "func": "attr@font",
                "value": "12px arial, sans-serif"
              },
              "visible": {
                "func": "attr@textVisible",
                "value": true
              },
              "layoutH": "center",
              "layoutV": "center",
              "displayName": "打开",
              "scaleX": {
                "func": "attr@textScale",
                "value": 1
              },
              "scaleY": {
                "func": "attr@textScale",
                "value": 1
              },
              "rect": {
                "func": "attr@textRect",
                "value": [
                  15.44891,
                  9.5,
                  30,
                  18
                ]
              }
            }
          ],
          "uuid": "F46FE2E3-099C-4CE9-A318-F71B86568AB1"
        },
        "host": {
          "__i": 2899092
        },
        "position": {
          "x": 1001.87224,
          "y": 16.99586
        },
        "width": 69.8488,
        "height": 29.61587
      },
      "s": {
        "label.position": 14,
        "label.offset.x": -10,
        "label.offset.y": 0,
        "label.color": "rgb(61,61,61)",
        "interactive": true,
        "label.opacity": 0,
        "2d.movable": false,
        "layout.h": "right",
        "layout.v": "center"
      },
      "a": {
        "symbol": "symbols/develop/uiotos/arranged/controls/forms/01-按钮点击/开关.json",
        "open": true,
        "bindEvents": [
          "*",
          "onChange",
          "onOpen"
        ],
        "back.background": "rgb(124,145,155)",
        "dot.background": "white",
        "text": "显示",
        "textColor": "white",
        "textRect": [
          14,
          8.5,
          30,
          18
        ],
        "back.borderColor": "rgb(124,145,155)",
        "dot.rect": [
          47.5,
          5,
          25,
          25
        ],
        "textOpen": "显示",
        "visible": true,
        "textClose": "隐藏",
        "background": "rgb(124,145,155)",
        "font": "14px sans-serif, Arial",
        "gapsAdjust": [
          1,
          0
        ]
      }
    }
  ],
  "modified": "Wed May 22 2024 15:46:00 GMT+0800 (中国标准时间)",
  "contentRect": {
    "x": 589.29108,
    "y": -0.00001,
    "width": 463.3561,
    "height": 33.99174
  }
}
{
  "v": "7.7.5",
  "p": {
    "autoAdjustIndex": true,
    "hierarchicalRendering": true
  },
  "a": {
    "rotateAsClock": false,
    "gridBlockSize": 20,
    "connectActionType": null,
    "fitContent": false,
    "zoomable": false,
    "rectSelectable": false,
    "pannable": false
  },
  "d": [
    {
      "c": "ht.Node",
      "i": 2783810,
      "p": {
        "name": "base",
        "displayName": "底板（_base）",
        "tag": "_base",
        "position": {
          "x": -290.414,
          "y": -147.68318
        },
        "width": 1024,
        "height": 600
      },
      "s": {
        "shape": "rect",
        "shape.background": "rgb(0,21,41)",
        "fullscreen": "fill",
        "fullscreen.gap": 0,
        "2d.movable": false,
        "label.opacity": 0,
        "interactive": true,
        "label.position": 14,
        "label.offset.x": -10,
        "label.offset.y": 0,
        "label.color": "rgb(61,61,61)",
        "2d.selectable": false
      }
    },
    {
      "c": "ht.Node",
      "i": 2783811,
      "p": {
        "name": "scroll",
        "displayName": "滚动页（scroll4）",
        "toolTip": "<p style='color:rgb(242,83,75);margin-top:5px;margin-bottom:5px;font-weight:bold;line-height:1.5em;'>已被布局，不允许拖动（shift+回车可解除）</p>",
        "tag": "scroll4",
        "dataBindings": {
          "a": {
            "display": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "autoFillMinWidth": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "onScrollEnded": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "userData": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "innerLayoutMode": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "_bindEvents_0": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "左上角>0>_base>s:label": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            }
          }
        },
        "image": {
          "modified": "Fri May 17 2024 15:38:11 GMT+0800 (中国标准时间)",
          "dataBindings": [
            {
              "attr": "symbol",
              "valueType": "Image"
            },
            {
              "attr": "display",
              "valueType": "URL",
              "defaultValue": "",
              "group": "功能（关键）"
            },
            {
              "attr": "innerLayoutMode",
              "valueType": "String",
              "description": "内嵌页面的布局模式。\n<br>页面通常分为适配内容（fitContent）\n<br>和全屏填充（fullScreen）两种模式，\n<br>前者自适应缩放以保证所有内容窗口\n<br>范围内可见，后者则是指定某个图元\n<br>组件作为底板全屏填充，其他组件直\n<br>接或简接对于底板布局。\n<br>模式无（none）表示以上两种模式都\n<br>不是，既不缩放适配也不全屏铺满。\n<br>注意，本属性为读写，可以表示当前\n<br>页面的状态，也可以进行设置。其中\n<br>设置全屏填充时，自动选择最底层图\n<br>元组件作为底板。新建页面默认为基\n<br>于有底板的全屏填充布局，而非缩放。\n",
              "extraInfo": {
                "enum": {
                  "values": [
                    "fitContent",
                    "fullScreen",
                    "none"
                  ]
                }
              }
            },
            {
              "attr": "onDisplayLoaded",
              "valueType": "Function",
              "description": "所有内嵌页面逐层加载完毕后回调（注意，作为顶层页面时才会触发）。",
              "extraInfo": {
                "arguments": [
                  "data",
                  "gv",
                  "cache"
                ]
              }
            },
            {
              "attr": "initCallback",
              "valueType": "Function",
              "description": "页面文件加载初始化完毕后的回调，\n<br>注意，不包括渲染元素、内嵌页面\n<br>的加载（参见onDisplayLoaded）。\n<br>参数innerGv为内嵌页面的graphView。",
              "extraInfo": {
                "arguments": [
                  "data",
                  "innerGv"
                ]
              }
            },
            {
              "attr": "reset",
              "valueType": "Level2",
              "defaultValue": 0
            },
            {
              "attr": "isLoadingGet",
              "valueType": "Boolean",
              "description": "是否正在加载。\n<br>正常加载完成后，该属性为false，\n<br>加载未完成时为true。"
            },
            {
              "attr": "enableLoading",
              "valueType": "Boolean",
              "defaultValue": false,
              "description": "是否启动加载过渡动画。注意，勾选后，如果资源不存在，可能会导致卡死，过渡动画一直存在。"
            },
            {
              "attr": "shadowBorder",
              "valueType": "NumberArray",
              "defaultValue": [
                0,
                0,
                8
              ]
            },
            {
              "attr": "shadowColor",
              "valueType": "Color",
              "defaultValue": "rgba(55,125,255,0.50)"
            },
            {
              "attr": "shadowEnabled",
              "valueType": "Boolean",
              "defaultValue": true
            },
            {
              "attr": "contentMinWidth",
              "valueType": "PositiveNumber",
              "defaultValue": 0
            },
            {
              "attr": "autoFillMinWidth",
              "valueType": "Boolean",
              "defaultValue": true
            },
            {
              "attr": "bindControlsTag",
              "valueType": "StringArray",
              "group": "bindControls"
            },
            {
              "attr": "bindControlsAttr",
              "valueType": "StringArray"
            },
            {
              "attr": "bindControlsVal",
              "valueType": "ObjectArray",
              "description": "静态值。也用作数组索引、JSON对象解析提取值用途。\n<br>一、静态值用途：\n<br>对常规类型的属性赋值且没有反向关联属性值，传入为数值时，不\n<br>会作为数组的索引，而会当成常量值对外赋值。此外，存在特殊值：\n<br>~和undefined表示过滤、不触发；null为默认值，表示传递默认表\n<br>单数据。编辑状态下清空后保存与设置null等价。\n<br>二、数组索引用途\n<br>情况1：被操作的组件属性原先值是数组时（包括空数组），会将\n<br>待输出的值作为被操作数组指定索引的值来传入，而不是整体覆盖。\n<br>情况2：如果要被操作的组件属性原先值不是数组，而且待输出的\n<br>值为数组类型并且长度也在索引范围内，那么会按照索引取自身数\n<br>组指定元素再对外输出。（如果想要取待输出索引值，赋值给被操\n<br>纵属性的指定索引，那么需要中间组件属性连线过渡以下，无法直\n<br>接操作）\n<br>情况3：如果要被操作的组件属性是数组，而且待输出的值也是数组\n<br>类型，此时当情况1来处理。\n<br>三、数据解析用途：\n<br>待输出的值为JSON对象时，用x.y.z这种以字符.或者>为间隔的方式\n<br>实现对JSON字段层次逐层定位，当是数组时x.0.y.1这种以数字的方\n<br>式来指定数组的某个索引。以此实现对任意结果JSON对象字段的定\n<br>位，获取结构内指定字段对应的值。"
            },
            {
              "attr": "paramControlTag",
              "valueType": "StringArray"
            },
            {
              "attr": "paramControlAttr",
              "valueType": "StringArray"
            },
            {
              "attr": "paramsGenerator",
              "valueType": "Function",
              "defaultValue": "__ht__function(data, val, index, node, oldVal, form, type, inner) {//绑定组索引对应的函数处理，用来动态生成复杂的参数变量传入\r\nswitch(index){\r\n    case 0:\r\n        break;\r\n    case 1:\r\n        break;\r\n    case 2:\r\n        break;\r\n    default:\r\n        break;\r\n}\r\n\r\nreturn val;}",
              "extraInfo": {
                "arguments": [
                  "data",
                  "val",
                  "index",
                  "node",
                  "oldVal",
                  "form",
                  "type",
                  "inner"
                ]
              }
            },
            {
              "attr": "useAttrCORS",
              "valueType": "Boolean",
              "defaultValue": false,
              "description": "属性同源操作。\n                连线操作传递是否限定双方。比如有A/B/C/D/O五个组件，连线操作关系：\n                A→O、B→O、C→O、D→O，以及O→A、O→B、O→C、O→D，总结为\n                A、B、C、D分别与O有往返操作。\n                默认不勾选该属性时，A到D任何一个向O的连线操作，都不会影响到O自身\n                对A到D的下一步操作。勾选了该属性后，那么每次相邻的两次连线交互，\n                则会有同源选择性，比如A→O，下一步则O之会选择到A的操作即O→A。\n                同源操作通常用户多个组件共用一个配置弹窗的情况，比如上述A、B、C、D\n                相当于是四个同类型的组件，而O是公共的属性配置窗口，任何一个比如A点\n                击，可通过O弹窗显示属性，然后修改后将属性值回写到A，且并不会将值给\n                到其他几个组件，即便有连线在。\n                同源操作规则：当连线满足A/B→O.x，且有O.x→A/B时，即前一次组件A连线\n                操作O的x属性，那么，O对外触发且关联x属性值对外时，勾选了本属性同源\n                属性操作的前提下，将只会执行O.x→A，而忽略O.x→B/C等其他非A的图元组\n                件的连线操作。",
              "dynamicCreate": true
            },
            {
              "attr": "useInnerEventsAll",
              "valueType": "Boolean",
              "description": "是否放行内嵌页面的全部事件。\n<br>若勾选，内嵌图元表单类型的事件函数属性，都将派发到\n<br>上层容器图元对外触发连线操作。默认不勾选，上层容器\n<br>图元对外连线反向关联需要指定内嵌图元的具体事件函数\n<br>属性才能触发，否则忽略内嵌图元的事件触发，不会传递\n<br>给上层容器图元对外连线操作。"
            },
            {
              "attr": "onScrollEnded",
              "valueType": "Function",
              "extraInfo": {
                "arguments": [
                  "data",
                  "gv",
                  "cache",
                  "value",
                  "extra"
                ]
              }
            },
            {
              "attr": "userData",
              "valueType": "ObjectArray"
            },
            {
              "attr": "左上角>0>_base>s:label",
              "name": ".label",
              "valueType": "String",
              "defaultValue": "LOGO区域",
              "extraInfo": null,
              "group": "左上角>0>_base"
            }
          ],
          "snapshotURL": "symbols/develop/uiotos/arranged/controls/containers_icon/滚动页.json",
          "renderHTML": "__ht__function(data, gv, cache) {return __scrollAreaView_ui(data,gv,cache);}",
          "width": 819,
          "height": 600,
          "pixelPerfect": false,
          "comps": [],
          "uuid": "5AD700B2-2993-4E48-AD9A-548C3A066DD9"
        },
        "host": {
          "__i": 2783810
        },
        "position": {
          "x": -717.25514,
          "y": -423.03701
        },
        "width": 172.31772,
        "height": 49.29233
      },
      "s": {
        "label.position": 14,
        "label.offset.y": 0,
        "label.color": "rgb(61,61,61)",
        "label.opacity": 0,
        "2d.movable": false,
        "interactive": true,
        "image.stretch": "uniform",
        "label.font": "26px arial, sans-serif",
        "label.align": "left",
        "label.offset.x": -10,
        "layout.h": "left",
        "layout.v": "top"
      },
      "a": {
        "symbol": "symbols/develop/uiotos/base/scrollAreaView-ui.json",
        "display": "./01-宽高自适应/左上角.json",
        "__loadingStatus": false,
        "isLoadingGet": false,
        "contentMinWidth": 107.92999,
        "innerLayoutMode": "fullScreen",
        "paramControlTag": [],
        "paramControlAttr": [],
        "bindControlsTag": [],
        "bindControlsAttr": [],
        "bindControlsVal": [],
        "shadowEnabled": false,
        "左上角>0>_base>s:label": "LOGO区域"
      }
    },
    {
      "c": "ht.Node",
      "i": 2783812,
      "p": {
        "name": "scroll",
        "displayName": "滚动页（scroll5）",
        "toolTip": "<p style='color:rgb(242,83,75);margin-top:5px;margin-bottom:5px;font-weight:bold;line-height:1.5em;'>已被布局，不允许拖动（shift+回车可解除）</p>",
        "tag": "scroll5",
        "dataBindings": {
          "a": {
            "display": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "autoFillMinWidth": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "onScrollEnded": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "userData": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "innerLayoutMode": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "_bindEvents_0": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            }
          }
        },
        "image": {
          "modified": "Fri May 17 2024 15:38:11 GMT+0800 (中国标准时间)",
          "dataBindings": [
            {
              "attr": "symbol",
              "valueType": "Image"
            },
            {
              "attr": "display",
              "valueType": "URL",
              "defaultValue": "",
              "group": "功能（关键）"
            },
            {
              "attr": "innerLayoutMode",
              "valueType": "String",
              "description": "内嵌页面的布局模式。\n<br>页面通常分为适配内容（fitContent）\n<br>和全屏填充（fullScreen）两种模式，\n<br>前者自适应缩放以保证所有内容窗口\n<br>范围内可见，后者则是指定某个图元\n<br>组件作为底板全屏填充，其他组件直\n<br>接或简接对于底板布局。\n<br>模式无（none）表示以上两种模式都\n<br>不是，既不缩放适配也不全屏铺满。\n<br>注意，本属性为读写，可以表示当前\n<br>页面的状态，也可以进行设置。其中\n<br>设置全屏填充时，自动选择最底层图\n<br>元组件作为底板。新建页面默认为基\n<br>于有底板的全屏填充布局，而非缩放。\n",
              "extraInfo": {
                "enum": {
                  "values": [
                    "fitContent",
                    "fullScreen",
                    "none"
                  ]
                }
              }
            },
            {
              "attr": "onDisplayLoaded",
              "valueType": "Function",
              "description": "所有内嵌页面逐层加载完毕后回调（注意，作为顶层页面时才会触发）。",
              "extraInfo": {
                "arguments": [
                  "data",
                  "gv",
                  "cache"
                ]
              }
            },
            {
              "attr": "initCallback",
              "valueType": "Function",
              "description": "页面文件加载初始化完毕后的回调，\n<br>注意，不包括渲染元素、内嵌页面\n<br>的加载（参见onDisplayLoaded）。\n<br>参数innerGv为内嵌页面的graphView。",
              "extraInfo": {
                "arguments": [
                  "data",
                  "innerGv"
                ]
              }
            },
            {
              "attr": "reset",
              "valueType": "Level2",
              "defaultValue": 0
            },
            {
              "attr": "isLoadingGet",
              "valueType": "Boolean",
              "description": "是否正在加载。\n<br>正常加载完成后，该属性为false，\n<br>加载未完成时为true。"
            },
            {
              "attr": "enableLoading",
              "valueType": "Boolean",
              "defaultValue": false,
              "description": "是否启动加载过渡动画。注意，勾选后，如果资源不存在，可能会导致卡死，过渡动画一直存在。"
            },
            {
              "attr": "shadowBorder",
              "valueType": "NumberArray",
              "defaultValue": [
                0,
                0,
                8
              ]
            },
            {
              "attr": "shadowColor",
              "valueType": "Color",
              "defaultValue": "rgba(55,125,255,0.50)"
            },
            {
              "attr": "shadowEnabled",
              "valueType": "Boolean",
              "defaultValue": true
            },
            {
              "attr": "contentMinWidth",
              "valueType": "PositiveNumber",
              "defaultValue": 0
            },
            {
              "attr": "autoFillMinWidth",
              "valueType": "Boolean",
              "defaultValue": true
            },
            {
              "attr": "bindControlsTag",
              "valueType": "StringArray",
              "group": "bindControls"
            },
            {
              "attr": "bindControlsAttr",
              "valueType": "StringArray"
            },
            {
              "attr": "bindControlsVal",
              "valueType": "ObjectArray",
              "description": "静态值。也用作数组索引、JSON对象解析提取值用途。\n<br>一、静态值用途：\n<br>对常规类型的属性赋值且没有反向关联属性值，传入为数值时，不\n<br>会作为数组的索引，而会当成常量值对外赋值。此外，存在特殊值：\n<br>~和undefined表示过滤、不触发；null为默认值，表示传递默认表\n<br>单数据。编辑状态下清空后保存与设置null等价。\n<br>二、数组索引用途\n<br>情况1：被操作的组件属性原先值是数组时（包括空数组），会将\n<br>待输出的值作为被操作数组指定索引的值来传入，而不是整体覆盖。\n<br>情况2：如果要被操作的组件属性原先值不是数组，而且待输出的\n<br>值为数组类型并且长度也在索引范围内，那么会按照索引取自身数\n<br>组指定元素再对外输出。（如果想要取待输出索引值，赋值给被操\n<br>纵属性的指定索引，那么需要中间组件属性连线过渡以下，无法直\n<br>接操作）\n<br>情况3：如果要被操作的组件属性是数组，而且待输出的值也是数组\n<br>类型，此时当情况1来处理。\n<br>三、数据解析用途：\n<br>待输出的值为JSON对象时，用x.y.z这种以字符.或者>为间隔的方式\n<br>实现对JSON字段层次逐层定位，当是数组时x.0.y.1这种以数字的方\n<br>式来指定数组的某个索引。以此实现对任意结果JSON对象字段的定\n<br>位，获取结构内指定字段对应的值。"
            },
            {
              "attr": "paramControlTag",
              "valueType": "StringArray"
            },
            {
              "attr": "paramControlAttr",
              "valueType": "StringArray"
            },
            {
              "attr": "paramsGenerator",
              "valueType": "Function",
              "defaultValue": "__ht__function(data, val, index, node, oldVal, form, type, inner) {//绑定组索引对应的函数处理，用来动态生成复杂的参数变量传入\r\nswitch(index){\r\n    case 0:\r\n        break;\r\n    case 1:\r\n        break;\r\n    case 2:\r\n        break;\r\n    default:\r\n        break;\r\n}\r\n\r\nreturn val;}",
              "extraInfo": {
                "arguments": [
                  "data",
                  "val",
                  "index",
                  "node",
                  "oldVal",
                  "form",
                  "type",
                  "inner"
                ]
              }
            },
            {
              "attr": "useAttrCORS",
              "valueType": "Boolean",
              "defaultValue": false,
              "description": "属性同源操作。\n                连线操作传递是否限定双方。比如有A/B/C/D/O五个组件，连线操作关系：\n                A→O、B→O、C→O、D→O，以及O→A、O→B、O→C、O→D，总结为\n                A、B、C、D分别与O有往返操作。\n                默认不勾选该属性时，A到D任何一个向O的连线操作，都不会影响到O自身\n                对A到D的下一步操作。勾选了该属性后，那么每次相邻的两次连线交互，\n                则会有同源选择性，比如A→O，下一步则O之会选择到A的操作即O→A。\n                同源操作通常用户多个组件共用一个配置弹窗的情况，比如上述A、B、C、D\n                相当于是四个同类型的组件，而O是公共的属性配置窗口，任何一个比如A点\n                击，可通过O弹窗显示属性，然后修改后将属性值回写到A，且并不会将值给\n                到其他几个组件，即便有连线在。\n                同源操作规则：当连线满足A/B→O.x，且有O.x→A/B时，即前一次组件A连线\n                操作O的x属性，那么，O对外触发且关联x属性值对外时，勾选了本属性同源\n                属性操作的前提下，将只会执行O.x→A，而忽略O.x→B/C等其他非A的图元组\n                件的连线操作。",
              "dynamicCreate": true
            },
            {
              "attr": "useInnerEventsAll",
              "valueType": "Boolean",
              "description": "是否放行内嵌页面的全部事件。\n<br>若勾选，内嵌图元表单类型的事件函数属性，都将派发到\n<br>上层容器图元对外触发连线操作。默认不勾选，上层容器\n<br>图元对外连线反向关联需要指定内嵌图元的具体事件函数\n<br>属性才能触发，否则忽略内嵌图元的事件触发，不会传递\n<br>给上层容器图元对外连线操作。"
            },
            {
              "attr": "onScrollEnded",
              "valueType": "Function",
              "extraInfo": {
                "arguments": [
                  "data",
                  "gv",
                  "cache",
                  "value",
                  "extra"
                ]
              }
            },
            {
              "attr": "userData",
              "valueType": "ObjectArray"
            }
          ],
          "snapshotURL": "symbols/develop/uiotos/arranged/controls/containers_icon/滚动页.json",
          "renderHTML": "__ht__function(data, gv, cache) {return __scrollAreaView_ui(data,gv,cache);}",
          "width": 819,
          "height": 600,
          "pixelPerfect": false,
          "comps": [],
          "uuid": "5AD700B2-2993-4E48-AD9A-548C3A066DD9"
        },
        "host": {
          "__i": 2783810
        },
        "position": {
          "x": 149.36888,
          "y": -423.03701
        },
        "width": 144.43424,
        "height": 49.29233
      },
      "s": {
        "label.position": 14,
        "label.offset.y": 0,
        "label.color": "rgb(61,61,61)",
        "label.opacity": 0,
        "2d.movable": false,
        "interactive": true,
        "image.stretch": "uniform",
        "label.font": "26px arial, sans-serif",
        "label.align": "left",
        "label.offset.x": -10,
        "layout.h": "right",
        "layout.v": "top"
      },
      "a": {
        "symbol": "symbols/develop/uiotos/base/scrollAreaView-ui.json",
        "display": "./01-宽高自适应/右上角.json",
        "__loadingStatus": false,
        "isLoadingGet": false,
        "contentMinWidth": 102.01671,
        "innerLayoutMode": "fullScreen",
        "paramControlTag": [],
        "paramControlAttr": [],
        "bindControlsTag": [],
        "bindControlsAttr": [],
        "bindControlsVal": [],
        "shadowEnabled": false
      }
    },
    {
      "c": "ht.Node",
      "i": 2783813,
      "p": {
        "name": "tab",
        "displayName": "TAB页签（tab1）",
        "toolTip": "<p style='color:rgb(242,83,75);margin-top:5px;margin-bottom:5px;font-weight:bold;line-height:1.5em;'>已被布局，不允许拖动（shift+回车可解除）</p>",
        "tag": "tab1",
        "dataBindings": {
          "a": {
            "index": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "displays": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "display": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "relativePath": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "innerLayoutMode": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "页面1>0>_base>s:shape.border.width": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "页面1>0>_base>s:shape.border.color": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "页面1>0>_base>s:shape.background": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "页面1>0>txt1>a:value": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "页面1>0>txt1>a:instantTrigger": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "页面1>0>txt1>a:htmlContent": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "页面1>0>txt1>a:readOnly": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "页面1>0>txt1>a:onChange": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "页面1>0>txt1>a:display": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "页面1>0>txt1>a:popDirection": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "页面1>0>txt1>a:popBackground": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "页面1>0>txt1>a:popPadding": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "页面1>0>txt1>a:popWidth": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "页面1>0>txt1>a:popHeight": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "页面1>0>txt1>a:popBorderColor": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "页面1>0>txt1>a:popBorderWidth": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "页面1>0>txt1>a:popBorderRadius": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "页面1>0>txt1>a:popTriggerEvent": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "页面2>0>_base>s:shape.border.width": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "页面2>0>_base>s:shape.border.color": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "页面2>0>_base>s:shape.background": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "页面2>0>txt1>a:value": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "页面2>0>txt1>a:instantTrigger": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "页面2>0>txt1>a:htmlContent": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "页面2>0>txt1>a:readOnly": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "页面2>0>txt1>a:onChange": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "页面2>0>txt1>a:display": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "页面2>0>txt1>a:popDirection": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "页面2>0>txt1>a:popBackground": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "页面2>0>txt1>a:popPadding": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "页面2>0>txt1>a:popWidth": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "页面2>0>txt1>a:popHeight": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "页面2>0>txt1>a:popBorderColor": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "页面2>0>txt1>a:popBorderWidth": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "页面2>0>txt1>a:popBorderRadius": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "页面2>0>txt1>a:popTriggerEvent": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "页面3>0>_base>s:shape.border.width": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "页面3>0>_base>s:shape.border.color": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "页面3>0>_base>s:shape.background": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "页面3>0>txt1>a:value": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "页面3>0>txt1>a:instantTrigger": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "页面3>0>txt1>a:htmlContent": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "页面3>0>txt1>a:readOnly": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "页面3>0>txt1>a:onChange": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "页面3>0>txt1>a:display": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "页面3>0>txt1>a:popDirection": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "页面3>0>txt1>a:popBackground": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "页面3>0>txt1>a:popPadding": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "页面3>0>txt1>a:popWidth": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "页面3>0>txt1>a:popHeight": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "页面3>0>txt1>a:popBorderColor": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "页面3>0>txt1>a:popBorderWidth": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "页面3>0>txt1>a:popBorderRadius": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "页面3>0>txt1>a:popTriggerEvent": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "页面4>0>_base>s:shape.border.width": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "页面4>0>_base>s:shape.border.color": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "页面4>0>_base>s:shape.background": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "页面4>0>txt1>a:value": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "页面4>0>txt1>a:instantTrigger": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "页面4>0>txt1>a:htmlContent": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "页面4>0>txt1>a:readOnly": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "页面4>0>txt1>a:onChange": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "页面4>0>txt1>a:display": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "页面4>0>txt1>a:popDirection": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "页面4>0>txt1>a:popBackground": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "页面4>0>txt1>a:popPadding": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "页面4>0>txt1>a:popWidth": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "页面4>0>txt1>a:popHeight": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "页面4>0>txt1>a:popBorderColor": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "页面4>0>txt1>a:popBorderWidth": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "页面4>0>txt1>a:popBorderRadius": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "页面4>0>txt1>a:popTriggerEvent": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            }
          }
        },
        "image": {
          "modified": "Tue May 14 2024 22:29:18 GMT+0800 (中国标准时间)",
          "dataBindings": [
            {
              "attr": "symbol",
              "valueType": "Image",
              "group": "功能（关键）"
            },
            {
              "attr": "displays",
              "valueType": "ObjectArray",
              "description": "多页地址。\n<br>tab页签按照顺序多页。注意，参考相对路径\n<br>（relativePath），并且可以省去.json后缀。\n<br>因此，当相对路径指向多页共同所在目录后，\n<br>当前属性只需要依次填入各个内嵌页面的名\n<br>称即可。"
            },
            {
              "attr": "display",
              "valueType": "URL",
              "defaultValue": "",
              "description": "当前Tab页签内嵌页。\n<br>绝对路径（URL），通常是只读，具体各个页签\n<br>配置由相对路径属性（relativePath）和多页地址\n<br>属性（displays）来配置。\n<br>确定当前索引（index）时，当前页属性（display）\n<br>会动态展示页面的绝对路径。\n<br>在编辑配置时，页可以设置页面的绝对路径，回车\n<br>时会自动添加到多页地址属性（displays）中。"
            },
            {
              "attr": "innerLayoutMode",
              "valueType": "String",
              "defaultValue": "",
              "description": "内嵌页面的布局模式。\n<br>页面通常分为适配内容（fitContent）\n<br>和全屏填充（fullScreen）两种模式，\n<br>前者自适应缩放以保证所有内容窗口\n<br>范围内可见，后者则是指定某个图元\n<br>组件作为底板全屏填充，其他组件直\n<br>接或简接对于底板布局。模式none\n<br>表示未设定，取决于内嵌的布局模式，\n<br>并且将内嵌模式回写设置过来，相当\n<br>于只读。\n<br>注意，本属性起到读写作用，可以表\n<br>示当前页面的状态，也可以进行设置。\n<br>none为只读，fullScreen/fitContent\n<br>为可读写。\n<br>其中设置全屏填充fullScreen时，自动\n<br>选择最底层图元组件作为底板。新建页\n<br>面默认为基于有底板的全屏填充布局，\n<br>而非缩放。\n",
              "extraInfo": {
                "enum": {
                  "values": [
                    "fitContent",
                    "fullScreen",
                    "none"
                  ]
                }
              }
            },
            {
              "attr": "onPostDeserialize",
              "valueType": "Function"
            },
            {
              "attr": "onDisplayLoaded",
              "valueType": "Function",
              "description": "所有内嵌页面逐层加载完毕后回调（注意，作为顶层页面时才会触发）。",
              "extraInfo": {
                "arguments": [
                  "data",
                  "gv",
                  "cache"
                ]
              }
            },
            {
              "attr": "isLoadingGet",
              "valueType": "Boolean",
              "defaultValue": false,
              "description": "是否正在加载。\n<br>只读，当正在通过display属性逐层加载内嵌页直到完全加载完毕前，\n<br>该属性值为1，加载完毕后，复位为0."
            },
            {
              "attr": "shadowBorder",
              "valueType": "NumberArray",
              "defaultValue": [
                0,
                0,
                8
              ]
            },
            {
              "attr": "shadowColor",
              "valueType": "Color",
              "defaultValue": "rgba(55,125,255,0.50)"
            },
            {
              "attr": "shadowEnabled",
              "valueType": "Boolean",
              "defaultValue": true
            },
            {
              "attr": "innerBackground",
              "valueType": "Color",
              "defaultValue": "rgb(255,255,255)"
            },
            {
              "attr": "index",
              "valueType": "PositiveNumber",
              "defaultValue": 0
            },
            {
              "attr": "useOriginSize",
              "valueType": "Boolean",
              "defaultValue": false
            },
            {
              "attr": "initialTrigger",
              "valueType": "Boolean",
              "defaultValue": false
            },
            {
              "attr": "relativePath",
              "valueType": "URL"
            },
            {
              "attr": "bindControlsTag",
              "valueType": "StringArray",
              "group": "bindControls"
            },
            {
              "attr": "bindControlsAttr",
              "valueType": "ObjectArray"
            },
            {
              "attr": "bindControlsVal",
              "valueType": "ObjectArray",
              "description": "静态值。也用作数组索引、JSON对象解析提取值用途。\n<br>一、静态值用途：\n<br>对常规类型的属性赋值且没有反向关联属性值，传入为数值时，不\n<br>会作为数组的索引，而会当成常量值对外赋值。此外，存在特殊值：\n<br>~和undefined表示过滤、不触发；null为默认值，表示传递默认表\n<br>单数据。编辑状态下清空后保存与设置null等价。\n<br>二、数组索引用途\n<br>情况1：被操作的组件属性原先值是数组时（包括空数组），会将\n<br>待输出的值作为被操作数组指定索引的值来传入，而不是整体覆盖。\n<br>情况2：如果要被操作的组件属性原先值不是数组，而且待输出的\n<br>值为数组类型并且长度也在索引范围内，那么会按照索引取自身数\n<br>组指定元素再对外输出。（如果想要取待输出索引值，赋值给被操\n<br>纵属性的指定索引，那么需要中间组件属性连线过渡以下，无法直\n<br>接操作）\n<br>情况3：如果要被操作的组件属性是数组，而且待输出的值也是数组\n<br>类型，此时当情况1来处理。\n<br>三、数据解析用途：\n<br>待输出的值为JSON对象时，用x.y.z这种以字符.或者>为间隔的方式\n<br>实现对JSON字段层次逐层定位，当是数组时x.0.y.1这种以数字的方\n<br>式来指定数组的某个索引。以此实现对任意结果JSON对象字段的定\n<br>位，获取结构内指定字段对应的值。"
            },
            {
              "attr": "paramControlTag",
              "valueType": "StringArray"
            },
            {
              "attr": "paramControlAttr",
              "valueType": "ObjectArray"
            },
            {
              "attr": "paramsGenerator",
              "valueType": "Function",
              "defaultValue": "__ht__function(data, controlVal, index, node,oldVal,form) {//绑定组索引对应的函数处理，用来动态生成复杂的参数变量传入\r\nswitch(index){\r\n    case 0:\r\n        break;\r\n    case 1:\r\n        break;\r\n    case 2:\r\n        break;\r\n    default:\r\n        break;\r\n}\r\n\r\nreturn controlVal;}",
              "extraInfo": {
                "arguments": [
                  "data",
                  "val",
                  "index",
                  "node",
                  "oldVal",
                  "form",
                  "type",
                  "inner"
                ]
              }
            },
            {
              "attr": "useAttrCORS",
              "valueType": "Boolean",
              "defaultValue": false,
              "description": "属性同源操作。\n                连线操作传递是否限定双方。比如有A/B/C/D/O五个组件，连线操作关系：\n                A→O、B→O、C→O、D→O，以及O→A、O→B、O→C、O→D，总结为\n                A、B、C、D分别与O有往返操作。\n                默认不勾选该属性时，A到D任何一个向O的连线操作，都不会影响到O自身\n                对A到D的下一步操作。勾选了该属性后，那么每次相邻的两次连线交互，\n                则会有同源选择性，比如A→O，下一步则O之会选择到A的操作即O→A。\n                同源操作通常用户多个组件共用一个配置弹窗的情况，比如上述A、B、C、D\n                相当于是四个同类型的组件，而O是公共的属性配置窗口，任何一个比如A点\n                击，可通过O弹窗显示属性，然后修改后将属性值回写到A，且并不会将值给\n                到其他几个组件，即便有连线在。\n                同源操作规则：当连线满足A/B→O.x，且有O.x→A/B时，即前一次组件A连线\n                操作O的x属性，那么，O对外触发且关联x属性值对外时，勾选了本属性同源\n                属性操作的前提下，将只会执行O.x→A，而忽略O.x→B/C等其他非A的图元组\n                件的连线操作。",
              "dynamicCreate": true
            },
            {
              "attr": "useInnerEventsAll",
              "valueType": "Boolean",
              "description": "是否允许内嵌事件通过。\n<br>若勾选，内嵌图元表单类型的事件函数属性，都将派发到上层容器图元对外触发连线操作。\n<br>默认不勾选，上层容器图元对外连线反向关联需要指定内嵌图元的具体事件函数属性才能\n<br>触发，否则忽略内嵌图元的事件触发，不会传递给上层容器图元对外连线操作。"
            },
            {
              "attr": "onChange",
              "valueType": "String",
              "extraInfo": {
                "arguments": [
                  "data",
                  "gv",
                  "cache",
                  "value",
                  "extra"
                ]
              }
            },
            {
              "attr": "页面4>0>_base>s:shape.border.width",
              "name": ".shape.border.width",
              "valueType": "Number",
              "defaultValue": 0,
              "extraInfo": null,
              "group": "页面4>0>_base"
            },
            {
              "attr": "页面4>0>_base>s:shape.border.color",
              "name": ".shape.border.color",
              "valueType": "Color",
              "defaultValue": "rgb(55,125,255)",
              "extraInfo": null,
              "group": "页面4>0>_base"
            },
            {
              "attr": "页面4>0>_base>s:shape.background",
              "name": ".shape.background",
              "valueType": "Color",
              "defaultValue": "rgb(247,247,247)",
              "extraInfo": null,
              "group": "页面4>0>_base"
            },
            {
              "attr": "页面4>0>txt1>a:value",
              "name": ".value",
              "valueType": "Object",
              "defaultValue": "编辑时，双击页签组件，可打开内嵌页面列表，双击选择后可进入到内嵌页分别设计！",
              "group": "页面4>0>txt1"
            },
            {
              "attr": "页面4>0>txt1>a:instantTrigger",
              "name": ".instantTrigger",
              "valueType": "Boolean",
              "defaultValue": true,
              "group": "页面4>0>txt1"
            },
            {
              "attr": "页面4>0>txt1>a:htmlContent",
              "name": ".htmlContent",
              "valueType": "Boolean",
              "defaultValue": false,
              "group": "页面4>0>txt1"
            },
            {
              "attr": "页面4>0>txt1>a:readOnly",
              "name": ".readOnly",
              "valueType": "Boolean",
              "defaultValue": true,
              "group": "页面4>0>txt1"
            },
            {
              "attr": "页面4>0>txt1>a:onChange",
              "name": ".onChange",
              "valueType": "Function",
              "extraInfo": {
                "arguments": [
                  "data",
                  "gv",
                  "cache",
                  "value",
                  "extra"
                ]
              },
              "group": "页面4>0>txt1"
            },
            {
              "attr": "页面4>0>txt1>a:display",
              "name": ".display",
              "valueType": "Image",
              "defaultValue": "",
              "description": "自定义页面地址。\n                可以是编辑器中的其他页面，也可以\n                是外部网页链接地址。",
              "group": "页面4>0>txt1"
            },
            {
              "attr": "页面4>0>txt1>a:popDirection",
              "name": ".popDirection",
              "valueType": "SideDirection",
              "defaultValue": "right",
              "description": "提示显示位置。",
              "group": "页面4>0>txt1"
            },
            {
              "attr": "页面4>0>txt1>a:popBackground",
              "name": ".popBackground",
              "valueType": "Color",
              "defaultValue": "white",
              "description": "箭头和背景色。",
              "group": "页面4>0>txt1"
            },
            {
              "attr": "页面4>0>txt1>a:popPadding",
              "name": ".popPadding",
              "valueType": "NumberArray",
              "defaultValue": [
                2,
                2,
                2,
                2
              ],
              "description": "内间距。",
              "group": "页面4>0>txt1"
            },
            {
              "attr": "页面4>0>txt1>a:popWidth",
              "name": ".popWidth",
              "valueType": "Number",
              "defaultValue": 400,
              "description": "弹出框宽度。",
              "group": "页面4>0>txt1"
            },
            {
              "attr": "页面4>0>txt1>a:popHeight",
              "name": ".popHeight",
              "valueType": "Number",
              "defaultValue": 300,
              "description": "弹出框高度。",
              "group": "页面4>0>txt1"
            },
            {
              "attr": "页面4>0>txt1>a:popBorderColor",
              "name": ".popBorderColor",
              "valueType": "Color",
              "defaultValue": "rgb(51,51,51)",
              "description": "边框线颜色。\n                    注意，是设置了边框宽度非0后的边框颜色。\n                    默认边框宽度属性为0时，实际上是白色并\n                    带有箭头指示的边框。本属性不用于修改默\n                    认边框色。",
              "group": "页面4>0>txt1"
            },
            {
              "attr": "页面4>0>txt1>a:popBorderWidth",
              "name": ".popBorderWidth",
              "valueType": "Number",
              "defaultValue": 0,
              "description": "边框线宽度。\n                    默认值为0，此时边框默认为白色并且带有\n                    箭头指示。当设置宽度后，颜色将取边框颜\n                    色属性的设置，并且不再有箭头指示。",
              "group": "页面4>0>txt1"
            },
            {
              "attr": "页面4>0>txt1>a:popBorderRadius",
              "name": ".popBorderRadius",
              "valueType": "Number",
              "defaultValue": 0,
              "description": "边框线圆角。\n                    设置圆角线后，如果此前默认是白色边框带有\n                    指示箭头，那么将自动不可见，只对内容区域\n                    产生圆角。",
              "group": "页面4>0>txt1"
            },
            {
              "attr": "页面4>0>txt1>a:popTriggerEvent",
              "name": ".popTriggerEvent",
              "valueType": "MouseEvent",
              "defaultValue": "hover",
              "description": "触发方式。\n                支持鼠标移入、点击（按钮时）\n                两种触发提示的方式。",
              "group": "页面4>0>txt1"
            },
            {
              "attr": "页面1>0>_base>s:shape.border.width",
              "name": ".shape.border.width",
              "valueType": "Number",
              "defaultValue": 0,
              "extraInfo": null,
              "group": "页面1>0>_base"
            },
            {
              "attr": "页面1>0>_base>s:shape.border.color",
              "name": ".shape.border.color",
              "valueType": "Color",
              "defaultValue": "rgb(55,125,255)",
              "extraInfo": null,
              "group": "页面1>0>_base"
            },
            {
              "attr": "页面1>0>_base>s:shape.background",
              "name": ".shape.background",
              "valueType": "Color",
              "defaultValue": "rgb(247,247,247)",
              "extraInfo": null,
              "group": "页面1>0>_base"
            },
            {
              "attr": "页面1>0>txt1>a:value",
              "name": ".value",
              "valueType": "Object",
              "defaultValue": "欢迎使用Tab页签组件！",
              "group": "页面1>0>txt1"
            },
            {
              "attr": "页面1>0>txt1>a:instantTrigger",
              "name": ".instantTrigger",
              "valueType": "Boolean",
              "defaultValue": true,
              "group": "页面1>0>txt1"
            },
            {
              "attr": "页面1>0>txt1>a:htmlContent",
              "name": ".htmlContent",
              "valueType": "Boolean",
              "defaultValue": false,
              "group": "页面1>0>txt1"
            },
            {
              "attr": "页面1>0>txt1>a:readOnly",
              "name": ".readOnly",
              "valueType": "Boolean",
              "defaultValue": true,
              "group": "页面1>0>txt1"
            },
            {
              "attr": "页面1>0>txt1>a:onChange",
              "name": ".onChange",
              "valueType": "Function",
              "extraInfo": {
                "arguments": [
                  "data",
                  "gv",
                  "cache",
                  "value",
                  "extra"
                ]
              },
              "group": "页面1>0>txt1"
            },
            {
              "attr": "页面1>0>txt1>a:display",
              "name": ".display",
              "valueType": "Image",
              "defaultValue": "",
              "description": "自定义页面地址。\n                可以是编辑器中的其他页面，也可以\n                是外部网页链接地址。",
              "group": "页面1>0>txt1"
            },
            {
              "attr": "页面1>0>txt1>a:popDirection",
              "name": ".popDirection",
              "valueType": "SideDirection",
              "defaultValue": "right",
              "description": "提示显示位置。",
              "group": "页面1>0>txt1"
            },
            {
              "attr": "页面1>0>txt1>a:popBackground",
              "name": ".popBackground",
              "valueType": "Color",
              "defaultValue": "white",
              "description": "箭头和背景色。",
              "group": "页面1>0>txt1"
            },
            {
              "attr": "页面1>0>txt1>a:popPadding",
              "name": ".popPadding",
              "valueType": "NumberArray",
              "defaultValue": [
                2,
                2,
                2,
                2
              ],
              "description": "内间距。",
              "group": "页面1>0>txt1"
            },
            {
              "attr": "页面1>0>txt1>a:popWidth",
              "name": ".popWidth",
              "valueType": "Number",
              "defaultValue": 400,
              "description": "弹出框宽度。",
              "group": "页面1>0>txt1"
            },
            {
              "attr": "页面1>0>txt1>a:popHeight",
              "name": ".popHeight",
              "valueType": "Number",
              "defaultValue": 300,
              "description": "弹出框高度。",
              "group": "页面1>0>txt1"
            },
            {
              "attr": "页面1>0>txt1>a:popBorderColor",
              "name": ".popBorderColor",
              "valueType": "Color",
              "defaultValue": "rgb(51,51,51)",
              "description": "边框线颜色。\n                    注意，是设置了边框宽度非0后的边框颜色。\n                    默认边框宽度属性为0时，实际上是白色并\n                    带有箭头指示的边框。本属性不用于修改默\n                    认边框色。",
              "group": "页面1>0>txt1"
            },
            {
              "attr": "页面1>0>txt1>a:popBorderWidth",
              "name": ".popBorderWidth",
              "valueType": "Number",
              "defaultValue": 0,
              "description": "边框线宽度。\n                    默认值为0，此时边框默认为白色并且带有\n                    箭头指示。当设置宽度后，颜色将取边框颜\n                    色属性的设置，并且不再有箭头指示。",
              "group": "页面1>0>txt1"
            },
            {
              "attr": "页面1>0>txt1>a:popBorderRadius",
              "name": ".popBorderRadius",
              "valueType": "Number",
              "defaultValue": 0,
              "description": "边框线圆角。\n                    设置圆角线后，如果此前默认是白色边框带有\n                    指示箭头，那么将自动不可见，只对内容区域\n                    产生圆角。",
              "group": "页面1>0>txt1"
            },
            {
              "attr": "页面1>0>txt1>a:popTriggerEvent",
              "name": ".popTriggerEvent",
              "valueType": "MouseEvent",
              "defaultValue": "hover",
              "description": "触发方式。\n                支持鼠标移入、点击（按钮时）\n                两种触发提示的方式。",
              "group": "页面1>0>txt1"
            },
            {
              "attr": "页面2>0>_base>s:shape.border.width",
              "name": ".shape.border.width",
              "valueType": "Number",
              "defaultValue": 0,
              "extraInfo": null,
              "group": "页面2>0>_base"
            },
            {
              "attr": "页面2>0>_base>s:shape.border.color",
              "name": ".shape.border.color",
              "valueType": "Color",
              "defaultValue": "rgb(55,125,255)",
              "extraInfo": null,
              "group": "页面2>0>_base"
            },
            {
              "attr": "页面2>0>_base>s:shape.background",
              "name": ".shape.background",
              "valueType": "Color",
              "defaultValue": "rgb(247,247,247)",
              "extraInfo": null,
              "group": "页面2>0>_base"
            },
            {
              "attr": "页面2>0>txt1>a:value",
              "name": ".value",
              "valueType": "Object",
              "defaultValue": "通常配合按钮组使用：\n\n按钮组可以设置与页签数量相等的项，默认会操作同一个页面的标签为tab1的页签组件，不需要做任何关联配置。实现按钮切换，tab页签也相应切换。",
              "group": "页面2>0>txt1"
            },
            {
              "attr": "页面2>0>txt1>a:instantTrigger",
              "name": ".instantTrigger",
              "valueType": "Boolean",
              "defaultValue": true,
              "group": "页面2>0>txt1"
            },
            {
              "attr": "页面2>0>txt1>a:htmlContent",
              "name": ".htmlContent",
              "valueType": "Boolean",
              "defaultValue": false,
              "group": "页面2>0>txt1"
            },
            {
              "attr": "页面2>0>txt1>a:readOnly",
              "name": ".readOnly",
              "valueType": "Boolean",
              "defaultValue": true,
              "group": "页面2>0>txt1"
            },
            {
              "attr": "页面2>0>txt1>a:onChange",
              "name": ".onChange",
              "valueType": "Function",
              "extraInfo": {
                "arguments": [
                  "data",
                  "gv",
                  "cache",
                  "value",
                  "extra"
                ]
              },
              "group": "页面2>0>txt1"
            },
            {
              "attr": "页面2>0>txt1>a:display",
              "name": ".display",
              "valueType": "Image",
              "defaultValue": "",
              "description": "自定义页面地址。\n                可以是编辑器中的其他页面，也可以\n                是外部网页链接地址。",
              "group": "页面2>0>txt1"
            },
            {
              "attr": "页面2>0>txt1>a:popDirection",
              "name": ".popDirection",
              "valueType": "SideDirection",
              "defaultValue": "right",
              "description": "提示显示位置。",
              "group": "页面2>0>txt1"
            },
            {
              "attr": "页面2>0>txt1>a:popBackground",
              "name": ".popBackground",
              "valueType": "Color",
              "defaultValue": "white",
              "description": "箭头和背景色。",
              "group": "页面2>0>txt1"
            },
            {
              "attr": "页面2>0>txt1>a:popPadding",
              "name": ".popPadding",
              "valueType": "NumberArray",
              "defaultValue": [
                2,
                2,
                2,
                2
              ],
              "description": "内间距。",
              "group": "页面2>0>txt1"
            },
            {
              "attr": "页面2>0>txt1>a:popWidth",
              "name": ".popWidth",
              "valueType": "Number",
              "defaultValue": 400,
              "description": "弹出框宽度。",
              "group": "页面2>0>txt1"
            },
            {
              "attr": "页面2>0>txt1>a:popHeight",
              "name": ".popHeight",
              "valueType": "Number",
              "defaultValue": 300,
              "description": "弹出框高度。",
              "group": "页面2>0>txt1"
            },
            {
              "attr": "页面2>0>txt1>a:popBorderColor",
              "name": ".popBorderColor",
              "valueType": "Color",
              "defaultValue": "rgb(51,51,51)",
              "description": "边框线颜色。\n                    注意，是设置了边框宽度非0后的边框颜色。\n                    默认边框宽度属性为0时，实际上是白色并\n                    带有箭头指示的边框。本属性不用于修改默\n                    认边框色。",
              "group": "页面2>0>txt1"
            },
            {
              "attr": "页面2>0>txt1>a:popBorderWidth",
              "name": ".popBorderWidth",
              "valueType": "Number",
              "defaultValue": 0,
              "description": "边框线宽度。\n                    默认值为0，此时边框默认为白色并且带有\n                    箭头指示。当设置宽度后，颜色将取边框颜\n                    色属性的设置，并且不再有箭头指示。",
              "group": "页面2>0>txt1"
            },
            {
              "attr": "页面2>0>txt1>a:popBorderRadius",
              "name": ".popBorderRadius",
              "valueType": "Number",
              "defaultValue": 0,
              "description": "边框线圆角。\n                    设置圆角线后，如果此前默认是白色边框带有\n                    指示箭头，那么将自动不可见，只对内容区域\n                    产生圆角。",
              "group": "页面2>0>txt1"
            },
            {
              "attr": "页面2>0>txt1>a:popTriggerEvent",
              "name": ".popTriggerEvent",
              "valueType": "MouseEvent",
              "defaultValue": "hover",
              "description": "触发方式。\n                支持鼠标移入、点击（按钮时）\n                两种触发提示的方式。",
              "group": "页面2>0>txt1"
            },
            {
              "attr": "页面3>0>_base>s:shape.border.width",
              "name": ".shape.border.width",
              "valueType": "Number",
              "defaultValue": 0,
              "extraInfo": null,
              "group": "页面3>0>_base"
            },
            {
              "attr": "页面3>0>_base>s:shape.border.color",
              "name": ".shape.border.color",
              "valueType": "Color",
              "defaultValue": "rgb(55,125,255)",
              "extraInfo": null,
              "group": "页面3>0>_base"
            },
            {
              "attr": "页面3>0>_base>s:shape.background",
              "name": ".shape.background",
              "valueType": "Color",
              "defaultValue": "rgb(247,247,247)",
              "extraInfo": null,
              "group": "页面3>0>_base"
            },
            {
              "attr": "页面3>0>txt1>a:value",
              "name": ".value",
              "valueType": "Object",
              "defaultValue": "tab页签可以在多页（displays）属性中设置多个内嵌页地址。\n\n如果相对路径（relativePath）属性有设置公共目录，那么前面多页地址只需要设置文件名即可。",
              "group": "页面3>0>txt1"
            },
            {
              "attr": "页面3>0>txt1>a:instantTrigger",
              "name": ".instantTrigger",
              "valueType": "Boolean",
              "defaultValue": true,
              "group": "页面3>0>txt1"
            },
            {
              "attr": "页面3>0>txt1>a:htmlContent",
              "name": ".htmlContent",
              "valueType": "Boolean",
              "defaultValue": false,
              "group": "页面3>0>txt1"
            },
            {
              "attr": "页面3>0>txt1>a:readOnly",
              "name": ".readOnly",
              "valueType": "Boolean",
              "defaultValue": true,
              "group": "页面3>0>txt1"
            },
            {
              "attr": "页面3>0>txt1>a:onChange",
              "name": ".onChange",
              "valueType": "Function",
              "extraInfo": {
                "arguments": [
                  "data",
                  "gv",
                  "cache",
                  "value",
                  "extra"
                ]
              },
              "group": "页面3>0>txt1"
            },
            {
              "attr": "页面3>0>txt1>a:display",
              "name": ".display",
              "valueType": "Image",
              "defaultValue": "",
              "description": "自定义页面地址。\n                可以是编辑器中的其他页面，也可以\n                是外部网页链接地址。",
              "group": "页面3>0>txt1"
            },
            {
              "attr": "页面3>0>txt1>a:popDirection",
              "name": ".popDirection",
              "valueType": "SideDirection",
              "defaultValue": "right",
              "description": "提示显示位置。",
              "group": "页面3>0>txt1"
            },
            {
              "attr": "页面3>0>txt1>a:popBackground",
              "name": ".popBackground",
              "valueType": "Color",
              "defaultValue": "white",
              "description": "箭头和背景色。",
              "group": "页面3>0>txt1"
            },
            {
              "attr": "页面3>0>txt1>a:popPadding",
              "name": ".popPadding",
              "valueType": "NumberArray",
              "defaultValue": [
                2,
                2,
                2,
                2
              ],
              "description": "内间距。",
              "group": "页面3>0>txt1"
            },
            {
              "attr": "页面3>0>txt1>a:popWidth",
              "name": ".popWidth",
              "valueType": "Number",
              "defaultValue": 400,
              "description": "弹出框宽度。",
              "group": "页面3>0>txt1"
            },
            {
              "attr": "页面3>0>txt1>a:popHeight",
              "name": ".popHeight",
              "valueType": "Number",
              "defaultValue": 300,
              "description": "弹出框高度。",
              "group": "页面3>0>txt1"
            },
            {
              "attr": "页面3>0>txt1>a:popBorderColor",
              "name": ".popBorderColor",
              "valueType": "Color",
              "defaultValue": "rgb(51,51,51)",
              "description": "边框线颜色。\n                    注意，是设置了边框宽度非0后的边框颜色。\n                    默认边框宽度属性为0时，实际上是白色并\n                    带有箭头指示的边框。本属性不用于修改默\n                    认边框色。",
              "group": "页面3>0>txt1"
            },
            {
              "attr": "页面3>0>txt1>a:popBorderWidth",
              "name": ".popBorderWidth",
              "valueType": "Number",
              "defaultValue": 0,
              "description": "边框线宽度。\n                    默认值为0，此时边框默认为白色并且带有\n                    箭头指示。当设置宽度后，颜色将取边框颜\n                    色属性的设置，并且不再有箭头指示。",
              "group": "页面3>0>txt1"
            },
            {
              "attr": "页面3>0>txt1>a:popBorderRadius",
              "name": ".popBorderRadius",
              "valueType": "Number",
              "defaultValue": 0,
              "description": "边框线圆角。\n                    设置圆角线后，如果此前默认是白色边框带有\n                    指示箭头，那么将自动不可见，只对内容区域\n                    产生圆角。",
              "group": "页面3>0>txt1"
            },
            {
              "attr": "页面3>0>txt1>a:popTriggerEvent",
              "name": ".popTriggerEvent",
              "valueType": "MouseEvent",
              "defaultValue": "hover",
              "description": "触发方式。\n                支持鼠标移入、点击（按钮时）\n                两种触发提示的方式。",
              "group": "页面3>0>txt1"
            }
          ],
          "snapshotURL": "symbols/develop/uiotos/arranged/controls/containers _icon/TAB页签.json",
          "renderHTML": "__ht__function(data, gv, cache) {return __tabView(data,gv,cache);}",
          "width": 300,
          "height": 200,
          "fitSize": true,
          "pixelPerfect": false,
          "comps": [],
          "uuid": "C04FA4CE-3656-4D5A-BF15-4474F1539CD7"
        },
        "host": {
          "__i": 2783810
        },
        "position": {
          "x": -290.414,
          "y": -123.03701
        },
        "width": 1024,
        "height": 550.70767
      },
      "s": {
        "label.position": 14,
        "label.offset.x": -10,
        "label.offset.y": 0,
        "label.color": "rgb(61,61,61)",
        "2d.movable": false,
        "interactive": true,
        "image.stretch": "uniform",
        "label.opacity": 0,
        "pixelPerfect": false,
        "layout.h": "leftright",
        "layout.v": "topbottom"
      },
      "a": {
        "symbol": "symbols/develop/uiotos/arranged/controls/containers/TAB页签.json",
        "relativePath": "./05-多页切换/",
        "shadowEnabled": false,
        "displays": [
          "页面1",
          "页面2",
          "页面3",
          "页面4"
        ],
        "__loadingStatus": false,
        "isLoadingGet": false,
        "innerLayoutMode": "fullScreen",
        "页面1>0>_base>s:shape.border.width": 0,
        "页面1>0>_base>s:shape.border.color": "rgb(55,125,255)",
        "页面1>0>_base>s:shape.background": "rgb(247,247,247)",
        "页面1>0>txt1>a:value": "欢迎使用Tab页签组件！",
        "页面1>0>txt1>a:instantTrigger": true,
        "页面1>0>txt1>a:htmlContent": false,
        "页面1>0>txt1>a:readOnly": true,
        "页面1>0>txt1>a:display": "",
        "页面1>0>txt1>a:popDirection": "right",
        "页面1>0>txt1>a:popBackground": "white",
        "页面1>0>txt1>a:popPadding": [
          2,
          2,
          2,
          2
        ],
        "页面1>0>txt1>a:popWidth": 400,
        "页面1>0>txt1>a:popHeight": 300,
        "页面1>0>txt1>a:popBorderColor": "rgb(51,51,51)",
        "页面1>0>txt1>a:popBorderWidth": 0,
        "页面1>0>txt1>a:popBorderRadius": 0,
        "页面1>0>txt1>a:popTriggerEvent": "hover",
        "页面2>0>_base>s:shape.border.width": 0,
        "页面2>0>_base>s:shape.border.color": "rgb(55,125,255)",
        "页面2>0>_base>s:shape.background": "rgb(247,247,247)",
        "页面2>0>txt1>a:value": "通常配合按钮组使用：\n\n按钮组可以设置与页签数量相等的项，默认会操作同一个页面的标签为tab1的页签组件，不需要做任何关联配置。实现按钮切换，tab页签也相应切换。",
        "页面2>0>txt1>a:instantTrigger": true,
        "页面2>0>txt1>a:htmlContent": false,
        "页面2>0>txt1>a:readOnly": true,
        "页面2>0>txt1>a:display": "",
        "页面2>0>txt1>a:popDirection": "right",
        "页面2>0>txt1>a:popBackground": "white",
        "页面2>0>txt1>a:popPadding": [
          2,
          2,
          2,
          2
        ],
        "页面2>0>txt1>a:popWidth": 400,
        "页面2>0>txt1>a:popHeight": 300,
        "页面2>0>txt1>a:popBorderColor": "rgb(51,51,51)",
        "页面2>0>txt1>a:popBorderWidth": 0,
        "页面2>0>txt1>a:popBorderRadius": 0,
        "页面2>0>txt1>a:popTriggerEvent": "hover",
        "页面3>0>_base>s:shape.border.width": 0,
        "页面3>0>_base>s:shape.border.color": "rgb(55,125,255)",
        "页面3>0>_base>s:shape.background": "rgb(247,247,247)",
        "页面3>0>txt1>a:value": "tab页签可以在多页（displays）属性中设置多个内嵌页地址。\n\n如果相对路径（relativePath）属性有设置公共目录，那么前面多页地址只需要设置文件名即可。",
        "页面3>0>txt1>a:instantTrigger": true,
        "页面3>0>txt1>a:htmlContent": false,
        "页面3>0>txt1>a:readOnly": true,
        "页面3>0>txt1>a:display": "",
        "页面3>0>txt1>a:popDirection": "right",
        "页面3>0>txt1>a:popBackground": "white",
        "页面3>0>txt1>a:popPadding": [
          2,
          2,
          2,
          2
        ],
        "页面3>0>txt1>a:popWidth": 400,
        "页面3>0>txt1>a:popHeight": 300,
        "页面3>0>txt1>a:popBorderColor": "rgb(51,51,51)",
        "页面3>0>txt1>a:popBorderWidth": 0,
        "页面3>0>txt1>a:popBorderRadius": 0,
        "页面3>0>txt1>a:popTriggerEvent": "hover",
        "页面4>0>_base>s:shape.border.width": 0,
        "页面4>0>_base>s:shape.border.color": "rgb(55,125,255)",
        "页面4>0>_base>s:shape.background": "rgb(247,247,247)",
        "页面4>0>txt1>a:value": "编辑时，双击页签组件，可打开内嵌页面列表，双击选择后可进入到内嵌页分别设计！",
        "页面4>0>txt1>a:instantTrigger": true,
        "页面4>0>txt1>a:htmlContent": false,
        "页面4>0>txt1>a:readOnly": true,
        "页面4>0>txt1>a:display": "",
        "页面4>0>txt1>a:popDirection": "right",
        "页面4>0>txt1>a:popBackground": "white",
        "页面4>0>txt1>a:popPadding": [
          2,
          2,
          2,
          2
        ],
        "页面4>0>txt1>a:popWidth": 400,
        "页面4>0>txt1>a:popHeight": 300,
        "页面4>0>txt1>a:popBorderColor": "rgb(51,51,51)",
        "页面4>0>txt1>a:popBorderWidth": 0,
        "页面4>0>txt1>a:popBorderRadius": 0,
        "页面4>0>txt1>a:popTriggerEvent": "hover",
        "index": 0,
        "display": "displays/demo/2-模板/02-管理系统/05-多页切换/页面1.json",
        "bindEvents": [
          "*",
          "onChange"
        ]
      }
    },
    {
      "c": "ht.Node",
      "i": 2783814,
      "p": {
        "name": "bts",
        "displayName": "按钮组（bts1）",
        "toolTip": "<p style='color:rgb(242,83,75);margin-top:5px;margin-bottom:5px;font-weight:bold;line-height:1.5em;'>已被布局，不允许拖动（shift+回车可解除）</p><p style='color:rgb(242,83,75);margin-top:5px;margin-bottom:5px;font-weight:bold;line-height:1.5em;'>已被布局，不允许拖动</p>",
        "tag": "bts1",
        "dataBindings": {
          "a": {
            "select": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "buttons": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "direction": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "initialTrigger": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "onChange": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "display": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popDirection": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popBackground": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popPadding": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popWidth": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popHeight": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popBorderColor": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popBorderWidth": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popBorderRadius": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popTriggerEvent": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            }
          }
        },
        "image": {
          "modified": "Wed May 08 2024 14:33:43 GMT+0800 (中国标准时间)",
          "background": "rgb(32,37,46)",
          "dataBindings": [
            {
              "attr": "symbol",
              "valueType": "Image"
            },
            {
              "attr": "shadowBorder",
              "valueType": "NumberArray",
              "defaultValue": [
                0,
                0,
                8
              ],
              "group": "功能（关键）"
            },
            {
              "attr": "shadowColor",
              "valueType": "Color",
              "defaultValue": "rgba(102,102,102,0.2)"
            },
            {
              "attr": "shadowEnabled",
              "valueType": "Boolean",
              "defaultValue": false
            },
            {
              "attr": "direction",
              "valueType": "String",
              "defaultValue": "horizontal",
              "description": "horizontal：水平按钮组；\nvertical：垂直按钮组。",
              "extraInfo": {
                "enum": {
                  "values": [
                    "horizontal",
                    "vertical"
                  ]
                }
              }
            },
            {
              "attr": "gap",
              "valueType": "Number",
              "defaultValue": -2
            },
            {
              "attr": "buttons",
              "valueType": "ObjectArray",
              "defaultValue": [
                "按钮1",
                "按钮2",
                "按钮3"
              ],
              "description": "按钮显示文字。"
            },
            {
              "attr": "btnDatas",
              "valueType": "ObjectArray",
              "description": "按钮对应的数据。\n<br>显示文字（buttons）用于界面展示，\n<br>这里用于对应按钮的数据。"
            },
            {
              "attr": "select",
              "valueType": "Number",
              "defaultValue": 0,
              "description": "当前选中的索引。\n<br>可读写。从0开始，第几个按钮当前选中，\n<br>或者设置第几个按钮选中。-1表示都不选中。"
            },
            {
              "attr": "btnData",
              "valueType": "Object",
              "description": "当前选中的内容。\n<br>可读写。匹配按钮数据属性（btnDatas），\n<br>当前属性值是对应按钮数据的第几个，则\n<br>第几个按钮选中。\n<br>如果按钮数据没有对应的，则从按钮显示\n<br>文字去匹配。注意，与当前选中索引（sel-\n<br>ected）属性自动保持同步。"
            },
            {
              "attr": "hoverTrigger",
              "valueType": "Boolean"
            },
            {
              "attr": "initialTrigger",
              "valueType": "Boolean",
              "defaultValue": false,
              "description": "划过时即点击。\n<br>默认需要点击才能切换，勾选本属性后，\n<br>鼠标划过即切换，省去鼠标点击操作。"
            },
            {
              "attr": "background",
              "valueType": "ColorArray",
              "defaultValue": [
                "rgb(255,255,255)",
                "rgba(255,255,255,0.9)"
              ]
            },
            {
              "attr": "selectBackground",
              "valueType": "ColorArray",
              "defaultValue": [
                "rgb(55,125,255)",
                "rgba(55,125,255,0.9)"
              ]
            },
            {
              "attr": "activeBackground",
              "valueType": "ColorArray",
              "defaultValue": [
                "rgb(50,99,250)",
                "rgba(55,125,255,0.9)"
              ]
            },
            {
              "attr": "textColor",
              "valueType": "ColorArray",
              "defaultValue": [
                "rgb(61,61,61)",
                "rgb(55,125,255)"
              ]
            },
            {
              "attr": "selectTextColor",
              "valueType": "ColorArray",
              "defaultValue": [
                "white",
                "white"
              ]
            },
            {
              "attr": "activeTextColor",
              "valueType": "ColorArray",
              "defaultValue": [
                "white",
                "white"
              ]
            },
            {
              "attr": "textFont",
              "valueType": "Font",
              "defaultValue": "12px sans-serif, Arial"
            },
            {
              "attr": "radius",
              "valueType": "NumberArray",
              "defaultValue": [
                5,
                5,
                5,
                5
              ]
            },
            {
              "attr": "borderWidth",
              "valueType": "PositiveNumber",
              "defaultValue": 1
            },
            {
              "attr": "borderColor",
              "valueType": "Color",
              "defaultValue": "rgb(213,213,213)",
              "description": "边框颜色。\n<br>如果不设置，那么边框颜色将自动跟随\n<br>当前选中项目的背景颜色。"
            },
            {
              "attr": "bindTabview",
              "valueType": "String",
              "defaultValue": "tab1"
            },
            {
              "attr": "simpleLineStyle",
              "valueType": "Boolean",
              "defaultValue": false
            },
            {
              "attr": "bindControlsTag",
              "valueType": "StringArray",
              "group": "bindControls"
            },
            {
              "attr": "bindControlsAttr",
              "valueType": "StringArray"
            },
            {
              "attr": "bindControlsVal",
              "valueType": "ObjectArray",
              "description": "静态值。也用作数组索引、JSON对象解析提取值用途。\n<br>一、静态值用途：\n<br>对常规类型的属性赋值且没有反向关联属性值，传入为数值时，不\n<br>会作为数组的索引，而会当成常量值对外赋值。此外，存在特殊值：\n<br>~和undefined表示过滤、不触发；null为默认值，表示传递默认表\n<br>单数据。编辑状态下清空后保存与设置null等价。\n<br>二、数组索引用途\n<br>情况1：被操作的组件属性原先值是数组时（包括空数组），会将\n<br>待输出的值作为被操作数组指定索引的值来传入，而不是整体覆盖。\n<br>情况2：如果要被操作的组件属性原先值不是数组，而且待输出的\n<br>值为数组类型并且长度也在索引范围内，那么会按照索引取自身数\n<br>组指定元素再对外输出。（如果想要取待输出索引值，赋值给被操\n<br>纵属性的指定索引，那么需要中间组件属性连线过渡以下，无法直\n<br>接操作）\n<br>情况3：如果要被操作的组件属性是数组，而且待输出的值也是数组\n<br>类型，此时当情况1来处理。\n<br>三、数据解析用途：\n<br>待输出的值为JSON对象时，用x.y.z这种以字符.或者>为间隔的方式\n<br>实现对JSON字段层次逐层定位，当是数组时x.0.y.1这种以数字的方\n<br>式来指定数组的某个索引。以此实现对任意结果JSON对象字段的定\n<br>位，获取结构内指定字段对应的值。"
            },
            {
              "attr": "paramControlTag",
              "valueType": "StringArray"
            },
            {
              "attr": "paramControlAttr",
              "valueType": "StringArray"
            },
            {
              "attr": "paramsGenerator",
              "valueType": "Function",
              "defaultValue": "__ht__function(data, val, index, node,oldVal,form) {//绑定组索引对应的函数处理，用来动态生成复杂的参数变量传入\r\nswitch(index){\r\n    case 0:\r\n        break;\r\n    case 1:\r\n        break;\r\n    case 2:\r\n        break;\r\n    default:\r\n        break;\r\n}\r\n\r\nreturn val;}",
              "extraInfo": {
                "arguments": [
                  "data",
                  "val",
                  "index",
                  "node",
                  "oldVal",
                  "form"
                ]
              }
            },
            {
              "attr": "useAttrCORS",
              "valueType": "Boolean",
              "defaultValue": false,
              "description": "属性同源操作。\n                连线操作传递是否限定双方。比如有A/B/C/D/O五个组件，连线操作关系：\n                A→O、B→O、C→O、D→O，以及O→A、O→B、O→C、O→D，总结为\n                A、B、C、D分别与O有往返操作。\n                默认不勾选该属性时，A到D任何一个向O的连线操作，都不会影响到O自身\n                对A到D的下一步操作。勾选了该属性后，那么每次相邻的两次连线交互，\n                则会有同源选择性，比如A→O，下一步则O之会选择到A的操作即O→A。\n                同源操作通常用户多个组件共用一个配置弹窗的情况，比如上述A、B、C、D\n                相当于是四个同类型的组件，而O是公共的属性配置窗口，任何一个比如A点\n                击，可通过O弹窗显示属性，然后修改后将属性值回写到A，且并不会将值给\n                到其他几个组件，即便有连线在。\n                同源操作规则：当连线满足A/B→O.x，且有O.x→A/B时，即前一次组件A连线\n                操作O的x属性，那么，O对外触发且关联x属性值对外时，勾选了本属性同源\n                属性操作的前提下，将只会执行O.x→A，而忽略O.x→B/C等其他非A的图元组\n                件的连线操作。",
              "dynamicCreate": true
            },
            {
              "attr": "onChange",
              "valueType": "Function",
              "extraInfo": {
                "arguments": [
                  "data",
                  "gv",
                  "cache",
                  "param",
                  "extra"
                ]
              }
            },
            {
              "attr": "display",
              "name": "display",
              "valueType": "Image",
              "defaultValue": "",
              "description": "自定义页面地址。\n                可以是编辑器中的其他页面，也可以\n                是外部网页链接地址。",
              "group": "弹出框",
              "dynamicCreate": true
            },
            {
              "attr": "popDirection",
              "name": "popDirection",
              "valueType": "SideDirection",
              "defaultValue": "right",
              "description": "提示显示位置。",
              "dynamicCreate": true
            },
            {
              "attr": "popBackground",
              "name": "popBackground",
              "valueType": "Color",
              "defaultValue": "white",
              "description": "箭头和背景色。",
              "dynamicCreate": true
            },
            {
              "attr": "popPadding",
              "name": "padding",
              "valueType": "NumberArray",
              "defaultValue": [
                2,
                2,
                2,
                2
              ],
              "description": "内间距。",
              "dynamicCreate": true
            },
            {
              "attr": "popWidth",
              "name": "popWidth",
              "valueType": "Number",
              "defaultValue": 400,
              "description": "弹出框宽度。",
              "dynamicCreate": true
            },
            {
              "attr": "popHeight",
              "name": "popHeight",
              "valueType": "Number",
              "defaultValue": 300,
              "description": "弹出框高度。",
              "dynamicCreate": true
            },
            {
              "attr": "popBorderColor",
              "name": "popBorderColor",
              "valueType": "Color",
              "defaultValue": "rgb(51,51,51)",
              "description": "边框线颜色。\n                    注意，是设置了边框宽度非0后的边框颜色。\n                    默认边框宽度属性为0时，实际上是白色并\n                    带有箭头指示的边框。本属性不用于修改默\n                    认边框色。",
              "dynamicCreate": true
            },
            {
              "attr": "popBorderWidth",
              "name": "popBorderWidth",
              "valueType": "Number",
              "defaultValue": 0,
              "description": "边框线宽度。\n                    默认值为0，此时边框默认为白色并且带有\n                    箭头指示。当设置宽度后，颜色将取边框颜\n                    色属性的设置，并且不再有箭头指示。",
              "dynamicCreate": true
            },
            {
              "attr": "popBorderRadius",
              "name": "popBorderRadius",
              "valueType": "Number",
              "defaultValue": 0,
              "description": "边框线圆角。\n                    设置圆角线后，如果此前默认是白色边框带有\n                    指示箭头，那么将自动不可见，只对内容区域\n                    产生圆角。",
              "dynamicCreate": true
            },
            {
              "attr": "popTriggerEvent",
              "name": "popTriggerEvent",
              "valueType": "MouseEvent",
              "defaultValue": "hover",
              "description": "触发方式。\n                支持鼠标移入、点击（按钮时）\n                两种触发提示的方式。",
              "dynamicCreate": true
            }
          ],
          "snapshotURL": "icon.base.tabs",
          "renderHTML": "__ht__function(data, gv, cache) {return __hButtonGroup_ui(data,gv,cache);}",
          "width": 300,
          "height": 35,
          "pixelPerfect": false,
          "comps": [],
          "uuid": "1C2ED94B-0CC2-4AD5-BDB9-3F20AA268CA0"
        },
        "host": {
          "__i": 2783810
        },
        "position": {
          "x": -290.414,
          "y": -423.03701
        },
        "width": 410.91795,
        "height": 49.29233
      },
      "s": {
        "label.opacity": 0,
        "label.position": 14,
        "label.offset.x": -10,
        "label.offset.y": 0,
        "label.color": "rgb(61,61,61)",
        "interactive": true,
        "image.stretch": "uniform",
        "2d.movable": false,
        "layout.h": "center",
        "layout.v": "top"
      },
      "a": {
        "buttons": [
          "页面1",
          "页面2",
          "页面3",
          "页面4"
        ],
        "select": 0,
        "bindEvents": [
          "*",
          "onChange"
        ],
        "background": [
          "rgb(0,21,41)",
          "rgba(26,75,117,0.6)"
        ],
        "borderWidth": 0,
        "textColor": [
          "rgb(255,255,255)",
          "rgba(255,255,255,0.8)"
        ],
        "selectBackground": [
          "rgb(26,75,117)",
          "rgba(26,75,117,0.9)"
        ],
        "activeBackground": [
          "rgb(26,75,117)",
          "rgb(26,75,117)"
        ],
        "selectTextColor": [
          "rgb(54,114,255)",
          "rgba(54,114,255,0.9)"
        ],
        "activeTextColor": [
          "rgb(54,114,255)",
          "rgb(54,114,255)"
        ],
        "textFont": "14px sans-serif, Arial",
        "symbol": "symbols/develop/uiotos/base/hButtonGroup-ui.json",
        "oldDynamicAttrs": [
          {
            "attr": "useAttrCORS",
            "valueType": "Boolean",
            "defaultValue": false,
            "description": "属性同源操作。\n                连线操作传递是否限定双方。比如有A/B/C/D/O五个组件，连线操作关系：\n                A→O、B→O、C→O、D→O，以及O→A、O→B、O→C、O→D，总结为\n                A、B、C、D分别与O有往返操作。\n                默认不勾选该属性时，A到D任何一个向O的连线操作，都不会影响到O自身\n                对A到D的下一步操作。勾选了该属性后，那么每次相邻的两次连线交互，\n                则会有同源选择性，比如A→O，下一步则O之会选择到A的操作即O→A。\n                同源操作通常用户多个组件共用一个配置弹窗的情况，比如上述A、B、C、D\n                相当于是四个同类型的组件，而O是公共的属性配置窗口，任何一个比如A点\n                击，可通过O弹窗显示属性，然后修改后将属性值回写到A，且并不会将值给\n                到其他几个组件，即便有连线在。\n                同源操作规则：当连线满足A/B→O.x，且有O.x→A/B时，即前一次组件A连线\n                操作O的x属性，那么，O对外触发且关联x属性值对外时，勾选了本属性同源\n                属性操作的前提下，将只会执行O.x→A，而忽略O.x→B/C等其他非A的图元组\n                件的连线操作。",
            "dynamicCreate": true
          }
        ],
        "gap": -2,
        "toolTipRaw": "<p style='color:rgb(242,83,75);margin-top:5px;margin-bottom:5px;font-weight:bold;line-height:1.5em;'>已被布局，不允许拖动（shift+回车可解除）</p><p style='color:rgb(242,83,75);margin-top:5px;margin-bottom:5px;font-weight:bold;line-height:1.5em;'>已被布局，不允许拖动</p>",
        "btnData": "页面1",
        "radius": [
          0,
          0,
          0,
          0
        ]
      }
    }
  ],
  "modified": "Wed May 22 2024 15:37:42 GMT+0800 (中国标准时间)",
  "contentRect": {
    "x": -878.0849,
    "y": -447.68318,
    "width": 1099.6709,
    "height": 600
  }
}
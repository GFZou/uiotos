{
  "v": "7.7.5",
  "p": {
    "autoAdjustIndex": true,
    "hierarchicalRendering": true
  },
  "a": {
    "rotateAsClock": false,
    "gridBlockSize": 20,
    "connectActionType": null,
    "fitContent": false,
    "zoomable": false,
    "rectSelectable": false,
    "pannable": false
  },
  "d": [
    {
      "c": "ht.Node",
      "i": 39352,
      "p": {
        "name": "base",
        "displayName": "底板（_base）",
        "tag": "_base",
        "position": {
          "x": -290.414,
          "y": -158.68318
        },
        "width": 1024,
        "height": 600
      },
      "s": {
        "shape": "rect",
        "shape.background": "rgb(0,21,41)",
        "fullscreen": "fill",
        "fullscreen.gap": 0,
        "2d.movable": false,
        "label.opacity": 0,
        "interactive": true,
        "label.position": 14,
        "label.offset.x": -10,
        "label.offset.y": 0,
        "label.color": "rgb(61,61,61)"
      }
    },
    {
      "c": "ht.Node",
      "i": 39353,
      "p": {
        "name": "scroll",
        "displayName": "滚动页（滚动页1）",
        "toolTip": "<p style='color:rgb(242,83,75);margin-top:5px;margin-bottom:5px;font-weight:bold;line-height:1.5em;'>已被布局，不允许拖动（shift+回车可解除）</p>",
        "tag": "滚动页1",
        "dataBindings": {
          "a": {
            "display": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "autoFillMinWidth": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "onScrollEnded": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "userData": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "innerLayoutMode": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "_bindEvents_0": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "顶部>0>_base>s:shape.border.width": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "顶部>0>gv1>a:display": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "顶部>0>gv1>a:innerLayoutMode": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "顶部>0>gv1>a:透明图片按钮_@autoBase2@1715965594247>0>func1>a:inputs": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            }
          }
        },
        "image": {
          "modified": "Fri May 17 2024 15:38:11 GMT+0800 (中国标准时间)",
          "dataBindings": [
            {
              "attr": "symbol",
              "valueType": "Image"
            },
            {
              "attr": "display",
              "valueType": "URL",
              "defaultValue": "",
              "group": "功能（关键）"
            },
            {
              "attr": "innerLayoutMode",
              "valueType": "String",
              "description": "内嵌页面的布局模式。\n<br>页面通常分为适配内容（fitContent）\n<br>和全屏填充（fullScreen）两种模式，\n<br>前者自适应缩放以保证所有内容窗口\n<br>范围内可见，后者则是指定某个图元\n<br>组件作为底板全屏填充，其他组件直\n<br>接或简接对于底板布局。\n<br>模式无（none）表示以上两种模式都\n<br>不是，既不缩放适配也不全屏铺满。\n<br>注意，本属性为读写，可以表示当前\n<br>页面的状态，也可以进行设置。其中\n<br>设置全屏填充时，自动选择最底层图\n<br>元组件作为底板。新建页面默认为基\n<br>于有底板的全屏填充布局，而非缩放。\n",
              "extraInfo": {
                "enum": {
                  "values": [
                    "fitContent",
                    "fullScreen",
                    "none"
                  ]
                }
              }
            },
            {
              "attr": "onDisplayLoaded",
              "valueType": "Function",
              "description": "所有内嵌页面逐层加载完毕后回调（注意，作为顶层页面时才会触发）。",
              "extraInfo": {
                "arguments": [
                  "data",
                  "gv",
                  "cache"
                ]
              }
            },
            {
              "attr": "initCallback",
              "valueType": "Function",
              "description": "页面文件加载初始化完毕后的回调，\n<br>注意，不包括渲染元素、内嵌页面\n<br>的加载（参见onDisplayLoaded）。\n<br>参数innerGv为内嵌页面的graphView。",
              "extraInfo": {
                "arguments": [
                  "data",
                  "innerGv"
                ]
              }
            },
            {
              "attr": "reset",
              "valueType": "Level2",
              "defaultValue": 0
            },
            {
              "attr": "isLoadingGet",
              "valueType": "Boolean",
              "description": "是否正在加载。\n<br>正常加载完成后，该属性为false，\n<br>加载未完成时为true。"
            },
            {
              "attr": "enableLoading",
              "valueType": "Boolean",
              "defaultValue": false,
              "description": "是否启动加载过渡动画。注意，勾选后，如果资源不存在，可能会导致卡死，过渡动画一直存在。"
            },
            {
              "attr": "shadowBorder",
              "valueType": "NumberArray",
              "defaultValue": [
                0,
                0,
                8
              ]
            },
            {
              "attr": "shadowColor",
              "valueType": "Color",
              "defaultValue": "rgba(55,125,255,0.50)"
            },
            {
              "attr": "shadowEnabled",
              "valueType": "Boolean",
              "defaultValue": true
            },
            {
              "attr": "contentMinWidth",
              "valueType": "PositiveNumber",
              "defaultValue": 0
            },
            {
              "attr": "autoFillMinWidth",
              "valueType": "Boolean",
              "defaultValue": true
            },
            {
              "attr": "bindControlsTag",
              "valueType": "StringArray",
              "group": "bindControls"
            },
            {
              "attr": "bindControlsAttr",
              "valueType": "StringArray"
            },
            {
              "attr": "bindControlsVal",
              "valueType": "ObjectArray",
              "description": "静态值。也用作数组索引、JSON对象解析提取值用途。\n<br>一、静态值用途：\n<br>对常规类型的属性赋值且没有反向关联属性值，传入为数值时，不\n<br>会作为数组的索引，而会当成常量值对外赋值。此外，存在特殊值：\n<br>~和undefined表示过滤、不触发；null为默认值，表示传递默认表\n<br>单数据。编辑状态下清空后保存与设置null等价。\n<br>二、数组索引用途\n<br>情况1：被操作的组件属性原先值是数组时（包括空数组），会将\n<br>待输出的值作为被操作数组指定索引的值来传入，而不是整体覆盖。\n<br>情况2：如果要被操作的组件属性原先值不是数组，而且待输出的\n<br>值为数组类型并且长度也在索引范围内，那么会按照索引取自身数\n<br>组指定元素再对外输出。（如果想要取待输出索引值，赋值给被操\n<br>纵属性的指定索引，那么需要中间组件属性连线过渡以下，无法直\n<br>接操作）\n<br>情况3：如果要被操作的组件属性是数组，而且待输出的值也是数组\n<br>类型，此时当情况1来处理。\n<br>三、数据解析用途：\n<br>待输出的值为JSON对象时，用x.y.z这种以字符.或者>为间隔的方式\n<br>实现对JSON字段层次逐层定位，当是数组时x.0.y.1这种以数字的方\n<br>式来指定数组的某个索引。以此实现对任意结果JSON对象字段的定\n<br>位，获取结构内指定字段对应的值。"
            },
            {
              "attr": "paramControlTag",
              "valueType": "StringArray"
            },
            {
              "attr": "paramControlAttr",
              "valueType": "StringArray"
            },
            {
              "attr": "paramsGenerator",
              "valueType": "Function",
              "defaultValue": "__ht__function(data, val, index, node, oldVal, form, type, inner) {//绑定组索引对应的函数处理，用来动态生成复杂的参数变量传入\r\nswitch(index){\r\n    case 0:\r\n        break;\r\n    case 1:\r\n        break;\r\n    case 2:\r\n        break;\r\n    default:\r\n        break;\r\n}\r\n\r\nreturn val;}",
              "extraInfo": {
                "arguments": [
                  "data",
                  "val",
                  "index",
                  "node",
                  "oldVal",
                  "form",
                  "type",
                  "inner"
                ]
              }
            },
            {
              "attr": "useAttrCORS",
              "valueType": "Boolean",
              "defaultValue": false,
              "description": "属性同源操作。\n                连线操作传递是否限定双方。比如有A/B/C/D/O五个组件，连线操作关系：\n                A→O、B→O、C→O、D→O，以及O→A、O→B、O→C、O→D，总结为\n                A、B、C、D分别与O有往返操作。\n                默认不勾选该属性时，A到D任何一个向O的连线操作，都不会影响到O自身\n                对A到D的下一步操作。勾选了该属性后，那么每次相邻的两次连线交互，\n                则会有同源选择性，比如A→O，下一步则O之会选择到A的操作即O→A。\n                同源操作通常用户多个组件共用一个配置弹窗的情况，比如上述A、B、C、D\n                相当于是四个同类型的组件，而O是公共的属性配置窗口，任何一个比如A点\n                击，可通过O弹窗显示属性，然后修改后将属性值回写到A，且并不会将值给\n                到其他几个组件，即便有连线在。\n                同源操作规则：当连线满足A/B→O.x，且有O.x→A/B时，即前一次组件A连线\n                操作O的x属性，那么，O对外触发且关联x属性值对外时，勾选了本属性同源\n                属性操作的前提下，将只会执行O.x→A，而忽略O.x→B/C等其他非A的图元组\n                件的连线操作。",
              "dynamicCreate": true
            },
            {
              "attr": "useInnerEventsAll",
              "valueType": "Boolean",
              "description": "是否放行内嵌页面的全部事件。\n<br>若勾选，内嵌图元表单类型的事件函数属性，都将派发到\n<br>上层容器图元对外触发连线操作。默认不勾选，上层容器\n<br>图元对外连线反向关联需要指定内嵌图元的具体事件函数\n<br>属性才能触发，否则忽略内嵌图元的事件触发，不会传递\n<br>给上层容器图元对外连线操作。"
            },
            {
              "attr": "onScrollEnded",
              "valueType": "Function",
              "extraInfo": {
                "arguments": [
                  "data",
                  "gv",
                  "cache",
                  "value",
                  "extra"
                ]
              }
            },
            {
              "attr": "userData",
              "valueType": "ObjectArray"
            },
            {
              "attr": "顶部>0>_base>s:shape.border.width",
              "name": ".shape.border.width",
              "valueType": "Number",
              "defaultValue": 0,
              "extraInfo": null,
              "group": "顶部>0>_base"
            },
            {
              "attr": "顶部>0>gv1>a:display",
              "name": ".display",
              "valueType": "URL",
              "defaultValue": "displays/develop/__favorites/widgets/嵌套容器/__封装/透明图片按钮_@autoBase2@1715965594247.json",
              "group": "顶部>0>gv1"
            },
            {
              "attr": "顶部>0>gv1>a:innerLayoutMode",
              "name": ".innerLayoutMode",
              "valueType": "String",
              "defaultValue": "fullScreen",
              "extraInfo": {
                "enum": {
                  "values": [
                    "fitContent",
                    "fullScreen",
                    "none"
                  ]
                }
              },
              "description": "内嵌页面的布局模式。\n<br>页面通常分为适配内容（fitContent）\n<br>和全屏填充（fullScreen）两种模式，\n<br>前者自适应缩放以保证所有内容窗口\n<br>范围内可见，后者则是指定某个图元\n<br>组件作为底板全屏填充，其他组件直\n<br>接或简接对于底板布局。\n<br>模式无（none）表示以上两种模式都\n<br>不是，既不缩放适配也不全屏铺满。\n<br>注意，本属性为读写，可以表示当前\n<br>页面的状态，也可以进行设置。其中\n<br>设置全屏填充时，自动选择最底层图\n<br>元组件作为底板。新建页面默认为基\n<br>于有底板的全屏填充布局，而非缩放。\n",
              "group": "顶部>0>gv1"
            },
            {
              "attr": "顶部>0>gv1>a:透明图片按钮_@autoBase2@1715965594247>0>func1>a:inputs",
              "name": "..inputs",
              "valueType": "Object",
              "defaultValue": "已点击顶部区域！",
              "description": "用于接收函数参数输入，可默认对象或数组形式，可以设置多个入参。\n<br>外部可以多条连线操作该属性，利用数组操作特性，在各自的连线操作\n<br>中bindControlsVal中设置对应的索引值，用来指定传入输入数组中指定\n<br>值，实现多参数传入。\n<br>\n注意，对于透明传递不做任何业务逻辑处理时，默认会将输入组的值直接输\n<br>出，默认以空（undefined）对外操作赋值，通常用于对外清空值。\n<br>此外，输入组长度为1时，将去掉数组后以元素本身值对外输出，比如\n<br>[1]、['hello']、[true]，['']会被当做1、'hello'、true、''输出。长度大于1的\n<br>输入组，对外输出则是正常的数组值。",
              "group": "顶部>0>gv1"
            }
          ],
          "snapshotURL": "symbols/develop/uiotos/arranged/controls/containers_icon/滚动页.json",
          "renderHTML": "__ht__function(data, gv, cache) {return __scrollAreaView_ui(data,gv,cache);}",
          "width": 819,
          "height": 600,
          "pixelPerfect": false,
          "comps": [],
          "uuid": "524B9A84-9A36-4C30-92C9-921D914A7B65"
        },
        "host": {
          "__i": 39352
        },
        "position": {
          "x": -276.97226,
          "y": -434.03701
        },
        "width": 708.24804,
        "height": 49.29233
      },
      "s": {
        "label.position": 14,
        "label.offset.y": 0,
        "label.color": "rgb(61,61,61)",
        "label.opacity": 0,
        "2d.movable": false,
        "interactive": true,
        "image.stretch": "uniform",
        "layout.h": "leftright",
        "layout.v": "top",
        "label.font": "26px arial, sans-serif",
        "label.align": "left",
        "label.offset.x": -10
      },
      "a": {
        "symbol": "symbols/develop/uiotos/base/scrollAreaView-ui.json",
        "display": "./02-宽高自适应_带点击提示/顶部.json",
        "__loadingStatus": false,
        "isLoadingGet": false,
        "contentMinWidth": 448.99973,
        "innerLayoutMode": "fullScreen",
        "paramControlTag": [],
        "paramControlAttr": [],
        "bindControlsTag": [],
        "bindControlsAttr": [],
        "bindControlsVal": [],
        "shadowEnabled": false,
        "顶部>0>_base>s:shape.border.width": 0,
        "顶部>0>gv1>a:display": "displays/develop/__favorites/widgets/嵌套容器/__封装/透明图片按钮_@autoBase2@1715965594247.json",
        "顶部>0>gv1>a:innerLayoutMode": "fullScreen",
        "顶部>0>gv1>a:透明图片按钮_@autoBase2@1715965594247>0>func1>a:inputs": "已点击顶部区域！"
      }
    },
    {
      "c": "ht.Node",
      "i": 39354,
      "p": {
        "name": "scroll",
        "displayName": "滚动页（滚动页2）",
        "toolTip": "<p style='color:rgb(242,83,75);margin-top:5px;margin-bottom:5px;font-weight:bold;line-height:1.5em;'>已被布局，不允许拖动（shift+回车可解除）</p>",
        "tag": "滚动页2",
        "dataBindings": {
          "a": {
            "display": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "autoFillMinWidth": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "onScrollEnded": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "userData": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "innerLayoutMode": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "左侧>0>_base>s:shape.border.width": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "左侧>0>gv1>a:display": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "左侧>0>gv1>a:innerLayoutMode": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "左侧>0>gv1>a:透明图片按钮_@autoBase2@1715965594247>0>func1>a:inputs": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            }
          }
        },
        "image": {
          "modified": "Fri May 17 2024 15:38:11 GMT+0800 (中国标准时间)",
          "dataBindings": [
            {
              "attr": "symbol",
              "valueType": "Image"
            },
            {
              "attr": "display",
              "valueType": "URL",
              "defaultValue": "",
              "group": "功能（关键）"
            },
            {
              "attr": "innerLayoutMode",
              "valueType": "String",
              "description": "内嵌页面的布局模式。\n<br>页面通常分为适配内容（fitContent）\n<br>和全屏填充（fullScreen）两种模式，\n<br>前者自适应缩放以保证所有内容窗口\n<br>范围内可见，后者则是指定某个图元\n<br>组件作为底板全屏填充，其他组件直\n<br>接或简接对于底板布局。\n<br>模式无（none）表示以上两种模式都\n<br>不是，既不缩放适配也不全屏铺满。\n<br>注意，本属性为读写，可以表示当前\n<br>页面的状态，也可以进行设置。其中\n<br>设置全屏填充时，自动选择最底层图\n<br>元组件作为底板。新建页面默认为基\n<br>于有底板的全屏填充布局，而非缩放。\n",
              "extraInfo": {
                "enum": {
                  "values": [
                    "fitContent",
                    "fullScreen",
                    "none"
                  ]
                }
              }
            },
            {
              "attr": "onDisplayLoaded",
              "valueType": "Function",
              "description": "所有内嵌页面逐层加载完毕后回调（注意，作为顶层页面时才会触发）。",
              "extraInfo": {
                "arguments": [
                  "data",
                  "gv",
                  "cache"
                ]
              }
            },
            {
              "attr": "initCallback",
              "valueType": "Function",
              "description": "页面文件加载初始化完毕后的回调，\n<br>注意，不包括渲染元素、内嵌页面\n<br>的加载（参见onDisplayLoaded）。\n<br>参数innerGv为内嵌页面的graphView。",
              "extraInfo": {
                "arguments": [
                  "data",
                  "innerGv"
                ]
              }
            },
            {
              "attr": "reset",
              "valueType": "Level2",
              "defaultValue": 0
            },
            {
              "attr": "isLoadingGet",
              "valueType": "Boolean",
              "description": "是否正在加载。\n<br>正常加载完成后，该属性为false，\n<br>加载未完成时为true。"
            },
            {
              "attr": "enableLoading",
              "valueType": "Boolean",
              "defaultValue": false,
              "description": "是否启动加载过渡动画。注意，勾选后，如果资源不存在，可能会导致卡死，过渡动画一直存在。"
            },
            {
              "attr": "shadowBorder",
              "valueType": "NumberArray",
              "defaultValue": [
                0,
                0,
                8
              ]
            },
            {
              "attr": "shadowColor",
              "valueType": "Color",
              "defaultValue": "rgba(55,125,255,0.50)"
            },
            {
              "attr": "shadowEnabled",
              "valueType": "Boolean",
              "defaultValue": true
            },
            {
              "attr": "contentMinWidth",
              "valueType": "PositiveNumber",
              "defaultValue": 0
            },
            {
              "attr": "autoFillMinWidth",
              "valueType": "Boolean",
              "defaultValue": true
            },
            {
              "attr": "bindControlsTag",
              "valueType": "StringArray",
              "group": "bindControls"
            },
            {
              "attr": "bindControlsAttr",
              "valueType": "StringArray"
            },
            {
              "attr": "bindControlsVal",
              "valueType": "ObjectArray",
              "description": "静态值。也用作数组索引、JSON对象解析提取值用途。\n<br>一、静态值用途：\n<br>对常规类型的属性赋值且没有反向关联属性值，传入为数值时，不\n<br>会作为数组的索引，而会当成常量值对外赋值。此外，存在特殊值：\n<br>~和undefined表示过滤、不触发；null为默认值，表示传递默认表\n<br>单数据。编辑状态下清空后保存与设置null等价。\n<br>二、数组索引用途\n<br>情况1：被操作的组件属性原先值是数组时（包括空数组），会将\n<br>待输出的值作为被操作数组指定索引的值来传入，而不是整体覆盖。\n<br>情况2：如果要被操作的组件属性原先值不是数组，而且待输出的\n<br>值为数组类型并且长度也在索引范围内，那么会按照索引取自身数\n<br>组指定元素再对外输出。（如果想要取待输出索引值，赋值给被操\n<br>纵属性的指定索引，那么需要中间组件属性连线过渡以下，无法直\n<br>接操作）\n<br>情况3：如果要被操作的组件属性是数组，而且待输出的值也是数组\n<br>类型，此时当情况1来处理。\n<br>三、数据解析用途：\n<br>待输出的值为JSON对象时，用x.y.z这种以字符.或者>为间隔的方式\n<br>实现对JSON字段层次逐层定位，当是数组时x.0.y.1这种以数字的方\n<br>式来指定数组的某个索引。以此实现对任意结果JSON对象字段的定\n<br>位，获取结构内指定字段对应的值。"
            },
            {
              "attr": "paramControlTag",
              "valueType": "StringArray"
            },
            {
              "attr": "paramControlAttr",
              "valueType": "StringArray"
            },
            {
              "attr": "paramsGenerator",
              "valueType": "Function",
              "defaultValue": "__ht__function(data, val, index, node, oldVal, form, type, inner) {//绑定组索引对应的函数处理，用来动态生成复杂的参数变量传入\r\nswitch(index){\r\n    case 0:\r\n        break;\r\n    case 1:\r\n        break;\r\n    case 2:\r\n        break;\r\n    default:\r\n        break;\r\n}\r\n\r\nreturn val;}",
              "extraInfo": {
                "arguments": [
                  "data",
                  "val",
                  "index",
                  "node",
                  "oldVal",
                  "form",
                  "type",
                  "inner"
                ]
              }
            },
            {
              "attr": "useAttrCORS",
              "valueType": "Boolean",
              "defaultValue": false,
              "description": "属性同源操作。\n                连线操作传递是否限定双方。比如有A/B/C/D/O五个组件，连线操作关系：\n                A→O、B→O、C→O、D→O，以及O→A、O→B、O→C、O→D，总结为\n                A、B、C、D分别与O有往返操作。\n                默认不勾选该属性时，A到D任何一个向O的连线操作，都不会影响到O自身\n                对A到D的下一步操作。勾选了该属性后，那么每次相邻的两次连线交互，\n                则会有同源选择性，比如A→O，下一步则O之会选择到A的操作即O→A。\n                同源操作通常用户多个组件共用一个配置弹窗的情况，比如上述A、B、C、D\n                相当于是四个同类型的组件，而O是公共的属性配置窗口，任何一个比如A点\n                击，可通过O弹窗显示属性，然后修改后将属性值回写到A，且并不会将值给\n                到其他几个组件，即便有连线在。\n                同源操作规则：当连线满足A/B→O.x，且有O.x→A/B时，即前一次组件A连线\n                操作O的x属性，那么，O对外触发且关联x属性值对外时，勾选了本属性同源\n                属性操作的前提下，将只会执行O.x→A，而忽略O.x→B/C等其他非A的图元组\n                件的连线操作。",
              "dynamicCreate": true
            },
            {
              "attr": "useInnerEventsAll",
              "valueType": "Boolean",
              "description": "是否放行内嵌页面的全部事件。\n<br>若勾选，内嵌图元表单类型的事件函数属性，都将派发到\n<br>上层容器图元对外触发连线操作。默认不勾选，上层容器\n<br>图元对外连线反向关联需要指定内嵌图元的具体事件函数\n<br>属性才能触发，否则忽略内嵌图元的事件触发，不会传递\n<br>给上层容器图元对外连线操作。"
            },
            {
              "attr": "onScrollEnded",
              "valueType": "Function",
              "extraInfo": {
                "arguments": [
                  "data",
                  "gv",
                  "cache",
                  "value",
                  "extra"
                ]
              }
            },
            {
              "attr": "userData",
              "valueType": "ObjectArray"
            },
            {
              "attr": "左侧>0>_base>s:shape.border.width",
              "name": ".shape.border.width",
              "valueType": "Number",
              "defaultValue": 0,
              "extraInfo": null,
              "group": "左侧>0>_base"
            },
            {
              "attr": "左侧>0>gv1>a:display",
              "name": ".display",
              "valueType": "URL",
              "defaultValue": "displays/develop/__favorites/widgets/嵌套容器/__封装/透明图片按钮_@autoBase2@1715965594247.json",
              "group": "左侧>0>gv1"
            },
            {
              "attr": "左侧>0>gv1>a:innerLayoutMode",
              "name": ".innerLayoutMode",
              "valueType": "String",
              "defaultValue": "fullScreen",
              "extraInfo": {
                "enum": {
                  "values": [
                    "fitContent",
                    "fullScreen",
                    "none"
                  ]
                }
              },
              "description": "内嵌页面的布局模式。\n<br>页面通常分为适配内容（fitContent）\n<br>和全屏填充（fullScreen）两种模式，\n<br>前者自适应缩放以保证所有内容窗口\n<br>范围内可见，后者则是指定某个图元\n<br>组件作为底板全屏填充，其他组件直\n<br>接或简接对于底板布局。\n<br>模式无（none）表示以上两种模式都\n<br>不是，既不缩放适配也不全屏铺满。\n<br>注意，本属性为读写，可以表示当前\n<br>页面的状态，也可以进行设置。其中\n<br>设置全屏填充时，自动选择最底层图\n<br>元组件作为底板。新建页面默认为基\n<br>于有底板的全屏填充布局，而非缩放。\n",
              "group": "左侧>0>gv1"
            },
            {
              "attr": "左侧>0>gv1>a:透明图片按钮_@autoBase2@1715965594247>0>func1>a:inputs",
              "name": "..inputs",
              "valueType": "Object",
              "defaultValue": "已点击左侧区域！",
              "description": "用于接收函数参数输入，可默认对象或数组形式，可以设置多个入参。\n<br>外部可以多条连线操作该属性，利用数组操作特性，在各自的连线操作\n<br>中bindControlsVal中设置对应的索引值，用来指定传入输入数组中指定\n<br>值，实现多参数传入。\n<br>\n注意，对于透明传递不做任何业务逻辑处理时，默认会将输入组的值直接输\n<br>出，默认以空（undefined）对外操作赋值，通常用于对外清空值。\n<br>此外，输入组长度为1时，将去掉数组后以元素本身值对外输出，比如\n<br>[1]、['hello']、[true]，['']会被当做1、'hello'、true、''输出。长度大于1的\n<br>输入组，对外输出则是正常的数组值。",
              "group": "左侧>0>gv1"
            }
          ],
          "snapshotURL": "symbols/develop/uiotos/arranged/controls/containers_icon/滚动页.json",
          "renderHTML": "__ht__function(data, gv, cache) {return __scrollAreaView_ui(data,gv,cache);}",
          "width": 819,
          "height": 600,
          "pixelPerfect": false,
          "comps": [],
          "uuid": "524B9A84-9A36-4C30-92C9-921D914A7B65"
        },
        "host": {
          "__i": 39352
        },
        "position": {
          "x": -717.25514,
          "y": -134.03701
        },
        "width": 172.31772,
        "height": 550.70766
      },
      "s": {
        "label.position": 14,
        "label.offset.x": -10,
        "label.offset.y": 0,
        "label.color": "rgb(61,61,61)",
        "label.opacity": 0,
        "2d.movable": false,
        "interactive": true,
        "image.stretch": "uniform",
        "attach.padding.left": 1,
        "attach.padding.right": 1,
        "layout.h": "left",
        "layout.v": "topbottom"
      },
      "a": {
        "symbol": "symbols/develop/uiotos/base/scrollAreaView-ui.json",
        "display": "./02-宽高自适应_带点击提示/左侧.json",
        "__loadingStatus": false,
        "isLoadingGet": false,
        "contentMinWidth": 59.86464,
        "innerLayoutMode": "fullScreen",
        "shadowEnabled": false,
        "origin_width": 336.44687,
        "origin_height": 568.60707,
        "左侧>0>_base>s:shape.border.width": 0,
        "左侧>0>gv1>a:display": "displays/develop/__favorites/widgets/嵌套容器/__封装/透明图片按钮_@autoBase2@1715965594247.json",
        "左侧>0>gv1>a:innerLayoutMode": "fullScreen",
        "左侧>0>gv1>a:透明图片按钮_@autoBase2@1715965594247>0>func1>a:inputs": "已点击左侧区域！"
      }
    },
    {
      "c": "ht.Node",
      "i": 39355,
      "p": {
        "name": "scroll",
        "displayName": "滚动页（滚动页3）",
        "toolTip": "<p style='color:rgb(242,83,75);margin-top:5px;margin-bottom:5px;font-weight:bold;line-height:1.5em;'>已被布局，不允许拖动（shift+回车可解除）</p>",
        "tag": "滚动页3",
        "dataBindings": {
          "a": {
            "display": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "autoFillMinWidth": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "onScrollEnded": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "userData": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "innerLayoutMode": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "主区域>0>_base>s:shape.border.width": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "主区域>0>_base>s:shape.border.color": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "主区域>0>_base>s:shape.background": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "主区域>0>txt1>a:value": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "主区域>0>txt1>a:instantTrigger": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "主区域>0>txt1>a:htmlContent": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "主区域>0>txt1>a:readOnly": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "主区域>0>txt1>a:onChange": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "主区域>0>txt1>a:display": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "主区域>0>txt1>a:popDirection": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "主区域>0>txt1>a:popBackground": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "主区域>0>txt1>a:popPadding": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "主区域>0>txt1>a:popWidth": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "主区域>0>txt1>a:popHeight": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "主区域>0>txt1>a:popBorderColor": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "主区域>0>txt1>a:popBorderWidth": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "主区域>0>txt1>a:popBorderRadius": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "主区域>0>txt1>a:popTriggerEvent": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "主区域>0>gv1>a:display": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "主区域>0>gv1>a:innerLayoutMode": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "主区域>0>gv1>a:透明图片按钮_@autoBase2@1715965594247>0>func1>a:inputs": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "主区域>0>gv1>a:透明图片按钮_@autoBase2@1715965594247>0>cbtn1>a:default-background": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            }
          }
        },
        "image": {
          "modified": "Fri May 17 2024 15:38:11 GMT+0800 (中国标准时间)",
          "dataBindings": [
            {
              "attr": "symbol",
              "valueType": "Image"
            },
            {
              "attr": "display",
              "valueType": "URL",
              "defaultValue": "",
              "group": "功能（关键）"
            },
            {
              "attr": "innerLayoutMode",
              "valueType": "String",
              "description": "内嵌页面的布局模式。\n<br>页面通常分为适配内容（fitContent）\n<br>和全屏填充（fullScreen）两种模式，\n<br>前者自适应缩放以保证所有内容窗口\n<br>范围内可见，后者则是指定某个图元\n<br>组件作为底板全屏填充，其他组件直\n<br>接或简接对于底板布局。\n<br>模式无（none）表示以上两种模式都\n<br>不是，既不缩放适配也不全屏铺满。\n<br>注意，本属性为读写，可以表示当前\n<br>页面的状态，也可以进行设置。其中\n<br>设置全屏填充时，自动选择最底层图\n<br>元组件作为底板。新建页面默认为基\n<br>于有底板的全屏填充布局，而非缩放。\n",
              "extraInfo": {
                "enum": {
                  "values": [
                    "fitContent",
                    "fullScreen",
                    "none"
                  ]
                }
              }
            },
            {
              "attr": "onDisplayLoaded",
              "valueType": "Function",
              "description": "所有内嵌页面逐层加载完毕后回调（注意，作为顶层页面时才会触发）。",
              "extraInfo": {
                "arguments": [
                  "data",
                  "gv",
                  "cache"
                ]
              }
            },
            {
              "attr": "initCallback",
              "valueType": "Function",
              "description": "页面文件加载初始化完毕后的回调，\n<br>注意，不包括渲染元素、内嵌页面\n<br>的加载（参见onDisplayLoaded）。\n<br>参数innerGv为内嵌页面的graphView。",
              "extraInfo": {
                "arguments": [
                  "data",
                  "innerGv"
                ]
              }
            },
            {
              "attr": "reset",
              "valueType": "Level2",
              "defaultValue": 0
            },
            {
              "attr": "isLoadingGet",
              "valueType": "Boolean",
              "description": "是否正在加载。\n<br>正常加载完成后，该属性为false，\n<br>加载未完成时为true。"
            },
            {
              "attr": "enableLoading",
              "valueType": "Boolean",
              "defaultValue": false,
              "description": "是否启动加载过渡动画。注意，勾选后，如果资源不存在，可能会导致卡死，过渡动画一直存在。"
            },
            {
              "attr": "shadowBorder",
              "valueType": "NumberArray",
              "defaultValue": [
                0,
                0,
                8
              ]
            },
            {
              "attr": "shadowColor",
              "valueType": "Color",
              "defaultValue": "rgba(55,125,255,0.50)"
            },
            {
              "attr": "shadowEnabled",
              "valueType": "Boolean",
              "defaultValue": true
            },
            {
              "attr": "contentMinWidth",
              "valueType": "PositiveNumber",
              "defaultValue": 0
            },
            {
              "attr": "autoFillMinWidth",
              "valueType": "Boolean",
              "defaultValue": true
            },
            {
              "attr": "bindControlsTag",
              "valueType": "StringArray",
              "group": "bindControls"
            },
            {
              "attr": "bindControlsAttr",
              "valueType": "StringArray"
            },
            {
              "attr": "bindControlsVal",
              "valueType": "ObjectArray",
              "description": "静态值。也用作数组索引、JSON对象解析提取值用途。\n<br>一、静态值用途：\n<br>对常规类型的属性赋值且没有反向关联属性值，传入为数值时，不\n<br>会作为数组的索引，而会当成常量值对外赋值。此外，存在特殊值：\n<br>~和undefined表示过滤、不触发；null为默认值，表示传递默认表\n<br>单数据。编辑状态下清空后保存与设置null等价。\n<br>二、数组索引用途\n<br>情况1：被操作的组件属性原先值是数组时（包括空数组），会将\n<br>待输出的值作为被操作数组指定索引的值来传入，而不是整体覆盖。\n<br>情况2：如果要被操作的组件属性原先值不是数组，而且待输出的\n<br>值为数组类型并且长度也在索引范围内，那么会按照索引取自身数\n<br>组指定元素再对外输出。（如果想要取待输出索引值，赋值给被操\n<br>纵属性的指定索引，那么需要中间组件属性连线过渡以下，无法直\n<br>接操作）\n<br>情况3：如果要被操作的组件属性是数组，而且待输出的值也是数组\n<br>类型，此时当情况1来处理。\n<br>三、数据解析用途：\n<br>待输出的值为JSON对象时，用x.y.z这种以字符.或者>为间隔的方式\n<br>实现对JSON字段层次逐层定位，当是数组时x.0.y.1这种以数字的方\n<br>式来指定数组的某个索引。以此实现对任意结果JSON对象字段的定\n<br>位，获取结构内指定字段对应的值。"
            },
            {
              "attr": "paramControlTag",
              "valueType": "StringArray"
            },
            {
              "attr": "paramControlAttr",
              "valueType": "StringArray"
            },
            {
              "attr": "paramsGenerator",
              "valueType": "Function",
              "defaultValue": "__ht__function(data, val, index, node, oldVal, form, type, inner) {//绑定组索引对应的函数处理，用来动态生成复杂的参数变量传入\r\nswitch(index){\r\n    case 0:\r\n        break;\r\n    case 1:\r\n        break;\r\n    case 2:\r\n        break;\r\n    default:\r\n        break;\r\n}\r\n\r\nreturn val;}",
              "extraInfo": {
                "arguments": [
                  "data",
                  "val",
                  "index",
                  "node",
                  "oldVal",
                  "form",
                  "type",
                  "inner"
                ]
              }
            },
            {
              "attr": "useAttrCORS",
              "valueType": "Boolean",
              "defaultValue": false,
              "description": "属性同源操作。\n                连线操作传递是否限定双方。比如有A/B/C/D/O五个组件，连线操作关系：\n                A→O、B→O、C→O、D→O，以及O→A、O→B、O→C、O→D，总结为\n                A、B、C、D分别与O有往返操作。\n                默认不勾选该属性时，A到D任何一个向O的连线操作，都不会影响到O自身\n                对A到D的下一步操作。勾选了该属性后，那么每次相邻的两次连线交互，\n                则会有同源选择性，比如A→O，下一步则O之会选择到A的操作即O→A。\n                同源操作通常用户多个组件共用一个配置弹窗的情况，比如上述A、B、C、D\n                相当于是四个同类型的组件，而O是公共的属性配置窗口，任何一个比如A点\n                击，可通过O弹窗显示属性，然后修改后将属性值回写到A，且并不会将值给\n                到其他几个组件，即便有连线在。\n                同源操作规则：当连线满足A/B→O.x，且有O.x→A/B时，即前一次组件A连线\n                操作O的x属性，那么，O对外触发且关联x属性值对外时，勾选了本属性同源\n                属性操作的前提下，将只会执行O.x→A，而忽略O.x→B/C等其他非A的图元组\n                件的连线操作。",
              "dynamicCreate": true
            },
            {
              "attr": "useInnerEventsAll",
              "valueType": "Boolean",
              "description": "是否放行内嵌页面的全部事件。\n<br>若勾选，内嵌图元表单类型的事件函数属性，都将派发到\n<br>上层容器图元对外触发连线操作。默认不勾选，上层容器\n<br>图元对外连线反向关联需要指定内嵌图元的具体事件函数\n<br>属性才能触发，否则忽略内嵌图元的事件触发，不会传递\n<br>给上层容器图元对外连线操作。"
            },
            {
              "attr": "onScrollEnded",
              "valueType": "Function",
              "extraInfo": {
                "arguments": [
                  "data",
                  "gv",
                  "cache",
                  "value",
                  "extra"
                ]
              }
            },
            {
              "attr": "userData",
              "valueType": "ObjectArray"
            },
            {
              "attr": "主区域>0>_base>s:shape.border.width",
              "name": ".shape.border.width",
              "valueType": "Number",
              "defaultValue": 0,
              "extraInfo": null,
              "group": "主区域>0>_base"
            },
            {
              "attr": "主区域>0>_base>s:shape.border.color",
              "name": ".shape.border.color",
              "valueType": "Color",
              "defaultValue": "rgb(55,125,255)",
              "extraInfo": null,
              "group": "主区域>0>_base"
            },
            {
              "attr": "主区域>0>_base>s:shape.background",
              "name": ".shape.background",
              "valueType": "Color",
              "defaultValue": "rgb(247,247,247)",
              "extraInfo": null,
              "group": "主区域>0>_base"
            },
            {
              "attr": "主区域>0>gv1>a:display",
              "name": ".display",
              "valueType": "URL",
              "defaultValue": "displays/develop/__favorites/widgets/嵌套容器/__封装/透明图片按钮_@autoBase2@1715965594247.json",
              "group": "主区域>0>gv1"
            },
            {
              "attr": "主区域>0>gv1>a:innerLayoutMode",
              "name": ".innerLayoutMode",
              "valueType": "String",
              "defaultValue": "fullScreen",
              "extraInfo": {
                "enum": {
                  "values": [
                    "fitContent",
                    "fullScreen",
                    "none"
                  ]
                }
              },
              "description": "内嵌页面的布局模式。\n<br>页面通常分为适配内容（fitContent）\n<br>和全屏填充（fullScreen）两种模式，\n<br>前者自适应缩放以保证所有内容窗口\n<br>范围内可见，后者则是指定某个图元\n<br>组件作为底板全屏填充，其他组件直\n<br>接或简接对于底板布局。\n<br>模式无（none）表示以上两种模式都\n<br>不是，既不缩放适配也不全屏铺满。\n<br>注意，本属性为读写，可以表示当前\n<br>页面的状态，也可以进行设置。其中\n<br>设置全屏填充时，自动选择最底层图\n<br>元组件作为底板。新建页面默认为基\n<br>于有底板的全屏填充布局，而非缩放。\n",
              "group": "主区域>0>gv1"
            },
            {
              "attr": "主区域>0>gv1>a:透明图片按钮_@autoBase2@1715965594247>0>func1>a:inputs",
              "name": "..inputs",
              "valueType": "Object",
              "defaultValue": "已点击内容区域！",
              "description": "用于接收函数参数输入，可默认对象或数组形式，可以设置多个入参。\n<br>外部可以多条连线操作该属性，利用数组操作特性，在各自的连线操作\n<br>中bindControlsVal中设置对应的索引值，用来指定传入输入数组中指定\n<br>值，实现多参数传入。\n<br>\n注意，对于透明传递不做任何业务逻辑处理时，默认会将输入组的值直接输\n<br>出，默认以空（undefined）对外操作赋值，通常用于对外清空值。\n<br>此外，输入组长度为1时，将去掉数组后以元素本身值对外输出，比如\n<br>[1]、['hello']、[true]，['']会被当做1、'hello'、true、''输出。长度大于1的\n<br>输入组，对外输出则是正常的数组值。",
              "group": "主区域>0>gv1"
            },
            {
              "attr": "主区域>0>gv1>a:透明图片按钮_@autoBase2@1715965594247>0>cbtn1>a:default-background",
              "name": "..default-background",
              "valueType": "Color",
              "defaultValue": "",
              "group": "主区域>0>gv1"
            },
            {
              "attr": "主区域>0>txt1>a:value",
              "name": ".value",
              "valueType": "Object",
              "defaultValue": "当浏览器窗口尺寸任意变化时：\n\n1）顶部高度固定，宽度自适应；\n\n2）左侧宽度固定，高度自适应；\n\n3）内容区宽高自适应。\n\n4）左上角和右上角宽高固定不变。\n\n注意：编辑状态下，双击各模块，可进入内嵌页设计。",
              "group": "主区域>0>txt1"
            },
            {
              "attr": "主区域>0>txt1>a:instantTrigger",
              "name": ".instantTrigger",
              "valueType": "Boolean",
              "defaultValue": true,
              "group": "主区域>0>txt1"
            },
            {
              "attr": "主区域>0>txt1>a:htmlContent",
              "name": ".htmlContent",
              "valueType": "Boolean",
              "defaultValue": false,
              "group": "主区域>0>txt1"
            },
            {
              "attr": "主区域>0>txt1>a:readOnly",
              "name": ".readOnly",
              "valueType": "Boolean",
              "defaultValue": true,
              "group": "主区域>0>txt1"
            },
            {
              "attr": "主区域>0>txt1>a:onChange",
              "name": ".onChange",
              "valueType": "Function",
              "extraInfo": {
                "arguments": [
                  "data",
                  "gv",
                  "cache",
                  "value",
                  "extra"
                ]
              },
              "group": "主区域>0>txt1"
            },
            {
              "attr": "主区域>0>txt1>a:display",
              "name": ".display",
              "valueType": "Image",
              "defaultValue": "",
              "description": "自定义页面地址。\n                可以是编辑器中的其他页面，也可以\n                是外部网页链接地址。",
              "group": "主区域>0>txt1"
            },
            {
              "attr": "主区域>0>txt1>a:popDirection",
              "name": ".popDirection",
              "valueType": "SideDirection",
              "defaultValue": "right",
              "description": "提示显示位置。",
              "group": "主区域>0>txt1"
            },
            {
              "attr": "主区域>0>txt1>a:popBackground",
              "name": ".popBackground",
              "valueType": "Color",
              "defaultValue": "white",
              "description": "箭头和背景色。",
              "group": "主区域>0>txt1"
            },
            {
              "attr": "主区域>0>txt1>a:popPadding",
              "name": ".popPadding",
              "valueType": "NumberArray",
              "defaultValue": [
                2,
                2,
                2,
                2
              ],
              "description": "内间距。",
              "group": "主区域>0>txt1"
            },
            {
              "attr": "主区域>0>txt1>a:popWidth",
              "name": ".popWidth",
              "valueType": "Number",
              "defaultValue": 400,
              "description": "弹出框宽度。",
              "group": "主区域>0>txt1"
            },
            {
              "attr": "主区域>0>txt1>a:popHeight",
              "name": ".popHeight",
              "valueType": "Number",
              "defaultValue": 300,
              "description": "弹出框高度。",
              "group": "主区域>0>txt1"
            },
            {
              "attr": "主区域>0>txt1>a:popBorderColor",
              "name": ".popBorderColor",
              "valueType": "Color",
              "defaultValue": "rgb(51,51,51)",
              "description": "边框线颜色。\n                    注意，是设置了边框宽度非0后的边框颜色。\n                    默认边框宽度属性为0时，实际上是白色并\n                    带有箭头指示的边框。本属性不用于修改默\n                    认边框色。",
              "group": "主区域>0>txt1"
            },
            {
              "attr": "主区域>0>txt1>a:popBorderWidth",
              "name": ".popBorderWidth",
              "valueType": "Number",
              "defaultValue": 0,
              "description": "边框线宽度。\n                    默认值为0，此时边框默认为白色并且带有\n                    箭头指示。当设置宽度后，颜色将取边框颜\n                    色属性的设置，并且不再有箭头指示。",
              "group": "主区域>0>txt1"
            },
            {
              "attr": "主区域>0>txt1>a:popBorderRadius",
              "name": ".popBorderRadius",
              "valueType": "Number",
              "defaultValue": 0,
              "description": "边框线圆角。\n                    设置圆角线后，如果此前默认是白色边框带有\n                    指示箭头，那么将自动不可见，只对内容区域\n                    产生圆角。",
              "group": "主区域>0>txt1"
            },
            {
              "attr": "主区域>0>txt1>a:popTriggerEvent",
              "name": ".popTriggerEvent",
              "valueType": "MouseEvent",
              "defaultValue": "hover",
              "description": "触发方式。\n                支持鼠标移入、点击（按钮时）\n                两种触发提示的方式。",
              "group": "主区域>0>txt1"
            }
          ],
          "snapshotURL": "symbols/develop/uiotos/arranged/controls/containers_icon/滚动页.json",
          "renderHTML": "__ht__function(data, gv, cache) {return __scrollAreaView_ui(data,gv,cache);}",
          "width": 819,
          "height": 600,
          "pixelPerfect": false,
          "comps": [],
          "uuid": "524B9A84-9A36-4C30-92C9-921D914A7B65"
        },
        "host": {
          "__i": 39352
        },
        "position": {
          "x": -204.75514,
          "y": -134.03701
        },
        "width": 852.68228,
        "height": 550.70766
      },
      "s": {
        "label.position": 14,
        "label.offset.x": -10,
        "label.offset.y": 0,
        "label.color": "rgb(61,61,61)",
        "label.opacity": 0,
        "2d.movable": false,
        "interactive": true,
        "image.stretch": "uniform",
        "attach.column.index": 1,
        "attach.padding.left": 1,
        "attach.padding.right": 1,
        "layout.h": "leftright",
        "layout.v": "topbottom"
      },
      "a": {
        "symbol": "symbols/develop/uiotos/base/scrollAreaView-ui.json",
        "display": "./02-宽高自适应_带点击提示/主区域.json",
        "__loadingStatus": false,
        "isLoadingGet": false,
        "contentMinWidth": 209.77915,
        "innerLayoutMode": "fullScreen",
        "shadowEnabled": false,
        "origin_width": 336.44687,
        "origin_height": 568.60707,
        "主区域>0>_base>s:shape.border.width": 0,
        "主区域>0>_base>s:shape.border.color": "rgb(55,125,255)",
        "主区域>0>_base>s:shape.background": "rgb(247,247,247)",
        "主区域>0>txt1>a:value": "当浏览器窗口尺寸任意变化时：\n\n1）顶部高度固定，宽度自适应；\n\n2）左侧宽度固定，高度自适应；\n\n3）内容区宽高自适应。\n\n4）左上角和右上角宽高固定不变。\n\n注意：编辑状态下，双击各模块，可进入内嵌页设计。",
        "主区域>0>txt1>a:instantTrigger": true,
        "主区域>0>txt1>a:htmlContent": false,
        "主区域>0>txt1>a:readOnly": true,
        "主区域>0>txt1>a:display": "",
        "主区域>0>txt1>a:popDirection": "right",
        "主区域>0>txt1>a:popBackground": "white",
        "主区域>0>txt1>a:popPadding": [
          2,
          2,
          2,
          2
        ],
        "主区域>0>txt1>a:popWidth": 400,
        "主区域>0>txt1>a:popHeight": 300,
        "主区域>0>txt1>a:popBorderColor": "rgb(51,51,51)",
        "主区域>0>txt1>a:popBorderWidth": 0,
        "主区域>0>txt1>a:popBorderRadius": 0,
        "主区域>0>txt1>a:popTriggerEvent": "hover",
        "主区域>0>gv1>a:display": "displays/develop/__favorites/widgets/嵌套容器/__封装/透明图片按钮_@autoBase2@1715965594247.json",
        "主区域>0>gv1>a:innerLayoutMode": "fullScreen",
        "主区域>0>gv1>a:透明图片按钮_@autoBase2@1715965594247>0>func1>a:inputs": "已点击内容区域！",
        "主区域>0>gv1>a:透明图片按钮_@autoBase2@1715965594247>0>cbtn1>a:default-background": ""
      }
    },
    {
      "c": "ht.Node",
      "i": 39356,
      "p": {
        "name": "scroll",
        "displayName": "滚动页（scroll4）",
        "toolTip": "<p style='color:rgb(242,83,75);margin-top:5px;margin-bottom:5px;font-weight:bold;line-height:1.5em;'>已被布局，不允许拖动（shift+回车可解除）</p>",
        "tag": "scroll4",
        "dataBindings": {
          "a": {
            "display": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "autoFillMinWidth": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "onScrollEnded": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "userData": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "innerLayoutMode": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "_bindEvents_0": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "左上角>0>_base>s:label": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "左上角>0>gv1>a:display": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "左上角>0>gv1>a:innerLayoutMode": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "左上角>0>gv1>a:透明图片按钮_@autoBase2@1715965594247>0>func1>a:inputs": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            }
          }
        },
        "image": {
          "modified": "Fri May 17 2024 15:38:11 GMT+0800 (中国标准时间)",
          "dataBindings": [
            {
              "attr": "symbol",
              "valueType": "Image"
            },
            {
              "attr": "display",
              "valueType": "URL",
              "defaultValue": "",
              "group": "功能（关键）"
            },
            {
              "attr": "innerLayoutMode",
              "valueType": "String",
              "description": "内嵌页面的布局模式。\n<br>页面通常分为适配内容（fitContent）\n<br>和全屏填充（fullScreen）两种模式，\n<br>前者自适应缩放以保证所有内容窗口\n<br>范围内可见，后者则是指定某个图元\n<br>组件作为底板全屏填充，其他组件直\n<br>接或简接对于底板布局。\n<br>模式无（none）表示以上两种模式都\n<br>不是，既不缩放适配也不全屏铺满。\n<br>注意，本属性为读写，可以表示当前\n<br>页面的状态，也可以进行设置。其中\n<br>设置全屏填充时，自动选择最底层图\n<br>元组件作为底板。新建页面默认为基\n<br>于有底板的全屏填充布局，而非缩放。\n",
              "extraInfo": {
                "enum": {
                  "values": [
                    "fitContent",
                    "fullScreen",
                    "none"
                  ]
                }
              }
            },
            {
              "attr": "onDisplayLoaded",
              "valueType": "Function",
              "description": "所有内嵌页面逐层加载完毕后回调（注意，作为顶层页面时才会触发）。",
              "extraInfo": {
                "arguments": [
                  "data",
                  "gv",
                  "cache"
                ]
              }
            },
            {
              "attr": "initCallback",
              "valueType": "Function",
              "description": "页面文件加载初始化完毕后的回调，\n<br>注意，不包括渲染元素、内嵌页面\n<br>的加载（参见onDisplayLoaded）。\n<br>参数innerGv为内嵌页面的graphView。",
              "extraInfo": {
                "arguments": [
                  "data",
                  "innerGv"
                ]
              }
            },
            {
              "attr": "reset",
              "valueType": "Level2",
              "defaultValue": 0
            },
            {
              "attr": "isLoadingGet",
              "valueType": "Boolean",
              "description": "是否正在加载。\n<br>正常加载完成后，该属性为false，\n<br>加载未完成时为true。"
            },
            {
              "attr": "enableLoading",
              "valueType": "Boolean",
              "defaultValue": false,
              "description": "是否启动加载过渡动画。注意，勾选后，如果资源不存在，可能会导致卡死，过渡动画一直存在。"
            },
            {
              "attr": "shadowBorder",
              "valueType": "NumberArray",
              "defaultValue": [
                0,
                0,
                8
              ]
            },
            {
              "attr": "shadowColor",
              "valueType": "Color",
              "defaultValue": "rgba(55,125,255,0.50)"
            },
            {
              "attr": "shadowEnabled",
              "valueType": "Boolean",
              "defaultValue": true
            },
            {
              "attr": "contentMinWidth",
              "valueType": "PositiveNumber",
              "defaultValue": 0
            },
            {
              "attr": "autoFillMinWidth",
              "valueType": "Boolean",
              "defaultValue": true
            },
            {
              "attr": "bindControlsTag",
              "valueType": "StringArray",
              "group": "bindControls"
            },
            {
              "attr": "bindControlsAttr",
              "valueType": "StringArray"
            },
            {
              "attr": "bindControlsVal",
              "valueType": "ObjectArray",
              "description": "静态值。也用作数组索引、JSON对象解析提取值用途。\n<br>一、静态值用途：\n<br>对常规类型的属性赋值且没有反向关联属性值，传入为数值时，不\n<br>会作为数组的索引，而会当成常量值对外赋值。此外，存在特殊值：\n<br>~和undefined表示过滤、不触发；null为默认值，表示传递默认表\n<br>单数据。编辑状态下清空后保存与设置null等价。\n<br>二、数组索引用途\n<br>情况1：被操作的组件属性原先值是数组时（包括空数组），会将\n<br>待输出的值作为被操作数组指定索引的值来传入，而不是整体覆盖。\n<br>情况2：如果要被操作的组件属性原先值不是数组，而且待输出的\n<br>值为数组类型并且长度也在索引范围内，那么会按照索引取自身数\n<br>组指定元素再对外输出。（如果想要取待输出索引值，赋值给被操\n<br>纵属性的指定索引，那么需要中间组件属性连线过渡以下，无法直\n<br>接操作）\n<br>情况3：如果要被操作的组件属性是数组，而且待输出的值也是数组\n<br>类型，此时当情况1来处理。\n<br>三、数据解析用途：\n<br>待输出的值为JSON对象时，用x.y.z这种以字符.或者>为间隔的方式\n<br>实现对JSON字段层次逐层定位，当是数组时x.0.y.1这种以数字的方\n<br>式来指定数组的某个索引。以此实现对任意结果JSON对象字段的定\n<br>位，获取结构内指定字段对应的值。"
            },
            {
              "attr": "paramControlTag",
              "valueType": "StringArray"
            },
            {
              "attr": "paramControlAttr",
              "valueType": "StringArray"
            },
            {
              "attr": "paramsGenerator",
              "valueType": "Function",
              "defaultValue": "__ht__function(data, val, index, node, oldVal, form, type, inner) {//绑定组索引对应的函数处理，用来动态生成复杂的参数变量传入\r\nswitch(index){\r\n    case 0:\r\n        break;\r\n    case 1:\r\n        break;\r\n    case 2:\r\n        break;\r\n    default:\r\n        break;\r\n}\r\n\r\nreturn val;}",
              "extraInfo": {
                "arguments": [
                  "data",
                  "val",
                  "index",
                  "node",
                  "oldVal",
                  "form",
                  "type",
                  "inner"
                ]
              }
            },
            {
              "attr": "useAttrCORS",
              "valueType": "Boolean",
              "defaultValue": false,
              "description": "属性同源操作。\n                连线操作传递是否限定双方。比如有A/B/C/D/O五个组件，连线操作关系：\n                A→O、B→O、C→O、D→O，以及O→A、O→B、O→C、O→D，总结为\n                A、B、C、D分别与O有往返操作。\n                默认不勾选该属性时，A到D任何一个向O的连线操作，都不会影响到O自身\n                对A到D的下一步操作。勾选了该属性后，那么每次相邻的两次连线交互，\n                则会有同源选择性，比如A→O，下一步则O之会选择到A的操作即O→A。\n                同源操作通常用户多个组件共用一个配置弹窗的情况，比如上述A、B、C、D\n                相当于是四个同类型的组件，而O是公共的属性配置窗口，任何一个比如A点\n                击，可通过O弹窗显示属性，然后修改后将属性值回写到A，且并不会将值给\n                到其他几个组件，即便有连线在。\n                同源操作规则：当连线满足A/B→O.x，且有O.x→A/B时，即前一次组件A连线\n                操作O的x属性，那么，O对外触发且关联x属性值对外时，勾选了本属性同源\n                属性操作的前提下，将只会执行O.x→A，而忽略O.x→B/C等其他非A的图元组\n                件的连线操作。",
              "dynamicCreate": true
            },
            {
              "attr": "useInnerEventsAll",
              "valueType": "Boolean",
              "description": "是否放行内嵌页面的全部事件。\n<br>若勾选，内嵌图元表单类型的事件函数属性，都将派发到\n<br>上层容器图元对外触发连线操作。默认不勾选，上层容器\n<br>图元对外连线反向关联需要指定内嵌图元的具体事件函数\n<br>属性才能触发，否则忽略内嵌图元的事件触发，不会传递\n<br>给上层容器图元对外连线操作。"
            },
            {
              "attr": "onScrollEnded",
              "valueType": "Function",
              "extraInfo": {
                "arguments": [
                  "data",
                  "gv",
                  "cache",
                  "value",
                  "extra"
                ]
              }
            },
            {
              "attr": "userData",
              "valueType": "ObjectArray"
            },
            {
              "attr": "左上角>0>_base>s:label",
              "name": ".label",
              "valueType": "String",
              "defaultValue": "LOGO区域",
              "extraInfo": null,
              "group": "左上角>0>_base"
            },
            {
              "attr": "左上角>0>gv1>a:display",
              "name": ".display",
              "valueType": "URL",
              "defaultValue": "displays/develop/__favorites/widgets/嵌套容器/__封装/透明图片按钮_@autoBase2@1715965594247.json",
              "group": "左上角>0>gv1"
            },
            {
              "attr": "左上角>0>gv1>a:innerLayoutMode",
              "name": ".innerLayoutMode",
              "valueType": "String",
              "defaultValue": "fullScreen",
              "extraInfo": {
                "enum": {
                  "values": [
                    "fitContent",
                    "fullScreen",
                    "none"
                  ]
                }
              },
              "description": "内嵌页面的布局模式。\n<br>页面通常分为适配内容（fitContent）\n<br>和全屏填充（fullScreen）两种模式，\n<br>前者自适应缩放以保证所有内容窗口\n<br>范围内可见，后者则是指定某个图元\n<br>组件作为底板全屏填充，其他组件直\n<br>接或简接对于底板布局。\n<br>模式无（none）表示以上两种模式都\n<br>不是，既不缩放适配也不全屏铺满。\n<br>注意，本属性为读写，可以表示当前\n<br>页面的状态，也可以进行设置。其中\n<br>设置全屏填充时，自动选择最底层图\n<br>元组件作为底板。新建页面默认为基\n<br>于有底板的全屏填充布局，而非缩放。\n",
              "group": "左上角>0>gv1"
            },
            {
              "attr": "左上角>0>gv1>a:透明图片按钮_@autoBase2@1715965594247>0>func1>a:inputs",
              "name": "..inputs",
              "valueType": "Object",
              "defaultValue": "已点击LOGO区域！",
              "description": "用于接收函数参数输入，可默认对象或数组形式，可以设置多个入参。\n<br>外部可以多条连线操作该属性，利用数组操作特性，在各自的连线操作\n<br>中bindControlsVal中设置对应的索引值，用来指定传入输入数组中指定\n<br>值，实现多参数传入。\n<br>\n注意，对于透明传递不做任何业务逻辑处理时，默认会将输入组的值直接输\n<br>出，默认以空（undefined）对外操作赋值，通常用于对外清空值。\n<br>此外，输入组长度为1时，将去掉数组后以元素本身值对外输出，比如\n<br>[1]、['hello']、[true]，['']会被当做1、'hello'、true、''输出。长度大于1的\n<br>输入组，对外输出则是正常的数组值。",
              "group": "左上角>0>gv1"
            }
          ],
          "snapshotURL": "symbols/develop/uiotos/arranged/controls/containers_icon/滚动页.json",
          "renderHTML": "__ht__function(data, gv, cache) {return __scrollAreaView_ui(data,gv,cache);}",
          "width": 819,
          "height": 600,
          "pixelPerfect": false,
          "comps": [],
          "uuid": "524B9A84-9A36-4C30-92C9-921D914A7B65"
        },
        "host": {
          "__i": 39352
        },
        "position": {
          "x": -717.25514,
          "y": -434.03701
        },
        "width": 172.31772,
        "height": 49.29233
      },
      "s": {
        "label.position": 14,
        "label.offset.y": 0,
        "label.color": "rgb(61,61,61)",
        "label.opacity": 0,
        "2d.movable": false,
        "interactive": true,
        "image.stretch": "uniform",
        "label.font": "26px arial, sans-serif",
        "label.align": "left",
        "label.offset.x": -10,
        "layout.h": "left",
        "layout.v": "top"
      },
      "a": {
        "symbol": "symbols/develop/uiotos/base/scrollAreaView-ui.json",
        "display": "./02-宽高自适应_带点击提示/左上角.json",
        "__loadingStatus": false,
        "isLoadingGet": false,
        "contentMinWidth": 107.92999,
        "innerLayoutMode": "fullScreen",
        "paramControlTag": [],
        "paramControlAttr": [],
        "bindControlsTag": [],
        "bindControlsAttr": [],
        "bindControlsVal": [],
        "shadowEnabled": false,
        "左上角>0>_base>s:label": "LOGO区域",
        "左上角>0>gv1>a:display": "displays/develop/__favorites/widgets/嵌套容器/__封装/透明图片按钮_@autoBase2@1715965594247.json",
        "左上角>0>gv1>a:innerLayoutMode": "fullScreen",
        "左上角>0>gv1>a:透明图片按钮_@autoBase2@1715965594247>0>func1>a:inputs": "已点击LOGO区域！"
      }
    },
    {
      "c": "ht.Node",
      "i": 39357,
      "p": {
        "name": "scroll",
        "displayName": "滚动页（scroll5）",
        "toolTip": "<p style='color:rgb(242,83,75);margin-top:5px;margin-bottom:5px;font-weight:bold;line-height:1.5em;'>已被布局，不允许拖动（shift+回车可解除）</p>",
        "tag": "scroll5",
        "dataBindings": {
          "a": {
            "display": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "autoFillMinWidth": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "onScrollEnded": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "userData": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "innerLayoutMode": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "_bindEvents_0": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "右上角>0>gv1>a:display": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "右上角>0>gv1>a:innerLayoutMode": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "右上角>0>gv1>a:透明图片按钮_@autoBase2@1715965594247>0>func1>a:inputs": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            }
          }
        },
        "image": {
          "modified": "Fri May 17 2024 15:38:11 GMT+0800 (中国标准时间)",
          "dataBindings": [
            {
              "attr": "symbol",
              "valueType": "Image"
            },
            {
              "attr": "display",
              "valueType": "URL",
              "defaultValue": "",
              "group": "功能（关键）"
            },
            {
              "attr": "innerLayoutMode",
              "valueType": "String",
              "description": "内嵌页面的布局模式。\n<br>页面通常分为适配内容（fitContent）\n<br>和全屏填充（fullScreen）两种模式，\n<br>前者自适应缩放以保证所有内容窗口\n<br>范围内可见，后者则是指定某个图元\n<br>组件作为底板全屏填充，其他组件直\n<br>接或简接对于底板布局。\n<br>模式无（none）表示以上两种模式都\n<br>不是，既不缩放适配也不全屏铺满。\n<br>注意，本属性为读写，可以表示当前\n<br>页面的状态，也可以进行设置。其中\n<br>设置全屏填充时，自动选择最底层图\n<br>元组件作为底板。新建页面默认为基\n<br>于有底板的全屏填充布局，而非缩放。\n",
              "extraInfo": {
                "enum": {
                  "values": [
                    "fitContent",
                    "fullScreen",
                    "none"
                  ]
                }
              }
            },
            {
              "attr": "onDisplayLoaded",
              "valueType": "Function",
              "description": "所有内嵌页面逐层加载完毕后回调（注意，作为顶层页面时才会触发）。",
              "extraInfo": {
                "arguments": [
                  "data",
                  "gv",
                  "cache"
                ]
              }
            },
            {
              "attr": "initCallback",
              "valueType": "Function",
              "description": "页面文件加载初始化完毕后的回调，\n<br>注意，不包括渲染元素、内嵌页面\n<br>的加载（参见onDisplayLoaded）。\n<br>参数innerGv为内嵌页面的graphView。",
              "extraInfo": {
                "arguments": [
                  "data",
                  "innerGv"
                ]
              }
            },
            {
              "attr": "reset",
              "valueType": "Level2",
              "defaultValue": 0
            },
            {
              "attr": "isLoadingGet",
              "valueType": "Boolean",
              "description": "是否正在加载。\n<br>正常加载完成后，该属性为false，\n<br>加载未完成时为true。"
            },
            {
              "attr": "enableLoading",
              "valueType": "Boolean",
              "defaultValue": false,
              "description": "是否启动加载过渡动画。注意，勾选后，如果资源不存在，可能会导致卡死，过渡动画一直存在。"
            },
            {
              "attr": "shadowBorder",
              "valueType": "NumberArray",
              "defaultValue": [
                0,
                0,
                8
              ]
            },
            {
              "attr": "shadowColor",
              "valueType": "Color",
              "defaultValue": "rgba(55,125,255,0.50)"
            },
            {
              "attr": "shadowEnabled",
              "valueType": "Boolean",
              "defaultValue": true
            },
            {
              "attr": "contentMinWidth",
              "valueType": "PositiveNumber",
              "defaultValue": 0
            },
            {
              "attr": "autoFillMinWidth",
              "valueType": "Boolean",
              "defaultValue": true
            },
            {
              "attr": "bindControlsTag",
              "valueType": "StringArray",
              "group": "bindControls"
            },
            {
              "attr": "bindControlsAttr",
              "valueType": "StringArray"
            },
            {
              "attr": "bindControlsVal",
              "valueType": "ObjectArray",
              "description": "静态值。也用作数组索引、JSON对象解析提取值用途。\n<br>一、静态值用途：\n<br>对常规类型的属性赋值且没有反向关联属性值，传入为数值时，不\n<br>会作为数组的索引，而会当成常量值对外赋值。此外，存在特殊值：\n<br>~和undefined表示过滤、不触发；null为默认值，表示传递默认表\n<br>单数据。编辑状态下清空后保存与设置null等价。\n<br>二、数组索引用途\n<br>情况1：被操作的组件属性原先值是数组时（包括空数组），会将\n<br>待输出的值作为被操作数组指定索引的值来传入，而不是整体覆盖。\n<br>情况2：如果要被操作的组件属性原先值不是数组，而且待输出的\n<br>值为数组类型并且长度也在索引范围内，那么会按照索引取自身数\n<br>组指定元素再对外输出。（如果想要取待输出索引值，赋值给被操\n<br>纵属性的指定索引，那么需要中间组件属性连线过渡以下，无法直\n<br>接操作）\n<br>情况3：如果要被操作的组件属性是数组，而且待输出的值也是数组\n<br>类型，此时当情况1来处理。\n<br>三、数据解析用途：\n<br>待输出的值为JSON对象时，用x.y.z这种以字符.或者>为间隔的方式\n<br>实现对JSON字段层次逐层定位，当是数组时x.0.y.1这种以数字的方\n<br>式来指定数组的某个索引。以此实现对任意结果JSON对象字段的定\n<br>位，获取结构内指定字段对应的值。"
            },
            {
              "attr": "paramControlTag",
              "valueType": "StringArray"
            },
            {
              "attr": "paramControlAttr",
              "valueType": "StringArray"
            },
            {
              "attr": "paramsGenerator",
              "valueType": "Function",
              "defaultValue": "__ht__function(data, val, index, node, oldVal, form, type, inner) {//绑定组索引对应的函数处理，用来动态生成复杂的参数变量传入\r\nswitch(index){\r\n    case 0:\r\n        break;\r\n    case 1:\r\n        break;\r\n    case 2:\r\n        break;\r\n    default:\r\n        break;\r\n}\r\n\r\nreturn val;}",
              "extraInfo": {
                "arguments": [
                  "data",
                  "val",
                  "index",
                  "node",
                  "oldVal",
                  "form",
                  "type",
                  "inner"
                ]
              }
            },
            {
              "attr": "useAttrCORS",
              "valueType": "Boolean",
              "defaultValue": false,
              "description": "属性同源操作。\n                连线操作传递是否限定双方。比如有A/B/C/D/O五个组件，连线操作关系：\n                A→O、B→O、C→O、D→O，以及O→A、O→B、O→C、O→D，总结为\n                A、B、C、D分别与O有往返操作。\n                默认不勾选该属性时，A到D任何一个向O的连线操作，都不会影响到O自身\n                对A到D的下一步操作。勾选了该属性后，那么每次相邻的两次连线交互，\n                则会有同源选择性，比如A→O，下一步则O之会选择到A的操作即O→A。\n                同源操作通常用户多个组件共用一个配置弹窗的情况，比如上述A、B、C、D\n                相当于是四个同类型的组件，而O是公共的属性配置窗口，任何一个比如A点\n                击，可通过O弹窗显示属性，然后修改后将属性值回写到A，且并不会将值给\n                到其他几个组件，即便有连线在。\n                同源操作规则：当连线满足A/B→O.x，且有O.x→A/B时，即前一次组件A连线\n                操作O的x属性，那么，O对外触发且关联x属性值对外时，勾选了本属性同源\n                属性操作的前提下，将只会执行O.x→A，而忽略O.x→B/C等其他非A的图元组\n                件的连线操作。",
              "dynamicCreate": true
            },
            {
              "attr": "useInnerEventsAll",
              "valueType": "Boolean",
              "description": "是否放行内嵌页面的全部事件。\n<br>若勾选，内嵌图元表单类型的事件函数属性，都将派发到\n<br>上层容器图元对外触发连线操作。默认不勾选，上层容器\n<br>图元对外连线反向关联需要指定内嵌图元的具体事件函数\n<br>属性才能触发，否则忽略内嵌图元的事件触发，不会传递\n<br>给上层容器图元对外连线操作。"
            },
            {
              "attr": "onScrollEnded",
              "valueType": "Function",
              "extraInfo": {
                "arguments": [
                  "data",
                  "gv",
                  "cache",
                  "value",
                  "extra"
                ]
              }
            },
            {
              "attr": "userData",
              "valueType": "ObjectArray"
            },
            {
              "attr": "右上角>0>gv1>a:display",
              "name": ".display",
              "valueType": "URL",
              "defaultValue": "displays/develop/__favorites/widgets/嵌套容器/__封装/透明图片按钮_@autoBase2@1715965594247.json",
              "group": "右上角>0>gv1"
            },
            {
              "attr": "右上角>0>gv1>a:innerLayoutMode",
              "name": ".innerLayoutMode",
              "valueType": "String",
              "defaultValue": "fullScreen",
              "extraInfo": {
                "enum": {
                  "values": [
                    "fitContent",
                    "fullScreen",
                    "none"
                  ]
                }
              },
              "description": "内嵌页面的布局模式。\n<br>页面通常分为适配内容（fitContent）\n<br>和全屏填充（fullScreen）两种模式，\n<br>前者自适应缩放以保证所有内容窗口\n<br>范围内可见，后者则是指定某个图元\n<br>组件作为底板全屏填充，其他组件直\n<br>接或简接对于底板布局。\n<br>模式无（none）表示以上两种模式都\n<br>不是，既不缩放适配也不全屏铺满。\n<br>注意，本属性为读写，可以表示当前\n<br>页面的状态，也可以进行设置。其中\n<br>设置全屏填充时，自动选择最底层图\n<br>元组件作为底板。新建页面默认为基\n<br>于有底板的全屏填充布局，而非缩放。\n",
              "group": "右上角>0>gv1"
            },
            {
              "attr": "右上角>0>gv1>a:透明图片按钮_@autoBase2@1715965594247>0>func1>a:inputs",
              "name": "..inputs",
              "valueType": "Object",
              "defaultValue": "已点击账户区域！",
              "description": "用于接收函数参数输入，可默认对象或数组形式，可以设置多个入参。\n<br>外部可以多条连线操作该属性，利用数组操作特性，在各自的连线操作\n<br>中bindControlsVal中设置对应的索引值，用来指定传入输入数组中指定\n<br>值，实现多参数传入。\n<br>\n注意，对于透明传递不做任何业务逻辑处理时，默认会将输入组的值直接输\n<br>出，默认以空（undefined）对外操作赋值，通常用于对外清空值。\n<br>此外，输入组长度为1时，将去掉数组后以元素本身值对外输出，比如\n<br>[1]、['hello']、[true]，['']会被当做1、'hello'、true、''输出。长度大于1的\n<br>输入组，对外输出则是正常的数组值。",
              "group": "右上角>0>gv1"
            }
          ],
          "snapshotURL": "symbols/develop/uiotos/arranged/controls/containers_icon/滚动页.json",
          "renderHTML": "__ht__function(data, gv, cache) {return __scrollAreaView_ui(data,gv,cache);}",
          "width": 819,
          "height": 600,
          "pixelPerfect": false,
          "comps": [],
          "uuid": "524B9A84-9A36-4C30-92C9-921D914A7B65"
        },
        "host": {
          "__i": 39352
        },
        "position": {
          "x": 149.36888,
          "y": -434.03701
        },
        "width": 144.43424,
        "height": 49.29233
      },
      "s": {
        "label.position": 14,
        "label.offset.y": 0,
        "label.color": "rgb(61,61,61)",
        "label.opacity": 0,
        "2d.movable": false,
        "interactive": true,
        "image.stretch": "uniform",
        "label.font": "26px arial, sans-serif",
        "label.align": "left",
        "label.offset.x": -10,
        "layout.h": "right",
        "layout.v": "top"
      },
      "a": {
        "symbol": "symbols/develop/uiotos/base/scrollAreaView-ui.json",
        "display": "./02-宽高自适应_带点击提示/右上角.json",
        "__loadingStatus": false,
        "isLoadingGet": false,
        "contentMinWidth": 102.01671,
        "innerLayoutMode": "fullScreen",
        "paramControlTag": [],
        "paramControlAttr": [],
        "bindControlsTag": [],
        "bindControlsAttr": [],
        "bindControlsVal": [],
        "shadowEnabled": false,
        "右上角>0>gv1>a:display": "displays/develop/__favorites/widgets/嵌套容器/__封装/透明图片按钮_@autoBase2@1715965594247.json",
        "右上角>0>gv1>a:innerLayoutMode": "fullScreen",
        "右上角>0>gv1>a:透明图片按钮_@autoBase2@1715965594247>0>func1>a:inputs": "已点击账户区域！"
      }
    }
  ],
  "modified": "Sun Jun 02 2024 20:28:10 GMT+0800 (中国标准时间)",
  "contentRect": {
    "x": -878.0849,
    "y": -458.68318,
    "width": 1099.6709,
    "height": 600
  }
}
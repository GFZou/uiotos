{
  "v": "8.0.1",
  "p": {
    "autoAdjustIndex": true,
    "hierarchicalRendering": true
  },
  "a": {
    "rotateAsClock": false,
    "gridBlockSize": 20,
    "connectActionType": null,
    "fitContent": false,
    "zoomable": false,
    "rectSelectable": false,
    "pannable": false,
    "_professional": false
  },
  "d": [
    {
      "c": "ht.Node",
      "i": 182595,
      "p": {
        "name": "doc",
        "displayName": "文档编辑器（doc1）",
        "toolTip": "<p style='color:rgb(242,83,75);margin-top:5px;margin-bottom:5px;font-weight:bold;line-height:1.5em;'>已被布局，不允许拖动（shift+回车可解除）</p>",
        "tag": "doc1",
        "dataBindings": {
          "a": {
            "content": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "readOnly": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "onChange": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "preview": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "display": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popDirection": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popBackground": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popPadding": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popWidth": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popHeight": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popBorderColor": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popBorderWidth": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popBorderRadius": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popTriggerEvent": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "userData": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            }
          }
        },
        "image": {
          "modified": "Tue May 21 2024 09:15:50 GMT+0800 (中国标准时间)",
          "dataBindings": [
            {
              "attr": "symbol",
              "valueType": "Image",
              "name": "symbol"
            },
            {
              "attr": "content",
              "valueType": "Multiline",
              "group": "功能（关键）",
              "name": "content"
            },
            {
              "attr": "readOnly",
              "valueType": "Boolean",
              "defaultValue": false,
              "description": "整体不可被编辑，可同时包括markdown和预览的html",
              "name": "readOnly"
            },
            {
              "attr": "preview",
              "valueType": "Boolean",
              "defaultValue": false,
              "description": "切换开关，预览时只显示html内容（不可被编辑）",
              "name": "preview"
            },
            {
              "attr": "watch",
              "valueType": "Boolean",
              "defaultValue": true,
              "name": "watch"
            },
            {
              "attr": "darkMode",
              "valueType": "Boolean",
              "defaultValue": false,
              "description": "预览主题深色模式。\n<br>默认浅色，勾选后为深色模式。",
              "name": "darkMode"
            },
            {
              "attr": "hideToolbar",
              "valueType": "Boolean",
              "name": "hideToolbar"
            },
            {
              "attr": "activeBorderColor",
              "valueType": "Color",
              "defaultValue": "rgb(51,153,255)",
              "name": "activeBorderColor"
            },
            {
              "attr": "background",
              "valueType": "Color",
              "defaultValue": "rgb(255,255,255)",
              "name": "background"
            },
            {
              "attr": "activeReadOnlyBackground",
              "valueType": "Color",
              "name": "activeReadOnlyBackground"
            },
            {
              "attr": "hoverReadOnlyBackground",
              "valueType": "Color",
              "name": "hoverReadOnlyBackground"
            },
            {
              "attr": "hoverIcon",
              "valueType": "Color",
              "name": "hoverIcon"
            },
            {
              "attr": "color",
              "valueType": "Color",
              "name": "color"
            },
            {
              "attr": "borderRadius",
              "valueType": "Number",
              "defaultValue": 3,
              "name": "borderRadius"
            },
            {
              "attr": "borderWidth",
              "valueType": "Number",
              "defaultValue": 1,
              "name": "borderWidth"
            },
            {
              "attr": "borderColor",
              "valueType": "Color",
              "defaultValue": "rgb(213,213,213)",
              "name": "borderColor"
            },
            {
              "attr": "font",
              "valueType": "Font",
              "name": "font"
            },
            {
              "attr": "readOnly",
              "valueType": "Boolean",
              "name": "readOnly"
            },
            {
              "attr": "placeholder",
              "valueType": "String",
              "defaultValue": "请输入",
              "name": "placeholder"
            },
            {
              "attr": "labelColor",
              "valueType": "Color",
              "defaultValue": "rgb(0,0,0)",
              "name": "labelColor"
            },
            {
              "attr": "labelText",
              "valueType": "String",
              "defaultValue": "标签",
              "name": "labelText"
            },
            {
              "attr": "gap",
              "valueType": "PositiveNumber",
              "defaultValue": 10,
              "name": "gap"
            },
            {
              "attr": "layoutVertical",
              "valueType": "Boolean",
              "defaultValue": false,
              "name": "layoutVertical"
            },
            {
              "attr": "labelEmbeded",
              "valueType": "Boolean",
              "name": "labelEmbeded"
            },
            {
              "attr": "bindControlsTag",
              "valueType": "StringArray",
              "group": "bindControls",
              "name": "bindControlsTag"
            },
            {
              "attr": "bindControlsAttr",
              "valueType": "StringArray",
              "name": "bindControlsAttr"
            },
            {
              "attr": "bindControlsVal",
              "valueType": "StringArray",
              "name": "bindControlsVal"
            },
            {
              "attr": "paramControlTag",
              "valueType": "StringArray",
              "name": "paramControlTag"
            },
            {
              "attr": "paramControlAttr",
              "valueType": "StringArray",
              "name": "paramControlAttr"
            },
            {
              "attr": "paramsGenerator",
              "valueType": "Function",
              "defaultValue": "__ht__function(data, val, index, node,oldVal,form,type,inner) {//绑定组索引对应的函数处理，用来动态生成复杂的参数变量传入\r\nswitch(index){\r\n    case 0:\r\n        break;\r\n    case 1:\r\n        break;\r\n    case 2:\r\n        break;\r\n    default:\r\n        break;\r\n}\r\n\r\nreturn val;}",
              "extraInfo": {
                "arguments": [
                  "data",
                  "val",
                  "index",
                  "node",
                  "oldVal",
                  "form",
                  "type",
                  "inner"
                ]
              },
              "name": "paramsGenerator"
            },
            {
              "attr": "useAttrCORS",
              "valueType": "Boolean",
              "extraInfo": "*",
              "defaultValue": false,
              "description": "连线操作和处理回写是否一致。\n                        比如多个文本框连线传值给相同对话框，弹窗修改\n                        后是否限定只能写到最新赋值过来的文本框。详见<a href='https://www.yuque.com/liuhuo-nc809/uiotos/fgi6dd7gado51acm#fFUbp' style=\"color:rgb(96,172,252)\"target=\"_blank\">同源属性操作</a>",
              "bindIgnored": true,
              "name": "useAttrCORS",
              "dynamicCreate": true
            },
            {
              "attr": "userData",
              "valueType": "ObjectArray",
              "name": "userData"
            },
            {
              "attr": "display",
              "name": "display",
              "valueType": "Image",
              "defaultValue": "",
              "description": "自定义页面地址。\n                可以是编辑器中的其他页面，也可以\n                是外部网页链接地址。",
              "group": "弹出框",
              "dynamicCreate": true
            },
            {
              "attr": "popDirection",
              "name": "popDirection",
              "valueType": "SideDirection",
              "defaultValue": "right",
              "description": "提示显示位置。",
              "dynamicCreate": true
            },
            {
              "attr": "popBackground",
              "name": "popBackground",
              "valueType": "Color",
              "defaultValue": "white",
              "description": "箭头和背景色。",
              "dynamicCreate": true
            },
            {
              "attr": "popPadding",
              "name": "padding",
              "valueType": "NumberArray",
              "defaultValue": [
                2,
                2,
                2,
                2
              ],
              "description": "内间距。",
              "dynamicCreate": true
            },
            {
              "attr": "popWidth",
              "name": "popWidth",
              "valueType": "Number",
              "defaultValue": 400,
              "description": "弹出框宽度。",
              "dynamicCreate": true
            },
            {
              "attr": "popHeight",
              "name": "popHeight",
              "valueType": "Number",
              "defaultValue": 300,
              "description": "弹出框高度。",
              "dynamicCreate": true
            },
            {
              "attr": "popBorderColor",
              "name": "popBorderColor",
              "valueType": "Color",
              "defaultValue": "rgb(51,51,51)",
              "description": "边框线颜色。\n                    注意，是设置了边框宽度非0后的边框颜色。\n                    默认边框宽度属性为0时，实际上是白色并\n                    带有箭头指示的边框。本属性不用于修改默\n                    认边框色。",
              "dynamicCreate": true
            },
            {
              "attr": "popBorderWidth",
              "name": "popBorderWidth",
              "valueType": "Number",
              "defaultValue": 0,
              "description": "边框线宽度。\n                    默认值为0，此时边框默认为白色并且带有\n                    箭头指示。当设置宽度后，颜色将取边框颜\n                    色属性的设置，并且不再有箭头指示。",
              "dynamicCreate": true
            },
            {
              "attr": "popBorderRadius",
              "name": "popBorderRadius",
              "valueType": "Number",
              "defaultValue": 0,
              "description": "边框线圆角。\n                    设置圆角线后，如果此前默认是白色边框带有\n                    指示箭头，那么将自动不可见，只对内容区域\n                    产生圆角。",
              "dynamicCreate": true
            },
            {
              "attr": "popTriggerEvent",
              "name": "popTriggerEvent",
              "valueType": "MouseEvent",
              "defaultValue": "hover",
              "description": "触发方式。\n                支持鼠标移入、点击（按钮时）\n                两种触发提示的方式。",
              "dynamicCreate": true
            },
            {
              "attr": "onChange",
              "valueType": "Function",
              "extraInfo": {
                "arguments": [
                  "data",
                  "gv",
                  "cache",
                  "value",
                  "extra"
                ]
              },
              "name": "onChange"
            }
          ],
          "snapshotURL": "symbols/develop/uiotos/arranged/controls/forms_icon/文档编辑器.json",
          "renderHTML": "__ht__function(data, gv, cache) {return __doc(data,gv,cache);}",
          "width": 1024,
          "height": 600,
          "interactive": true,
          "pixelPerfect": false,
          "comps": [],
          "uuid": "B429C2E6-92FA-4EE6-9B52-230DE778199F"
        },
        "position": {
          "x": 1344.78573,
          "y": 700.19413
        },
        "width": 941.05532,
        "height": 1398.38826
      },
      "s": {
        "label.opacity": 0,
        "label.position": 14,
        "label.offset.x": -10,
        "label.offset.y": 0,
        "label.color": "rgb(61,61,61)",
        "2d.movable": false,
        "interactive": true,
        "image.stretch": "uniform",
        "label": "标签",
        "fullscreen.gap": 0,
        "layout.h": "center",
        "layout.v": "topbottom",
        "fullscreen": "fill"
      },
      "a": {
        "content": "**须知**\n\nUIOTOS不要用户有前端开发基础，思维逻辑清晰即可，熟悉以下两个概念有助于快速入门：\n\n- 关于嵌套\n\n 界面嵌套，简单来说，是在某个界面里再包含一个或多个小界面。像俄罗斯套娃一样，一个娃娃里还能找到更小的娃娃。\n 在软件或网页设计中，嵌套通常用于构建层次分明、功能模块化的界面结构。作用有：\n \n\n    组织结构清晰：通过嵌套，可以将复杂的应用程序分割成逻辑上更加独立、易于管理和维护的小部分。每个小界面专注于完成特定功能，使得整体设计更加有序。\n    导航逻辑更自然：嵌套路由允许用户在不同功能模块之间平滑过渡，模拟文件夹式的浏览体验，符合用户的认知习惯。\n    复用组件：嵌套的界面可以重复使用相同的组件或布局，减少代码重复，提高开发效率。\n    状态管理简化：嵌套界面有助于将状态管理限制在较小的范围内，降低不同功能模块之间的耦合度，使得状态变更更加可控。\n    提升用户体验：通过只展示相关联的内容，避免信息过载，使用户能够聚焦于当前任务，从而提升使用体验。\n    动态加载与性能：在某些情况下，嵌套界面可以按需加载，不必一次性加载整个应用的所有内容，有助于提升应用的初始加载速度和整体性能。\n\t总之，界面嵌套是一种重要的设计手段，它帮助开发者构建结构清晰、易于维护且用户友好的应用程序。\n\n- 关于连线\n\n蓝图节点连线是在使用蓝图可视化编程系统（尤其是游戏开发领域，如虚幻引擎Unreal Engine）时的一种核心概念。具体来说，蓝图节点连线涉及到以下几个方面：\n\n    逻辑构建：蓝图节点连线允许开发者通过图形化方式构建复杂的逻辑结构，而不需要直接编写传统的代码。这对于没有编程背景的设计师或艺术家尤其友好，他们可以利用蓝图创建游戏机制、动画序列、AI行为等。\n    快速原型设计：因为无需编译，蓝图的修改可以即时预览，大大加快了从概念到可玩原型的迭代速度。这对于快速测试游戏设计想法非常有用。\n    可视化的程序结构：连线直观地展示程序逻辑流，使得代码的逻辑结构一目了然，便于理解和维护。\n    团队协作：蓝图的视觉特性使得项目成员之间可以更容易地交流设计理念和实现细节，促进跨职能团队的合作。\n    动态调整和优化：在开发过程中，可以根据需要轻松调整节点和连线，即时反馈游戏或应用的行为变化，便于调试和性能优化。\n    复用和模块化：可以通过封装一组节点为一个可复用的蓝图类或宏，提高开发效率，减少重复工作。\n\t总之，蓝图节点连线是实现快速、灵活、直观编程的关键手段，它在简化开发流程、加速创意实现、促进团队协作等方面发挥着重要作用，尤其是在游戏开发这类需要频繁迭代和创意实验的领域。\n\t\n**典型步骤**\n \n- 1）新建页面\n\t\n\t略\n\n- 2）拖放组件\n\t\n\t略\n\n- 3）属性配置\n\t\n\t略\n\n---\n\n- 4）连线（做逻辑）\n\n\t任何两个组件的属性，都可以用连线关联起来，传递数值。\n\t比如，输入框A的内容属性，连线指向文本框B的内容属性，那么A输入时内容就会同步给B。\n\n- 5）嵌套（封装功能）\n\n\t任何一个页面，可以像画中画那样，嵌套到另一个页面中，被当成组件使用，主要用来做功能封装。\n\t比如页面X，嵌套到页面Y上，那么在Y上可以配置X页面内的组件和属性，就跟在当前页面中一样。\n---\n- 6）预览发布\n\n**注意事项**\n\n\t当前版（v3.0）主要用于搭建PC端企业级应用，包括WEB管理平台、上位机、大屏、组态HMI等。\n\t当前版缺乏专门针对移动端的基础组件，可以用滚动布局和嵌套封装实现基本需求，必要时需扩展开发。",
        "bindEvents": [
          "*",
          "onChange"
        ],
        "readOnly": true,
        "watch": true,
        "preview": true,
        "hideToolbar": true,
        "symbol": "symbols/develop/uiotos/arranged/controls/forms/02-内容输入/文档编辑器.json"
      }
    }
  ],
  "modified": "Sat Aug 17 2024 08:34:03 GMT+0800 (中国标准时间)",
  "contentRect": {
    "x": 836.25807,
    "y": 1,
    "width": 979.05532,
    "height": 1398.38826
  }
}
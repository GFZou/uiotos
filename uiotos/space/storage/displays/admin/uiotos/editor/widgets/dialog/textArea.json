{
  "v": "8.0.1",
  "p": {
    "autoAdjustIndex": true,
    "hierarchicalRendering": true
  },
  "a": {
    "rotateAsClock": false,
    "gridBlockSize": 20,
    "connectActionType": null,
    "fitContent": false,
    "rectSelectable": false,
    "pannable": false,
    "zoomable": false,
    "_professional": false
  },
  "d": [
    {
      "c": "ht.Node",
      "i": 204500,
      "p": {
        "displayName": "textArea-ui（textArea-ui1）",
        "tag": "textArea-ui1",
        "dataBindings": {
          "a": {
            "value": {
              "id": "iotos.form",
              "func": "__ht__function formParser(rawData,node) {\r\n    try {\r\n        /********* TODO **********/\r\n    \r\n        //230304，单层数组是可以直接显示的，就不进入到对象字符串转换！\r\n        if(isArrayFn(rawData) && i.isJsonWithOneLayer(rawData)){\r\n        }\r\n        //230227，传递过来是对象，如果没有循环引用，就自动转换成字符，方便打印输出\r\n        else if(isObject(rawData)){\r\n            if(i.hasLoopCycle(rawData)){\r\n                i.showMessage('存在不支持文本化的对象！', 'warn', '警告', 'top', null, 3000);\r\n                console.error('WARNING:only support string type value,but given object with cycle:',rawData)\r\n            }else{\r\n                //存在问题待解决，会通过i.writeBackOnly重入这里，追加后新的内容跳转到else里去再执行了！\r\n                let upperDlg = i.upperData(node),\r\n                    titleText = upperDlg.ca('titleText'),\r\n                    tipsAdded = '（已将JSON对象自动转换成文本）';\r\n                upperDlg && upperDlg.ca('titleText', titleText && titleText.split && titleText.split(tipsAdded)[0] + tipsAdded);\r\n                console.error('RAW DATA OBJECT：\\r\\n',rawData);\r\n                rawData = i.ify(rawData,false);\r\n                console.warn(`-----LOG: ${i.ts2tm()}-----\\r\\n`,rawData);\r\n            }\r\n        }\r\n        \r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        console.error(err);\r\n        return err;\r\n    }\r\n}",
              "idinfo": "",
              "isTplBinded": false,
              "alias": ""
            },
            "placeholder": {
              "id": "iotos.form",
              "func": "__ht__function formParser(rawData) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}",
              "idinfo": "",
              "isTplBinded": false
            },
            "onChange": {
              "id": "iotos.form",
              "func": "__ht__function formParser(rawData) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}",
              "idinfo": "",
              "isTplBinded": false
            },
            "instantTrigger": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "htmlContent": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "readOnly": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "color": {
              "id": "iotos.form",
              "alias": "",
              "func": "__ht__function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        console.error(err);\r\n        return rawData;\r\n    }\r\n}",
              "idinfo": "",
              "isTplBinded": false
            },
            "background": {
              "id": "iotos.form",
              "alias": "",
              "func": "__ht__function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        console.error(err);\r\n        return rawData;\r\n    }\r\n}",
              "idinfo": "",
              "isTplBinded": false
            },
            "userData": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "font": {
              "id": "iotos.form",
              "alias": "",
              "func": "__ht__function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        console.error(err);\r\n        return rawData;\r\n    }\r\n}",
              "idinfo": "",
              "isTplBinded": false
            }
          }
        },
        "image": {
          "modified": "Wed Jul 31 2024 21:58:13 GMT+0800 (中国标准时间)",
          "dataBindings": [
            {
              "attr": "symbol",
              "valueType": "Image",
              "name": "symbol"
            },
            {
              "attr": "value",
              "valueType": "Object",
              "description": "当前值。\n<br>支持字符串、数字、布尔、对象、数组等\n<br>各种类型的值输入和显示。\n<br>注意，对象类型{}通常显示为[object Object]。\n<br>字符串、整数等数组类型，通常直接内容\n<br>逗号隔开的方式显示。",
              "group": "功能",
              "defaultValue": "",
              "name": "value"
            },
            {
              "attr": "htmlContent",
              "valueType": "Boolean",
              "defaultValue": false,
              "description": "勾选后，值内容可输入html文本，并以html格式显示。",
              "name": "htmlContent"
            },
            {
              "attr": "readOnly",
              "valueType": "Boolean",
              "description": "是否只读。\n<br>勾选后运行时不允许输入。\n<br>注意，对非网页格式有用。",
              "name": "readOnly"
            },
            {
              "attr": "initialTrigger",
              "valueType": "Boolean",
              "defaultValue": false,
              "description": "初始触发连线操作。\n<br>默认不勾选，勾选后初始加载值时，如果对外有连线，\n<br>并且初始值为非空时，也会触发对外的赋值连线操作。",
              "name": "initialTrigger"
            },
            {
              "attr": "instantTrigger",
              "valueType": "Boolean",
              "defaultValue": true,
              "name": "instantTrigger"
            },
            {
              "attr": "userData",
              "valueType": "Object",
              "defaultValue": [],
              "name": "userData"
            },
            {
              "attr": "onChange",
              "valueType": "Function",
              "extraInfo": {
                "arguments": [
                  "data",
                  "gv",
                  "cache",
                  "value",
                  "extra"
                ]
              },
              "name": "onChange"
            },
            {
              "attr": "shadowBorder",
              "valueType": "NumberArray",
              "defaultValue": [
                0,
                0,
                8
              ],
              "description": "阴影边框。\n<br>数组类型，比如0、0、8，作为边框\n<br>阴影显示的三个参数，可以分别调整。",
              "group": "外观",
              "name": "shadowBorder"
            },
            {
              "attr": "shadowColor",
              "valueType": "Color",
              "defaultValue": "rgba(55,125,255,0.50)",
              "name": "shadowColor"
            },
            {
              "attr": "shadowEnabled",
              "valueType": "Boolean",
              "defaultValue": true,
              "name": "shadowEnabled"
            },
            {
              "attr": "borderRadius",
              "valueType": "Number",
              "defaultValue": 3,
              "description": "边框圆角半径。",
              "name": "borderRadius"
            },
            {
              "attr": "borderWidth",
              "valueType": "Number",
              "defaultValue": 1,
              "description": "边框宽度。",
              "name": "borderWidth"
            },
            {
              "attr": "borderColor",
              "valueType": "ColorArray",
              "defaultValue": [
                "rgb(213,213,213)",
                "rgb(55,125,255)"
              ],
              "description": "边框颜色。\n<br>索引0：默认边框颜色；\n<br>索引1：输入时边框颜色。",
              "name": "borderColor"
            },
            {
              "attr": "background",
              "valueType": "ColorArray",
              "defaultValue": [
                "rgb(255,255,255)",
                "rgb(247,247,247)"
              ],
              "description": "背景色。\n<br>索引0为默认背景色。索引1为禁用背景色。",
              "name": "background"
            },
            {
              "attr": "color",
              "valueType": "ColorArray",
              "description": "文本颜色。\n<br>索引0：输入内容文字颜色。\n<br>索引1：标签文字颜色。",
              "defaultValue": [
                "rgb(0,0,0)",
                "rgb(61,61,61)"
              ],
              "name": "color"
            },
            {
              "attr": "font",
              "valueType": "Font",
              "description": "字体。",
              "name": "font"
            },
            {
              "attr": "placeholder",
              "valueType": "String",
              "defaultValue": "请输入",
              "description": "未输入时默认占位符文字。",
              "name": "placeholder"
            },
            {
              "attr": "labelText",
              "valueType": "String",
              "defaultValue": "标签",
              "description": "",
              "name": "labelText"
            },
            {
              "attr": "labelEmbeded",
              "valueType": "Boolean",
              "name": "labelEmbeded"
            },
            {
              "attr": "layoutVertical",
              "valueType": "Boolean",
              "defaultValue": false,
              "description": "",
              "name": "layoutVertical"
            },
            {
              "attr": "gap",
              "valueType": "PositiveNumber",
              "defaultValue": 10,
              "description": "",
              "name": "gap"
            },
            {
              "attr": "bindControlsTag",
              "valueType": "StringArray",
              "group": "连线",
              "name": "bindControlsTag"
            },
            {
              "attr": "bindControlsAttr",
              "valueType": "StringArray",
              "name": "bindControlsAttr"
            },
            {
              "attr": "bindControlsVal",
              "valueType": "ObjectArray",
              "description": "静态值。也用作数组索引、JSON对象解析提取值用途。\n<br>一、静态值用途：\n<br>对常规类型的属性赋值且没有反向关联属性值，传入为数值时，不\n<br>会作为数组的索引，而会当成常量值对外赋值。此外，存在特殊值：\n<br>~和undefined表示过滤、不触发；null为默认值，表示传递默认表\n<br>单数据。编辑状态下清空后保存与设置null等价。\n<br>二、数组索引用途\n<br>情况1：被操作的组件属性原先值是数组时（包括空数组），会将\n<br>待输出的值作为被操作数组指定索引的值来传入，而不是整体覆盖。\n<br>情况2：如果要被操作的组件属性原先值不是数组，而且待输出的\n<br>值为数组类型并且长度也在索引范围内，那么会按照索引取自身数\n<br>组指定元素再对外输出。（如果想要取待输出索引值，赋值给被操\n<br>纵属性的指定索引，那么需要中间组件属性连线过渡以下，无法直\n<br>接操作）\n<br>情况3：如果要被操作的组件属性是数组，而且待输出的值也是数组\n<br>类型，此时当情况1来处理。\n<br>三、数据解析用途：\n<br>待输出的值为JSON对象时，用x.y.z这种以字符.或者>为间隔的方式\n<br>实现对JSON字段层次逐层定位，当是数组时x.0.y.1这种以数字的方\n<br>式来指定数组的某个索引。以此实现对任意结果JSON对象字段的定\n<br>位，获取结构内指定字段对应的值。",
              "name": "bindControlsVal"
            },
            {
              "attr": "paramControlTag",
              "valueType": "StringArray",
              "name": "paramControlTag"
            },
            {
              "attr": "paramControlAttr",
              "valueType": "StringArray",
              "name": "paramControlAttr"
            },
            {
              "attr": "paramsGenerator",
              "valueType": "Function",
              "defaultValue": "__ht__function(data, val, index, node,oldVal,form,type,inner) {//绑定组索引对应的函数处理，用来动态生成复杂的参数变量传入\r\nswitch(index){\r\n    case 0:\r\n        break;\r\n    case 1:\r\n        break;\r\n    case 2:\r\n        break;\r\n    default:\r\n        break;\r\n}\r\n\r\nreturn val;}",
              "extraInfo": {
                "arguments": [
                  "data",
                  "val",
                  "index",
                  "node",
                  "oldVal",
                  "form",
                  "type",
                  "inner"
                ]
              },
              "name": "paramsGenerator"
            },
            {
              "attr": "useAttrCORS",
              "valueType": "Boolean",
              "defaultValue": false,
              "description": "连线操作和处理回写是否一致。\n                        比如多个文本框连线传值给相同对话框，弹窗修改\n                        后是否限定只能写到最新赋值过来的文本框。详见<a href='https://www.yuque.com/liuhuo-nc809/uiotos/fgi6dd7gado51acm#fFUbp' style=\"color:rgb(96,172,252)\"target=\"_blank\">同源属性操作</a>",
              "bindIgnored": true,
              "name": "useAttrCORS",
              "dynamicCreate": true
            },
            {
              "attr": "display",
              "valueType": "Image",
              "defaultValue": "",
              "description": "自定义页面地址。\n                可以是编辑器中的其他页面，也可以\n                是外部网页链接地址。",
              "group": "弹出框 *",
              "name": "display",
              "dynamicCreate": true
            },
            {
              "attr": "pureTipText",
              "valueType": "String",
              "defaultValue": "",
              "description": "提示文字。\n                    当专业用户属性中，提供display内嵌页属性，\n                    如果有配置，那么本属性设置无效，将以内嵌\n                    页显示为准。",
              "group": "弹出框 *",
              "name": "pureTipText",
              "dynamicCreate": true
            },
            {
              "attr": "popDirection",
              "valueType": "SideDirection",
              "defaultValue": "right",
              "description": "提示显示位置。",
              "group": "弹出框 *",
              "name": "popDirection",
              "dynamicCreate": true
            },
            {
              "attr": "popBackground",
              "valueType": "Color",
              "defaultValue": "white",
              "description": "箭头和背景色。",
              "group": "弹出框 *",
              "name": "popBackground",
              "dynamicCreate": true
            },
            {
              "attr": "popPadding",
              "valueType": "NumberArray",
              "defaultValue": [
                2,
                2,
                2,
                2
              ],
              "description": "内间距。",
              "group": "弹出框 *",
              "name": "popPadding",
              "dynamicCreate": true
            },
            {
              "attr": "popWidth",
              "valueType": "Number",
              "defaultValue": 400,
              "description": "弹出框宽度。",
              "group": "弹出框 *",
              "name": "popWidth",
              "dynamicCreate": true
            },
            {
              "attr": "popHeight",
              "valueType": "Number",
              "defaultValue": 300,
              "description": "弹出框高度。",
              "group": "弹出框 *",
              "name": "popHeight",
              "dynamicCreate": true
            },
            {
              "attr": "popBorderColor",
              "valueType": "Color",
              "defaultValue": "rgb(51,51,51)",
              "description": "边框线颜色。\n                    注意，是设置了边框宽度非0后的边框颜色。\n                    默认边框宽度属性为0时，实际上是白色并\n                    带有箭头指示的边框。本属性不用于修改默\n                    认边框色。",
              "group": "弹出框 *",
              "name": "popBorderColor",
              "dynamicCreate": true
            },
            {
              "attr": "popBorderWidth",
              "valueType": "Number",
              "defaultValue": 0,
              "description": "边框线宽度。\n                    默认值为0，此时边框默认为白色并且带有\n                    箭头指示。当设置宽度后，颜色将取边框颜\n                    色属性的设置，并且不再有箭头指示。",
              "group": "弹出框 *",
              "name": "popBorderWidth",
              "dynamicCreate": true
            },
            {
              "attr": "popBorderRadius",
              "valueType": "Number",
              "defaultValue": 0,
              "description": "边框线圆角。\n                    设置圆角线后，如果此前默认是白色边框带有\n                    指示箭头，那么将自动不可见，只对内容区域\n                    产生圆角。",
              "group": "弹出框 *",
              "name": "popBorderRadius",
              "dynamicCreate": true
            },
            {
              "attr": "popTriggerEvent",
              "valueType": "MouseEvent",
              "defaultValue": "hover",
              "description": "触发方式。\n                支持鼠标移入、点击（按钮时）\n                两种触发提示的方式。",
              "group": "弹出框 *",
              "name": "popTriggerEvent",
              "dynamicCreate": true
            }
          ],
          "snapshotURL": "symbols/develop/uiotos/arranged/controls/forms_icon/文本框.json",
          "renderHTML": "__ht__function(data, gv, cache) {return __textArea_ui(data,gv,cache);}",
          "width": 300,
          "height": 100,
          "scrollable": true,
          "interactive": true,
          "pixelPerfect": false,
          "comps": [],
          "uuid": "418055B5-14E9-4E4E-A520-C8C856172E2D"
        },
        "position": {
          "x": 0,
          "y": 45.39566
        },
        "width": 320,
        "height": 389
      },
      "s": {
        "interactive": true,
        "fullscreen.gap": 0,
        "fullscreen": "fill",
        "label": "",
        "label.color": "rgb(61,61,61)"
      },
      "a": {
        "labelVisible": false,
        "readOnly": false,
        "placeholder": "请输入",
        "color": [
          "rgb(61,61,61)",
          "rgb(61,61,61)"
        ],
        "gap": 0,
        "borderWidth": 10,
        "borderColor": "rgba(255,255,255,0)",
        "activeBorderColor": "rgba(51,153,255,0)",
        "font": "12px arial, sans-serif",
        "instantTrigger": true,
        "labelEmbeded": false,
        "labelText": "",
        "onChange": null,
        "htmlContent": false,
        "value": "",
        "bindEvents": [
          "*",
          "onChange"
        ],
        "readOnlyBackground": "rgb(255,255,255)",
        "background": "rgb(255,255,255)",
        "symbol": "symbols/develop/uiotos/arranged/controls/forms/02-内容输入/文本框.json",
        "oldDynamicAttrs": [
          {
            "attr": "useAttrCORS",
            "valueType": "Boolean",
            "defaultValue": false,
            "description": "属性同源操作。\n                连线操作传递是否限定双方。比如有A/B/C/D/O五个组件，连线操作关系：\n                A→O、B→O、C→O、D→O，以及O→A、O→B、O→C、O→D，总结为\n                A、B、C、D分别与O有往返操作。\n                默认不勾选该属性时，A到D任何一个向O的连线操作，都不会影响到O自身\n                对A到D的下一步操作。勾选了该属性后，那么每次相邻的两次连线交互，\n                则会有同源选择性，比如A→O，下一步则O之会选择到A的操作即O→A。\n                同源操作通常用户多个组件共用一个配置弹窗的情况，比如上述A、B、C、D\n                相当于是四个同类型的组件，而O是公共的属性配置窗口，任何一个比如A点\n                击，可通过O弹窗显示属性，然后修改后将属性值回写到A，且并不会将值给\n                到其他几个组件，即便有连线在。\n                同源操作规则：当连线满足A/B→O.x，且有O.x→A/B时，即前一次组件A连线\n                操作O的x属性，那么，O对外触发且关联x属性值对外时，勾选了本属性同源\n                属性操作的前提下，将只会执行O.x→A，而忽略O.x→B/C等其他非A的图元组\n                件的连线操作。",
            "dynamicCreate": true
          }
        ],
        "colors": [
          "rgb(61,61,61)",
          "rgb(61,61,61)"
        ]
      }
    },
    {
      "c": "ht.Text",
      "i": 204501,
      "p": {
        "displayName": "datas（datas）",
        "tag": "datas",
        "dataBindings": {
          "s": {
            "text": {
              "id": "iotos.form",
              "func": "__ht__function formParser(rawData) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}",
              "idinfo": "",
              "isTplBinded": false
            }
          }
        },
        "host": {
          "__i": 204500
        },
        "position": {
          "x": 116,
          "y": -57.60434
        },
        "width": 28,
        "height": 5
      },
      "s": {
        "text": "datas",
        "interactive": true,
        "image.stretch": "uniform",
        "2d.visible": false,
        "layout.h": "right",
        "layout.v": "bottom",
        "label.position": 17,
        "label.color": "rgb(61,61,61)"
      }
    }
  ],
  "modified": "Thu Aug 08 2024 17:32:15 GMT+0800 (中国标准时间)",
  "contentRect": {
    "x": -160,
    "y": -149.10434,
    "width": 320,
    "height": 408.34766
  }
}
{
  "v": "8.0.1",
  "p": {
    "autoAdjustIndex": true,
    "hierarchicalRendering": true
  },
  "a": {
    "rotateAsClock": false,
    "gridBlockSize": 20,
    "connectActionType": null,
    "_parentTag": "dlg1",
    "fitContent": false,
    "rectSelectable": false,
    "pannable": false,
    "zoomable": false,
    "appName": "properties"
  },
  "d": [
    {
      "c": "ht.Node",
      "i": 110753,
      "p": {
        "name": "Node",
        "displayName": "n（Node1）",
        "tag": "Node1",
        "position": {
          "x": -20.18699,
          "y": -58.44393
        },
        "width": 400,
        "height": 600
      },
      "s": {
        "shape": "rect",
        "shape.background": "rgb(255,255,255)",
        "shape.border.color": "#979797",
        "interactive": true,
        "image.stretch": "uniform",
        "fullscreen.gap": 0,
        "label.position": 14,
        "label.offset.x": -10,
        "label.offset.y": 0,
        "label.color": "rgb(61,61,61)",
        "fullscreen": "fill"
      }
    },
    {
      "c": "ht.Node",
      "i": 110754,
      "p": {
        "displayName": "dlg（dlg1）",
        "tag": "dlg1",
        "dataBindings": {
          "a": {
            "show": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "titleText": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "display": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "onPageBinded": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "userData": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "onOk": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "onCancel": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "onFinally": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "innerLayoutMode": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "debugOccupied": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "property>0>treeTable-ui1>a:datas": {
              "id": "iotos.formValue",
              "idinfo": "",
              "isTplBinded": false,
              "func": "__ht__function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        console.error(err);\r\n        return rawData;\r\n    }\r\n}",
              "alias": ""
            },
            "property>0>treeTable-ui1>a:checkSelected": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "property>0>treeTable-ui1>a:onCheck": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "property>0>treeTable-ui1>a:visibleFilterInput": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "property>0>treeTable-ui1>a:queryMatched": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "property>0>treeTable-ui1>a:dataAdd": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "property>0>treeTable-ui1>a:dataComboType": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "property>0>treeTable-ui1>a:rowsExtraUserInfo": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "property>0>treeTable-ui1>a:userData": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "property>0>treeTable-ui1>a:checkIndexsGet": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "property>0>treeTable-ui1>a:onDatasLoaded": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "property>0>treeTable-ui1>a:onClick": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "property>0>treeTable-ui1>a:onDoubleClick": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "property>0>treeTable-ui1>a:onLastButtonClick": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "property>0>treeTable-ui1>a:onLastButtonSelected": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "property>0>treeTable-ui1>a:borderWidth": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "property>0>check>a:selected": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "property>0>check>a:datas": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "property>0>check>a:textValues": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "property>0>check>a:indexValues": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "property>0>check>a:idValues": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "property>0>check>a:disabled": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "property>0>input-ui2>a:value": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "property>0>input-ui2>a:onChange": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "property>0>input-ui2>a:instantTrigger": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "property>0>input-ui2>a:onEnter": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "property>0>input-ui2>a:readOnly": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "property>0>temp>s:text": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "property>0>func1>a:userData": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "property>0>func1>a:output": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "property>0>func1>a:inputs": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "property>0>func1>a:exec": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "property>0>ok>a:text": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "property>0>ok>a:onFormClick": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "property>0>ok>a:userData": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "footerButtonsText": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "property>0>treeTable-ui1>a:dataFilterFunc": {
              "id": "iotos.formReset",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            }
          }
        },
        "image": {
          "modified": "Sun Jun 09 2024 16:14:33 GMT+0800 (中国标准时间)",
          "dataBindings": [
            {
              "attr": "symbol",
              "valueType": "Image",
              "name": "symbol"
            },
            {
              "attr": "display",
              "valueType": "URL",
              "group": "功能",
              "defaultValue": "displays/develop/uiotos/editor/widgets/dialog/textArea.json",
              "name": "display",
              "description": "'xxx'"
            },
            {
              "attr": "innerLayoutMode",
              "valueType": "String",
              "description": "内嵌页面的布局模式。\n<br>页面通常分为适配内容（fitContent）\n<br>和全屏填充（fullScreen）两种模式，\n<br>前者自适应缩放以保证所有内容窗口\n<br>范围内可见，后者则是指定某个图元\n<br>组件作为底板全屏填充，其他组件直\n<br>接或简接对于底板布局。\n<br>模式无（none）表示以上两种模式都\n<br>不是，既不缩放适配也不全屏铺满。\n<br>注意，本属性为读写，可以表示当前\n<br>页面的状态，也可以进行设置。其中\n<br>设置全屏填充时，自动选择最底层图\n<br>元组件作为底板。新建页面默认为基\n<br>于有底板的全屏填充布局，而非缩放。\n",
              "extraInfo": {
                "enum": {
                  "values": [
                    "fitContent",
                    "fullScreen",
                    "none"
                  ]
                }
              },
              "name": "innerLayoutMode"
            },
            {
              "attr": "innerBackground",
              "valueType": "Color",
              "description": "内嵌背景色。",
              "defaultValue": null,
              "name": "innerBackground"
            },
            {
              "attr": "modal",
              "valueType": "Boolean",
              "defaultValue": true,
              "description": "模态。",
              "name": "modal"
            },
            {
              "attr": "reset",
              "valueType": "Level2",
              "defaultValue": 0,
              "name": "reset"
            },
            {
              "attr": "useOriginSize",
              "valueType": "Boolean",
              "defaultValue": false,
              "name": "useOriginSize"
            },
            {
              "attr": "embedded",
              "valueType": "Boolean",
              "defaultValue": false,
              "description": "勾选后，对话框弹窗显示位置不再是屏幕居中，\n<br>而是按照布局设置动态确定的位置上显示。注意，\n<br>拖放将对话框拖放到页面区域（底板矩形）外，\n<br>并且设置了自动布局，那么运行时会自动靠边对其\n<br>显示，避免编辑时覆盖页面内容区域。",
              "name": "embedded"
            },
            {
              "attr": "show",
              "valueType": "Boolean",
              "defaultValue": false,
              "description": "展示。\n<br>弹出对话框。",
              "name": "show"
            },
            {
              "attr": "hide",
              "valueType": "Boolean",
              "defaultValue": false,
              "description": "隐藏。",
              "name": "hide"
            },
            {
              "attr": "debugOccupied",
              "valueType": "Boolean",
              "defaultValue": false,
              "description": "调试。",
              "name": "debugOccupied"
            },
            {
              "attr": "displaySaving",
              "valueType": "Boolean",
              "defaultValue": false,
              "description": "点击确定时，页面的修改将被保存。",
              "name": "displaySaving"
            },
            {
              "attr": "enableLoading",
              "valueType": "Boolean",
              "defaultValue": true,
              "description": "启用加载。",
              "name": "enableLoading"
            },
            {
              "attr": "isLoadingGet",
              "valueType": "Boolean",
              "defaultValue": false,
              "description": "是否正在加载。\n<br>只读，当正在通过display属性逐层加载内嵌页直到完全加载完毕前，\n<br>该属性值为1，加载完毕后，复位为0.",
              "name": "isLoadingGet"
            },
            {
              "attr": "reloadWhenOpen",
              "valueType": "Boolean",
              "defaultValue": false,
              "description": "弹窗时内嵌页面是否重新加载。\n<br>勾选时，每次弹窗会重加载内嵌页，否则\n<br>上次弹窗输入内容，再下次弹窗时还保留。",
              "name": "reloadWhenOpen"
            },
            {
              "attr": "onDisplayLoaded",
              "valueType": "Function",
              "extraInfo": {
                "arguments": [
                  "data",
                  "gv",
                  "cache"
                ]
              },
              "description": "显示已加载。",
              "name": "onDisplayLoaded"
            },
            {
              "attr": "cancelDefault",
              "valueType": "Boolean",
              "defaultValue": false,
              "description": "默认取消。",
              "name": "cancelDefault"
            },
            {
              "attr": "userData",
              "valueType": "ObjectArray",
              "group": "数据",
              "name": "userData"
            },
            {
              "attr": "pureFormValues",
              "valueType": "Boolean",
              "defaultValue": false,
              "description": "纯表单数据。\n<br>限定iotos.formValue类型的绑定，不包括form/formReset。",
              "name": "pureFormValues"
            },
            {
              "attr": "titleText",
              "valueType": "String",
              "defaultValue": "对话框",
              "group": "外观",
              "description": "标题文本。",
              "name": "titleText"
            },
            {
              "attr": "titleFont",
              "valueType": "Font",
              "name": "titleFont"
            },
            {
              "attr": "titleColor",
              "valueType": "Color",
              "description": "标题文本颜色。",
              "name": "titleColor"
            },
            {
              "attr": "headerHeight",
              "valueType": "PositiveNumber",
              "defaultValue": 35,
              "description": "头部高度。",
              "name": "headerHeight"
            },
            {
              "attr": "footerHeight",
              "valueType": "PositiveNumber",
              "defaultValue": 60,
              "description": "角度高度。",
              "name": "footerHeight"
            },
            {
              "attr": "backgroundImage",
              "valueType": "Image",
              "defaultValue": "symbols/develop/uiotos/icons/common/borderRectange.json",
              "description": "背景图像。",
              "name": "backgroundImage"
            },
            {
              "attr": "background",
              "valueType": "ColorArray",
              "description": "背景颜色。\n<br>依次是内嵌页背景（innerBackground）、\n<br>背景矩形（backgrondColor）、\n<br>头背景、脚背景色、遮盖层背景色。",
              "defaultValue": [
                "rgba(255,255,255,1)",
                "rgba(255,255,255,1)",
                "rgba(255,255,255,1)",
                "rgba(0,0,0,0.2)"
              ],
              "name": "background"
            },
            {
              "attr": "borderRadius",
              "valueType": "PositiveNumber",
              "defaultValue": 10,
              "name": "borderRadius"
            },
            {
              "attr": "boxShadow",
              "valueType": "String",
              "defaultValue": "0px 8px 22px rgba(0,0,0,0.1)",
              "description": "对话框阴影设置。\n<br>数字依次代表左右偏移、上下偏移、虚化程度、阴影颜色。",
              "name": "boxShadow"
            },
            {
              "attr": "padding",
              "valueType": "PositiveNumber",
              "defaultValue": 0,
              "description": "填充。\n<br>0代表100%填充边界框，数字越大，对话框显示的越小。",
              "name": "padding"
            },
            {
              "attr": "headerVisible",
              "valueType": "Boolean",
              "defaultValue": true,
              "description": "是否显示头部。",
              "name": "headerVisible"
            },
            {
              "attr": "footerVisible",
              "valueType": "Boolean",
              "defaultValue": true,
              "description": "是否显示脚部。",
              "name": "footerVisible"
            },
            {
              "attr": "closeButtonOnly",
              "valueType": "Boolean",
              "defaultValue": false,
              "description": "只有一个“关闭”按钮。",
              "name": "closeButtonOnly"
            },
            {
              "attr": "oneButton",
              "valueType": "Boolean",
              "defaultValue": false,
              "description": "只有一个“确定”按钮。",
              "name": "oneButton"
            },
            {
              "attr": "footerButtonGap",
              "valueType": "PositiveNumber",
              "defaultValue": 20,
              "description": "脚部按钮中间的间隙。",
              "name": "footerButtonGap"
            },
            {
              "attr": "footerButtonsText",
              "valueType": "StringArray",
              "defaultValue": [
                "取消",
                "确定"
              ],
              "description": "取消和确定按钮文字。\n<br>数组类型，其中索引0为“取消”功能\n<br>按钮对应的显示文字，索引1为“确定”\n<br>功能按钮对应的显示文字。可以按照\n<br>实际情况给两个功能得按钮赋予其他\n<br>显示文字。\n<br>其中，取消时，对话框不对外触发连\n<br>线操作；确定时，对话框执行对外连\n<br>线操作。\n<br>注意，“确定”对应onOk事件，“取消”\n<br>对应onCancel事件，因此如果想要取\n<br>消点击时触发下一步连线执行，可以\n<br>通过关联onCancel事件。点击确定时，\n<br>对外可省去对onOk事件的关联，”取\n<br>消”对onCancel事件的关联则不能省。",
              "name": "footerButtonsText"
            },
            {
              "attr": "bt0-backgrounds",
              "valueType": "ColorArray",
              "defaultValue": [
                "rgb(55,125,255)",
                "rgb(51,153,255)"
              ],
              "description": "“确定”按钮的背景颜色。\n<br>索引0代表按钮的默认颜色，\n索引1代表鼠标悬停时按钮的颜色。",
              "name": "bt0-backgrounds"
            },
            {
              "attr": "bt0-selectBackgrounds",
              "valueType": "ColorArray",
              "defaultValue": [
                "rgb(55,125,255)",
                "rgb(51,153,255)"
              ],
              "description": "目前这个功能暂不支持。",
              "name": "bt0-selectBackgrounds"
            },
            {
              "attr": "bt0-activeBackgrounds",
              "valueType": "ColorArray",
              "defaultValue": [
                "rgb(55,125,255)",
                "rgb(51,153,255)"
              ],
              "description": "索引0代表“确定”按钮的点击时的颜色\n<br>索引1功能暂不支持。",
              "name": "bt0-activeBackgrounds"
            },
            {
              "attr": "bt0-textColors",
              "valueType": "ColorArray",
              "defaultValue": [
                "rgb(255,255,255)",
                "rgb(255,255,255)"
              ],
              "description": "“确定”按钮的文字颜色。\n<br>索引0代表默认的文字颜色。\n<br>索引1代表悬停时的文字颜色。",
              "name": "bt0-textColors"
            },
            {
              "attr": "bt0-selectTextColors",
              "valueType": "ColorArray",
              "defaultValue": [
                "rgb(255,255,255)",
                "rgb(255,255,255)"
              ],
              "description": "目前这个功能暂不支持。",
              "name": "bt0-selectTextColors"
            },
            {
              "attr": "bt0-activeTextColors",
              "valueType": "ColorArray",
              "defaultValue": [
                "rgb(255,255,255)",
                "rgb(255,255,255)"
              ],
              "description": "索引0代表“确定”按钮点击时文字的颜色\n<br>索引1功能暂不支持。",
              "name": "bt0-activeTextColors"
            },
            {
              "attr": "bt0-borderWidths",
              "valueType": "NumberArray",
              "defaultValue": [
                1,
                0,
                0
              ],
              "description": "“确定”按钮的边框宽度。",
              "name": "bt0-borderWidths"
            },
            {
              "attr": "bt0-borderColors",
              "valueType": "ColorArray",
              "defaultValue": [
                "rgb(55,125,255)",
                "rgb(55,125,255)",
                "rgb(55,125,255)"
              ],
              "description": "“确定”按钮的边框颜色。",
              "name": "bt0-borderColors"
            },
            {
              "attr": "bt0-borderRadius",
              "valueType": "PositiveNumber",
              "defaultValue": 3,
              "description": "“确定”按钮的边框半径。",
              "name": "bt0-borderRadius"
            },
            {
              "attr": "bt1-backgrounds",
              "valueType": "ColorArray",
              "defaultValue": [
                "rgb(255,255,255)",
                "rgb(247,247,247)"
              ],
              "description": "“取消”按钮的背景颜色。\n<br>索引0代表按钮的默认颜色，\n索引1代表鼠标悬停时按钮的颜色。",
              "name": "bt1-backgrounds"
            },
            {
              "attr": "bt1-selectBackgrounds",
              "valueType": "ColorArray",
              "defaultValue": [
                "rgb(255,255,255)",
                "rgb(247,247,247)"
              ],
              "description": "目前这个功能暂不支持。",
              "name": "bt1-selectBackgrounds"
            },
            {
              "attr": "bt1-activeBackgrounds",
              "valueType": "ColorArray",
              "defaultValue": [
                "rgb(255,255,255)",
                "rgb(247,247,247)"
              ],
              "description": "索引0代表“取消”按钮点击时的颜色\n<br>索引1功能暂不支持。",
              "name": "bt1-activeBackgrounds"
            },
            {
              "attr": "bt1-textColors",
              "valueType": "ColorArray",
              "defaultValue": [
                "rgb(55,125,255)",
                "rgb(51,153,255)"
              ],
              "description": "“取消”按钮的文字颜色。\n<br>索引0代表默认的文字颜色。\n<br>索引1代表悬停时的文字颜色。",
              "name": "bt1-textColors"
            },
            {
              "attr": "bt1-selectTextColors",
              "valueType": "ColorArray",
              "defaultValue": [
                "rgb(55,125,255)",
                "rgb(51,153,255)"
              ],
              "description": "目前这个功能暂不支持。",
              "name": "bt1-selectTextColors"
            },
            {
              "attr": "bt1-activeTextColors",
              "valueType": "ColorArray",
              "defaultValue": [
                "rgb(55,125,255)",
                "rgb(51,153,255)"
              ],
              "description": "索引0代表“取消”按钮点击时文字的颜色\n<br>索引1功能暂不支持。",
              "name": "bt1-activeTextColors"
            },
            {
              "attr": "bt1-borderWidths",
              "valueType": "NumberArray",
              "defaultValue": [
                1,
                0,
                0
              ],
              "description": "“取消”按钮的边框宽度。",
              "name": "bt1-borderWidths"
            },
            {
              "attr": "bt1-borderColors",
              "valueType": "ColorArray",
              "defaultValue": [
                "rgb(55,125,255)",
                "rgb(51,153,255)",
                "rgb(51,153,255)"
              ],
              "description": "“取消”按钮的边框颜色。",
              "name": "bt1-borderColors"
            },
            {
              "attr": "bt1-borderRadius",
              "valueType": "PositiveNumber",
              "defaultValue": 3,
              "description": "取消”按钮的边框半径。",
              "name": "bt1-borderRadius"
            },
            {
              "attr": "footerButtonSize",
              "valueType": "NumberArray",
              "defaultValue": [
                75,
                35
              ],
              "description": "脚部按钮大小。\n<br>索引0 的数值代表按钮的宽度。\n<br>索引1 的数值代表按钮的高度。",
              "name": "footerButtonSize"
            },
            {
              "attr": "onOk",
              "valueType": "Function",
              "extraInfo": {
                "arguments": [
                  "data",
                  "gv",
                  "cache",
                  "form"
                ]
              },
              "group": "事件",
              "description": "当点击“确定”时对外触发。",
              "name": "onOk"
            },
            {
              "attr": "onCancel",
              "valueType": "Function",
              "extraInfo": {
                "arguments": [
                  "data",
                  "gv",
                  "cache",
                  "form"
                ]
              },
              "description": "当“取消”时对外触发。",
              "name": "onCancel"
            },
            {
              "attr": "onFinally",
              "valueType": "Function",
              "extraInfo": {
                "arguments": [
                  "data",
                  "gv",
                  "cache",
                  "form",
                  "isOk"
                ]
              },
              "name": "onFinally"
            },
            {
              "attr": "useInnerEventsAll",
              "valueType": "Boolean",
              "description": "是否允许内嵌事件通过。\n<br>若勾选，内嵌图元表单类型的事件函数属性，都将派发到上层容器图元对外触发连线操作。\n<br>默认不勾选，上层容器图元对外连线反向关联需要指定内嵌图元的具体事件函数属性才能\n<br>触发，否则忽略内嵌图元的事件触发，不会传递给上层容器图元对外连线操作。",
              "name": "useInnerEventsAll"
            },
            {
              "attr": "onPageBinded",
              "valueType": "Object",
              "description": "当页面绑定时。",
              "name": "onPageBinded"
            },
            {
              "attr": "bindControlsTag",
              "valueType": "StringArray",
              "group": "连线",
              "name": "bindControlsTag"
            },
            {
              "attr": "bindControlsAttr",
              "valueType": "StringArray",
              "name": "bindControlsAttr"
            },
            {
              "attr": "bindControlsVal",
              "valueType": "ObjectArray",
              "description": "静态值。也用作数组索引、JSON对象解析提取值用途。\n<br>一、静态值用途：\n<br>对常规类型的属性赋值且没有反向关联属性值，传入为数值时，不\n<br>会作为数组的索引，而会当成常量值对外赋值。此外，存在特殊值：\n<br>~和undefined表示过滤、不触发；null为默认值，表示传递默认表\n<br>单数据。编辑状态下清空后保存与设置null等价。\n<br>二、数组索引用途\n<br>情况1：被操作的组件属性原先值是数组时（包括空数组），会将\n<br>待输出的值作为被操作数组指定索引的值来传入，而不是整体覆盖。\n<br>情况2：如果要被操作的组件属性原先值不是数组，而且待输出的\n<br>值为数组类型并且长度也在索引范围内，那么会按照索引取自身数\n<br>组指定元素再对外输出。（如果想要取待输出索引值，赋值给被操\n<br>纵属性的指定索引，那么需要中间组件属性连线过渡以下，无法直\n<br>接操作）\n<br>情况3：如果要被操作的组件属性是数组，而且待输出的值也是数组\n<br>类型，此时当情况1来处理。\n<br>三、数据解析用途：\n<br>待输出的值为JSON对象时，用x.y.z这种以字符.或者>为间隔的方式\n<br>实现对JSON字段层次逐层定位，当是数组时x.0.y.1这种以数字的方\n<br>式来指定数组的某个索引。以此实现对任意结果JSON对象字段的定\n<br>位，获取结构内指定字段对应的值。",
              "name": "bindControlsVal"
            },
            {
              "attr": "paramControlTag",
              "valueType": "StringArray",
              "name": "paramControlTag"
            },
            {
              "attr": "paramControlAttr",
              "valueType": "StringArray",
              "name": "paramControlAttr"
            },
            {
              "attr": "paramsGenerator",
              "valueType": "Function",
              "defaultValue": "__ht__function(data, val, index, node,oldVal,form) {//绑定组索引对应的函数处理，用来动态生成复杂的参数变量传入\r\nswitch(index){\r\n    case 0:\r\n        break;\r\n    case 1:\r\n        break;\r\n    case 2:\r\n        break;\r\n    default:\r\n        break;\r\n}\r\n\r\nreturn val;}",
              "extraInfo": {
                "arguments": [
                  "data",
                  "val",
                  "index",
                  "node",
                  "oldVal",
                  "form",
                  "type"
                ]
              },
              "name": "paramsGenerator"
            },
            {
              "attr": "useAttrCORS",
              "valueType": "Boolean",
              "defaultValue": false,
              "description": "连线操作和处理回写是否一致。\n                        比如多个文本框连线传值给相同对话框，弹窗修改\n                        后是否限定只能写到最新赋值过来的文本框。详见<a href='https://www.yuque.com/liuhuo-nc809/uiotos/fgi6dd7gado51acm#fFUbp' style=\"color:rgb(96,172,252)\"target=\"_blank\">同源属性操作</a>",
              "name": "useAttrCORS",
              "dynamicCreate": true
            },
            {
              "attr": "property>0>treeTable-ui1>a:datas",
              "name": ".数据内容",
              "valueType": "Object",
              "defaultValue": [],
              "description": "树表的数据。",
              "group": "property>0>treeTable-ui1"
            },
            {
              "attr": "property>0>treeTable-ui1>a:checkSelected",
              "name": ".checkSelected",
              "valueType": "ObjectArray",
              "defaultValue": [],
              "description": "选中的行ID列表。\n<br>注意，有别于只读属性只读属性checkIndexsGet\n<br>（选中的行序号列表），当前属性是指定的行数据ID\n<br>列表，其中数据ID取决于idField属性的配置。\n<br>此外，本属性的变化，会实时同步给只读的序号ID列\n<br>表属性。默认情况下，未设置行数据ID字段时，本属\n<br>性数据ID通常与行序号相同。\n<br>本属性的变化，也会与查询匹配属性queryMatched双\n<br>同步，不过行数据ID或序号不会重复，但是查询匹配字\n<br>符串可能会重复，尤其是有子节点的树表，在不同节点\n<br>下文字显示可以存在完全相同的，详见queryMatched。",
              "group": "property>0>treeTable-ui1"
            },
            {
              "attr": "property>0>treeTable-ui1>a:onCheck",
              "name": ".onCheck",
              "valueType": "Function",
              "extraInfo": {
                "arguments": [
                  "data",
                  "gv",
                  "cache",
                  "selected"
                ]
              },
              "description": "当勾选时对外触发。",
              "group": "property>0>treeTable-ui1"
            },
            {
              "attr": "property>0>treeTable-ui1>a:visibleFilterInput",
              "name": ".visibleFilterInput",
              "valueType": "Object",
              "defaultValue": "",
              "description": "行数据关键词过滤。\n<br>将所有行以及行的所有列的显示文字作为内容，\n<br>将当前属性内容作为关键词，按照过滤规则进\n<br>行匹配，匹配成功的行会显示，否则不显示，\n<br>以此实现表格行数据的关键词过滤。\n<br>过滤规则如下：\n<br>1）空格隔开的字符串，被识别为多个独立的关\n<br>键词，分别进行匹配，并且所有的都匹配到整体\n<br>才算匹配成功，相当于交集。\n<br>2）英文逗号隔开的字符串，也被识别为多个独\n<br>立的关键词，分别进行匹配，并且任一关键词匹\n<br>配到，那么整体都算匹配成功，相当于并集。\n<br>3）当前属性如果是字符串数组，那么被当做情\n<br>况1）来处理，即多个关键词交集。\n<br>4）关键词末尾为空格（以空格结束）时，将严\n<br>格匹配关键词字符串，内容中有包含字符且紧接\n<br>后面还有字符时，不被认作匹配。",
              "group": "property>0>treeTable-ui1"
            },
            {
              "attr": "property>0>treeTable-ui1>a:queryMatched",
              "name": ".queryMatched",
              "valueType": "ObjectArray",
              "defaultValue": {
                "datas": [],
                "checkSelected": [],
                "onCheck": null,
                "visibleFilterInput": " ",
                "queryMatched": [],
                "lastItemRowsText": [],
                "currentIdSelect": 4,
                "dataComboType": []
              },
              "description": "查询匹配项。\n<br>本属性用于设置或显示文字匹配的行数据项，通常与勾选项checkSelected属性双向同步，\n<br>分别是显示文字和数据ID。比如数据id为124，显示文字为'uiotos'，那么不论是在checkS-\n<br>elected中配置124，还是在本属性中配置'uiotos'，两个属性会双向同步，同时也会同步给\n<br>只读属性checkIndexsGet。\n<br>注意，行数据ID或序号不会重复，但是显示文字可能会重复，尤其是有上下级节点的树表\n<br>格式的数据，在不同的节点下，显示文字完全可能有重复的。此时需遵守以下规则：\n<br>1）当checkSelected属性中有配置了指定某个数据ID，而相同数据ID的还有其他项目且未\n<br>在该属性配置时，自动同步给queryMatched属性时，会有显示文字，但是文字对应的其他\n<br>数据项ID，并不会再同步会checkSelected，只会保持已有配置。这样可以避免一旦设置某\n<br>个数据项勾选，结果相同显示文字的也被自动勾选。\n<br>2）当checkSelected属性中没有queryMatched属性中配置文字对应的所有行数据项中的任\n<br>何一项，那么这些匹配到的数据项的行数据ID，都会自动同步追加到checkSelected属性中。\n<br>注意：本属性的设置，直接影响树表格行数据的勾选（如果有设置允许单选或多勾选），并\n<br>且对于节点不起作用，即运行时勾选节点，那么节点下的所有行数据都会被勾选，但目前在\n<br>属性设置中，不论是checkSelected还是queryMatched，设置节点无效，并不会对其下面\n<br>所有项自动勾选。",
              "group": "property>0>treeTable-ui1"
            },
            {
              "attr": "property>0>treeTable-ui1>a:dataAdd",
              "name": ".单行添加",
              "valueType": "Object",
              "defaultValue": null,
              "description": "新添加的数据。",
              "group": "property>0>treeTable-ui1"
            },
            {
              "attr": "property>0>treeTable-ui1>a:dataComboType",
              "name": ".dataComboType",
              "valueType": "Object",
              "defaultValue": [],
              "description": "树表数据的哪一列对应到下拉框显示，即属性dataComboType的\n<br>显示字段name就采用树表treeTable的那一列。值可以是列名称或者\n<br>列索引。其中数字会被当成索引处理，且列索引是从0开始（第0列属于ID序号列）。",
              "group": "property>0>treeTable-ui1"
            },
            {
              "attr": "property>0>treeTable-ui1>a:rowsExtraUserInfo",
              "name": ".rowsExtraUserInfo",
              "valueType": "ObjectArray",
              "defaultValue": [],
              "description": "行对应的用户数据。\n<br>数组类型，索引与行序号对应。表格行\n<br>在点击、双击、操作按钮点击时，会更\n<br>新当前属性值，并且在对外连线触发中\n<br>传出。\n<br>对行的交互操作时，会将当前事件操作\n<br>带的数据填充到当前属性对应的索引位\n<br>置，且索引与当前行索引一致。",
              "group": "property>0>treeTable-ui1"
            },
            {
              "attr": "property>0>treeTable-ui1>a:userData",
              "name": ".用户数据",
              "valueType": "ObjectArray",
              "defaultValue": [],
              "description": "用户数据。",
              "group": "property>0>treeTable-ui1"
            },
            {
              "attr": "property>0>treeTable-ui1>a:checkIndexsGet",
              "name": ".checkIndexsGet",
              "valueType": "ObjectArray",
              "defaultValue": [],
              "description": "选中的行序号列表。\n<br>只读属性，勾选的一行或多行数据，\n<br>以其行序号来填充本属性。",
              "group": "property>0>treeTable-ui1"
            },
            {
              "attr": "property>0>treeTable-ui1>a:onDatasLoaded",
              "name": ".onDatasLoaded",
              "valueType": "Function",
              "extraInfo": {
                "arguments": [
                  "data",
                  "gv",
                  "cache",
                  "value",
                  "extra"
                ]
              },
              "description": "当数据加载时对外触发。",
              "group": "property>0>treeTable-ui1"
            },
            {
              "attr": "property>0>treeTable-ui1>a:onClick",
              "name": ".点击事件",
              "valueType": "Function",
              "extraInfo": {
                "arguments": [
                  "data",
                  "gv",
                  "cache",
                  "rowData",
                  "button"
                ]
              },
              "description": "当单击时对外触发。",
              "group": "property>0>treeTable-ui1"
            },
            {
              "attr": "property>0>treeTable-ui1>a:onDoubleClick",
              "name": ".onDoubleClick",
              "valueType": "Function",
              "extraInfo": {
                "arguments": [
                  "data",
                  "gv",
                  "cache",
                  "rowData",
                  "button"
                ]
              },
              "description": "当双击时对外触发。",
              "group": "property>0>treeTable-ui1"
            },
            {
              "attr": "property>0>treeTable-ui1>a:onLastButtonClick",
              "name": ".onLastButtonClick",
              "valueType": "Function",
              "extraInfo": {
                "arguments": [
                  "data",
                  "gv",
                  "cache",
                  "value",
                  "extra"
                ]
              },
              "description": "当点击最后列按钮时对外触发。",
              "group": "property>0>treeTable-ui1"
            },
            {
              "attr": "property>0>treeTable-ui1>a:onLastButtonSelected",
              "name": ".onLastButtonSelected",
              "valueType": "Function",
              "extraInfo": {
                "arguments": [
                  "data",
                  "gv",
                  "cache",
                  "value",
                  "extra"
                ]
              },
              "description": "当选择最后按钮时对外触发。",
              "group": "property>0>treeTable-ui1"
            },
            {
              "attr": "property>0>treeTable-ui1>a:borderWidth",
              "name": ".边框宽度",
              "valueType": "Number",
              "defaultValue": 0,
              "description": "表格边框线宽度。\n<br>值为0时不可见。",
              "group": "property>0>treeTable-ui1"
            },
            {
              "attr": "property>0>treeTable-ui1>a:dataFilterFunc",
              "name": ".dataFilterFunc",
              "valueType": "Function",
              "extraInfo": {
                "arguments": [
                  "node",
                  "rObj",
                  "cObj",
                  "cIndex",
                  "value"
                ]
              },
              "description": "转换指定行列的显示内容。\n<br>过滤函数提供行列信息，可指定某一列，或者某一行的某一列\n<br>（单元格），根据内容判断返回指定的转换后的内容。\n<br>入参：\n<br>        \"node\"：组件对象\n<br>        \"rObj\",：行数据（图元对象）\n<br>        \"cObj\",：列定义\n<br>        \"cIndex\",：列索引\n<br>        \"value\"：当前值",
              "group": "property>0>treeTable-ui1"
            },
            {
              "attr": "property>0>check>a:selected",
              "name": ".选中",
              "valueType": "Boolean",
              "defaultValue": false,
              "description": "第一个勾选框是否选中。对于只有一个勾选框的情况下，获取和设置值更为简便。",
              "group": "property>0>check"
            },
            {
              "attr": "property>0>check>a:datas",
              "name": ".数据内容",
              "valueType": "ObjectArray",
              "defaultValue": [
                null
              ],
              "description": "勾选框组的数据，可以是单纯的列表比如['张三','李四','王五']，\n即列表的每个元素就是字符串，对应勾选框的显示文字。\n列表每个元素也可以是带有text、id字段的json对象，比如\n[{\"text\":\"张三\",\"id\":124},{\"text\":\"李四\",\"id\":53}]。text字段对应显示\n文字，id字段对应数据ID。勾选时，分别生成textValues、\nidsValues。\n注意，除了text、id字段组合，也支持name、value字段组合，\n此时将name当做text字段，value当做id字段来处理。",
              "group": "property>0>check"
            },
            {
              "attr": "property>0>check>a:textValues",
              "name": ".勾选项文字",
              "valueType": "StringArray",
              "defaultValue": [],
              "group": "property>0>check"
            },
            {
              "attr": "property>0>check>a:indexValues",
              "name": ".勾选项值",
              "valueType": "ObjectArray",
              "defaultValue": [],
              "group": "property>0>check"
            },
            {
              "attr": "property>0>check>a:idValues",
              "name": ".勾选项ID",
              "valueType": "StringArray",
              "defaultValue": [],
              "description": "名称对应的数据ID，通常由数据库查询返回。与indexValues、textValues用途类似，都是用来\n记录勾选的项，只是idValues记录的是数据ID（通常对应数据库中的主键），而另两个分别是\n显示的索引序号和显示的文字。\n",
              "group": "property>0>check"
            },
            {
              "attr": "property>0>check>a:disabled",
              "name": ".禁用",
              "valueType": "Boolean",
              "defaultValue": false,
              "description": "是否禁用。\n<br>勾选后用户无法操作，相当于只读。",
              "group": "property>0>check"
            },
            {
              "attr": "property>0>input-ui2>a:value",
              "name": ".值内容",
              "valueType": "Object",
              "defaultValue": "",
              "description": "当前值。\n<br>输入框的值。注意，运行时输入数字\n<br>默认会作为字符串。如果初始设定值\n<br>为数字类型（比如0），那么输入的字\n<br>符串形式的数字，会被转成数字。",
              "group": "property>0>input-ui2"
            },
            {
              "attr": "property>0>input-ui2>a:onChange",
              "name": ".值改变事件",
              "valueType": "Function",
              "extraInfo": {
                "arguments": [
                  "data",
                  "gv",
                  "cache",
                  "value"
                ]
              },
              "description": "变化事件函数。\n<br>默认为内容改变才触发，当勾选即时触发\n<br>（instantTrigger）时，输入时就会触发本\n<br>事件。",
              "group": "property>0>input-ui2"
            },
            {
              "attr": "property>0>input-ui2>a:instantTrigger",
              "name": ".即时触发",
              "valueType": "Boolean",
              "defaultValue": true,
              "description": "是否即时触发。\n<br>勾选后，输入时就会对外触发onChange变化事件。",
              "group": "property>0>input-ui2"
            },
            {
              "attr": "property>0>input-ui2>a:onEnter",
              "name": ".回车事件",
              "valueType": "Function",
              "extraInfo": {
                "arguments": [
                  "data",
                  "gv",
                  "cache",
                  "value"
                ]
              },
              "description": "回车事件。\n<br>输入完毕后回车触发，并且传入当前值。",
              "group": "property>0>input-ui2"
            },
            {
              "attr": "property>0>input-ui2>a:readOnly",
              "name": ".只读",
              "valueType": "Boolean",
              "defaultValue": false,
              "description": "是否只读。",
              "group": "property>0>input-ui2"
            },
            {
              "attr": "property>0>temp>s:text",
              "name": ".文字",
              "valueType": "String",
              "defaultValue": "TEXT",
              "extraInfo": null,
              "group": "property>0>temp"
            },
            {
              "attr": "property>0>func1>a:userData",
              "name": ".用户数据",
              "valueType": "ObjectArray",
              "group": "property>0>func1"
            },
            {
              "attr": "property>0>func1>a:output",
              "name": ".输出",
              "valueType": "Object",
              "defaultValue": {
                "a:datas": [],
                "a:checkSelected": null,
                "a:onCheck": null,
                "a:visibleFilterInput": "",
                "a:queryMatched": {
                  "datas": [],
                  "checkSelected": [],
                  "onCheck": null,
                  "visibleFilterInput": " ",
                  "queryMatched": [],
                  "lastItemRowsText": [],
                  "currentIdSelect": 4,
                  "dataComboType": []
                },
                "a:dataAdd": null,
                "a:dataComboType": [],
                "a:rowsExtraUserInfo": [],
                "a:userData": [],
                "a:checkIndexsGet": [],
                "a:borderWidth": 0,
                "a:checkMode": 1,
                "a:display": "",
                "a:popDirection": "right",
                "a:popBackground": "white",
                "a:popPadding": [
                  2,
                  2,
                  2,
                  2
                ],
                "a:popWidth": 400,
                "a:popHeight": 300,
                "a:popBorderColor": "rgb(51,51,51)",
                "a:popBorderWidth": 0,
                "a:popBorderRadius": 0,
                "a:popTriggerEvent": "hover",
                "a:columnFields": [],
                "a:currentClicked": null,
                "a:pureTipText": ""
              },
              "group": "property>0>func1"
            },
            {
              "attr": "property>0>func1>a:inputs",
              "name": ".输入（组）",
              "valueType": "ObjectArray",
              "defaultValue": {
                "a:datas": [],
                "a:checkSelected": null,
                "a:onCheck": null,
                "a:visibleFilterInput": "",
                "a:queryMatched": {
                  "datas": [],
                  "checkSelected": [],
                  "onCheck": null,
                  "visibleFilterInput": " ",
                  "queryMatched": [],
                  "lastItemRowsText": [],
                  "currentIdSelect": 4,
                  "dataComboType": []
                },
                "a:dataAdd": null,
                "a:dataComboType": [],
                "a:rowsExtraUserInfo": [],
                "a:userData": [],
                "a:checkIndexsGet": [],
                "a:borderWidth": 0,
                "a:checkMode": 1,
                "a:display": "",
                "a:popDirection": "right",
                "a:popBackground": "white",
                "a:popPadding": [
                  2,
                  2,
                  2,
                  2
                ],
                "a:popWidth": 400,
                "a:popHeight": 300,
                "a:popBorderColor": "rgb(51,51,51)",
                "a:popBorderWidth": 0,
                "a:popBorderRadius": 0,
                "a:popTriggerEvent": "hover",
                "a:columnFields": [],
                "a:currentClicked": null,
                "a:pureTipText": ""
              },
              "description": "用于接收函数参数输入，默认为数组格式，可以设置多个入参。\n<br>外部可以多条连线操作该属性，利用数组操作特性，在各自的连线操作\n<br>中bindControlsVal中设置对应的索引值，用来指定传入输入数组中指定\n<br>值，实现多参数传入。\n<br>\n注意，对于透明传递不做任何业务逻辑处理时，默认会将输入组的值直接输\n<br>出，默认以空（undefined）对外操作赋值，通常用于对外清空值。\n<br>此外，输入组长度为1时，将去掉数组后以元素本身值对外输出，比如\n<br>[1]、['hello']、[true]，['']会被当做1、'hello'、true、''输出。长度大于1的\n<br>输入组，对外输出则是正常的数组值。",
              "group": "property>0>func1"
            },
            {
              "attr": "property>0>func1>a:exec",
              "name": ".执行",
              "valueType": "Boolean",
              "defaultValue": false,
              "group": "property>0>func1"
            },
            {
              "attr": "property>0>ok>a:text",
              "name": ".文字",
              "valueType": "String",
              "defaultValue": "模拟确定",
              "group": "property>0>ok"
            },
            {
              "attr": "property>0>ok>a:onFormClick",
              "name": ".点击事件",
              "valueType": "Function",
              "extraInfo": {
                "arguments": [
                  "data",
                  "gv",
                  "cache",
                  "value",
                  "extra"
                ]
              },
              "group": "property>0>ok"
            },
            {
              "attr": "property>0>ok>a:userData",
              "name": ".用户数据",
              "valueType": "ObjectArray",
              "defaultValue": [],
              "description": "用户数据。",
              "group": "property>0>ok"
            }
          ],
          "snapshotURL": "symbols/develop/uiotos/arranged/controls/containers_icon/对话框.json",
          "renderHTML": "__ht__function(data, gv, cache) {return __dialog_ui(data,gv,cache);}",
          "width": 600,
          "height": 400,
          "interactive": true,
          "pixelPerfect": false,
          "comps": [],
          "uuid": "E16D855E-8527-4AA4-A8DA-458EB44946F0"
        },
        "position": {
          "x": -604.20115,
          "y": -30.82403
        },
        "width": 400,
        "height": 695
      },
      "s": {
        "interactive": true,
        "image.stretch": "uniform",
        "show": true,
        "property>0>treeTable-ui1>a:queryMatched": {
          "datas": [],
          "checkSelected": [],
          "onCheck": null,
          "visibleFilterInput": " ",
          "queryMatched": [],
          "lastItemRowsText": [],
          "currentIdSelect": 4,
          "dataComboType": []
        },
        "property>0>temp>s:text": {
          "datas": [],
          "checkSelected": [],
          "onCheck": null,
          "visibleFilterInput": " ",
          "queryMatched": [],
          "lastItemRowsText": [],
          "currentIdSelect": 4,
          "dataComboType": []
        },
        "property>0>input-ui2>a:value": "",
        "label.position": 14,
        "label.offset.x": -10,
        "label.offset.y": 0,
        "label.color": "rgb(61,61,61)",
        "note.font": "22px arial, sans-serif",
        "note.color": "rgb(212,0,0)",
        "note.background": "rgb(255,235,195)",
        "note.position": 3,
        "note.offset.x": 0,
        "note.offset.y": -5,
        "note.border.width": 10,
        "note.border.color": "rgb(255,235,195)",
        "note.opacity": 0,
        "note.align": "left",
        "note": "[dlg1] 组件源__convertor的属性a:_title，由于暴露到\n上层的绑定了formReset/formValue并有设定值且即将赋 \n值的与设定值相等，而属性定义并无默认值（undefined \n），这会导致赋值向下同步失败！                    ",
        "fullscreen.gap": 0
      },
      "a": {
        "display": "./property.json",
        "__loadingStatus": false,
        "symbol": "symbols/develop/uiotos/base/dialog-ui.json",
        "show": false,
        "hide": false,
        "modal": true,
        "closeButtonOnly": false,
        "bindControlsTag": [
          "treeTable-ui1",
          "treeTable-ui1"
        ],
        "bindControlsAttr": [
          "lastItemRowsText",
          "currentIdSelect"
        ],
        "bindControlsVal": [
          null,
          null
        ],
        "paramControlTag": [
          null,
          null
        ],
        "paramControlAttr": [
          null,
          "property>0>temp>s:text"
        ],
        "paramsGenerator": "__ht__function(data, val, index, node, oldVal, form, type) {//绑定组索引对应的函数处理，用来动态生成复杂的参数变量传入\r\nswitch(index){\r\n    case 0:\r\n        let choosedTexts = form[i.attr(form,'a:queryMatched')],\r\n            lastIndex = choosedTexts.length - 1;\r\n        let texttmp = choosedTexts[lastIndex],\r\n            sourceIdtmp = data.ca(i.np(i.attr(form,'property>0>temp>s:text')));\r\n\r\n        //240613，对于连线操作表单，不选择操作任何属性时，temp>s:text值默认是TEXT这个字符串！不做识别处理，会报错！\r\n        let notNumberType = !i.isStringNumber(sourceIdtmp);\r\n        if (notNumberType) {\r\n            if (!data.ca('checkSelected') || data.ca('checkSelected').length == 0) {\r\n                return; //240613，确实为未勾选任何操作属性的情况，直接return掉，不继续！\r\n            } else console.assert(0);\r\n        }\r\n        sourceIdtmp = Number(sourceIdtmp);\r\n\r\n        //如果选中节点，那么就是清除反向关联绑定\r\n        if(isArrayFn(texttmp)) texttmp = null;\r\n\r\n        /*230924，对话框的onCancel，点击取消时，会设置没有反向关联'onCancel'的操作值为~对外。\r\n        这里为了避免下面以为oldVal为array而报错！*/\r\n        if(val == '~' && oldVal == '~') return undefined;\r\n\r\n        /*240609，反向关联属性，为了不影响显示给用户的名称关联，这里把属性的关联直接应用操作到被操纵属性\r\n        连线属性树表的rowData中，原先索引0~3分别是翻译名、值、属性名、描述，现在在索引为4的地方，放上关联属性名（非翻译名）！*/\r\n        let currentClickedTmp = form['a:property>0>treeTable-ui1>a:currentClicked'],   //240621，有必要这样，因为可能是取消某个关联，此时选中为null。否则会导致无法取消、做空关联！\r\n            currentAttrRelatived = currentClickedTmp && currentClickedTmp.rowData[2],\r\n            sourceTargetAttrRowData = i.getTreeItemsById(node.ca('datas'),sourceIdtmp)[0].rowData;\r\n        sourceTargetAttrRowData[4] = currentAttrRelatived;\r\n\r\n        /*默认值填充为0，因为对于treeTable的a:lastItemRowsText，index为0的（首个元素）需要对应按钮组的索引\r\n        通常只有一个按钮时候索引为0，因此若a:lastItemRowsText为null时，通过默认值0，实现自动填充*/\r\n        return i.setIndexValue(oldVal,sourceIdtmp,texttmp,0);    \r\n    case 1:\r\n        break;\r\n    case 2:\r\n        break;\r\n    default:\r\n        break;\r\n}\r\n\r\nreturn val;}",
        "displaySaving": false,
        "titleText": "选择关联属性 btn1：",
        "onPageBinded": null,
        "isLoadingGet": false,
        "bindEvents": [
          "*",
          "onCancel",
          "onOk"
        ],
        "oldDynamicAttrs": [
          {
            "attr": "_bindEvents_2",
            "valueType": "MultiComboBox",
            "defaultValue": "*",
            "group": "bindEvents",
            "description": "连线索引[2]的触发事件过滤器，默认全部通过",
            "dynamicCreate": true
          },
          {
            "attr": "useAttrCORS",
            "valueType": "Boolean",
            "defaultValue": false,
            "description": "属性同源操作。\n                连线操作传递是否限定双方。比如有A/B/C/D/O五个组件，连线操作关系：\n                A→O、B→O、C→O、D→O，以及O→A、O→B、O→C、O→D，总结为\n                A、B、C、D分别与O有往返操作。\n                默认不勾选该属性时，A到D任何一个向O的连线操作，都不会影响到O自身\n                对A到D的下一步操作。勾选了该属性后，那么每次相邻的两次连线交互，\n                则会有同源选择性，比如A→O，下一步则O之会选择到A的操作即O→A。\n                同源操作通常用户多个组件共用一个配置弹窗的情况，比如上述A、B、C、D\n                相当于是四个同类型的组件，而O是公共的属性配置窗口，任何一个比如A点\n                击，可通过O弹窗显示属性，然后修改后将属性值回写到A，且并不会将值给\n                到其他几个组件，即便有连线在。\n                同源操作规则：当连线满足A/B→O.x，且有O.x→A/B时，即前一次组件A连线\n                操作O的x属性，那么，O对外触发且关联x属性值对外时，勾选了本属性同源\n                属性操作的前提下，将只会执行O.x→A，而忽略O.x→B/C等其他非A的图元组\n                件的连线操作。",
            "dynamicCreate": true
          }
        ],
        "innerLayoutMode": "fullScreen",
        "property>0>treeTable-ui1>a:datas": [],
        "property>0>treeTable-ui1>a:visibleFilterInput": "",
        "property>0>treeTable-ui1>a:queryMatched": {
          "datas": [],
          "checkSelected": [],
          "onCheck": null,
          "visibleFilterInput": " ",
          "queryMatched": [],
          "lastItemRowsText": [],
          "currentIdSelect": 4,
          "dataComboType": []
        },
        "property>0>treeTable-ui1>a:dataComboType": [],
        "property>0>treeTable-ui1>a:borderWidth": 0,
        "property>0>check>a:selected": false,
        "property>0>check>a:datas": [
          null
        ],
        "property>0>check>a:textValues": [],
        "property>0>check>a:indexValues": [],
        "property>0>check>a:idValues": [],
        "property>0>check>a:disabled": false,
        "property>0>input-ui2>a:value": "",
        "property>0>input-ui2>a:instantTrigger": true,
        "property>0>input-ui2>a:readOnly": false,
        "property>0>temp>s:text": "TEXT",
        "property>0>func1>a:inputs": {
          "a:datas": [],
          "a:checkSelected": null,
          "a:onCheck": null,
          "a:visibleFilterInput": "",
          "a:queryMatched": {
            "datas": [],
            "checkSelected": [],
            "onCheck": null,
            "visibleFilterInput": " ",
            "queryMatched": [],
            "lastItemRowsText": [],
            "currentIdSelect": 4,
            "dataComboType": []
          },
          "a:dataAdd": null,
          "a:dataComboType": [],
          "a:rowsExtraUserInfo": [],
          "a:userData": [],
          "a:checkIndexsGet": [],
          "a:borderWidth": 0,
          "a:checkMode": 1,
          "a:display": "",
          "a:popDirection": "right",
          "a:popBackground": "white",
          "a:popPadding": [
            2,
            2,
            2,
            2
          ],
          "a:popWidth": 400,
          "a:popHeight": 300,
          "a:popBorderColor": "rgb(51,51,51)",
          "a:popBorderWidth": 0,
          "a:popBorderRadius": 0,
          "a:popTriggerEvent": "hover",
          "a:columnFields": [],
          "a:currentClicked": null,
          "a:pureTipText": ""
        },
        "property>0>func1>a:exec": false,
        "property>0>ok>a:text": "模拟确定",
        "property>0>ok>a:userData": [],
        "innerBackground": "rgb(255,255,255)",
        "property>0>treeTable-ui1>a:checkSelected": [],
        "property>0>treeTable-ui1>a:dataAdd": null,
        "property>0>treeTable-ui1>a:rowsExtraUserInfo": [],
        "property>0>treeTable-ui1>a:userData": [],
        "property>0>treeTable-ui1>a:checkIndexsGet": [],
        "property>0>func1>a:output": {
          "a:datas": [],
          "a:checkSelected": null,
          "a:onCheck": null,
          "a:visibleFilterInput": "",
          "a:queryMatched": {
            "datas": [],
            "checkSelected": [],
            "onCheck": null,
            "visibleFilterInput": " ",
            "queryMatched": [],
            "lastItemRowsText": [],
            "currentIdSelect": 4,
            "dataComboType": []
          },
          "a:dataAdd": null,
          "a:dataComboType": [],
          "a:rowsExtraUserInfo": [],
          "a:userData": [],
          "a:checkIndexsGet": [],
          "a:borderWidth": 0,
          "a:checkMode": 1,
          "a:display": "",
          "a:popDirection": "right",
          "a:popBackground": "white",
          "a:popPadding": [
            2,
            2,
            2,
            2
          ],
          "a:popWidth": 400,
          "a:popHeight": 300,
          "a:popBorderColor": "rgb(51,51,51)",
          "a:popBorderWidth": 0,
          "a:popBorderRadius": 0,
          "a:popTriggerEvent": "hover",
          "a:columnFields": [],
          "a:currentClicked": null,
          "a:pureTipText": ""
        }
      }
    },
    {
      "c": "ht.Edge",
      "i": 110755,
      "p": {
        "name": "edge",
        "displayName": "0（edge2）",
        "toolTip": "<div id=\"config_tooltip\" style=\"font-size:12px;line-height:1.75em;letter-spacing:1px\">\n                                            关联绑定信息：<br>\n                                            <li style=\"list-style-type:disc;color:rgba(255,255,255,0.5);\">索引序号：0 | 总共2条</li>\n                                            <li style=\"list-style-type:disc;font-weight:bold;\">操作属性：末尾操作列文字@treeTable-ui1</li>\n                                            <li style=\"list-style-type:none;color:rgba(255,255,255,0.5)\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当前值：undefined</li>\n                                            <li style=\"list-style-type:disc;font-weight:bold\">关联属性：</li>\n                                            <li style=\"list-style-type:none;color:rgba(255,255,255,0.5)\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;关联值：undefined</li>\n                                            </div>",
        "parent": {
          "__i": 110754
        },
        "tag": "edge2",
        "source": {
          "__i": 110754
        },
        "target": {
          "__i": 110757
        }
      },
      "s": {
        "label": "",
        "edge.color": "#ECA292",
        "edge.type": "flex",
        "edge.gap": 16,
        "edge.width.absolute": true,
        "note.border.width": 0,
        "note.position": 7,
        "note.opacity": 0.85,
        "note.background": "#ECA292",
        "note.offset.x": 0,
        "note.offset.y": 0,
        "icons": {
          "symbols/demo/extra/basic/fromArrow2.json": {
            "position": 15,
            "keepOrien": true,
            "names": [
              "symbols/demo/extra/basic/fromArrow2.json"
            ]
          },
          "symbols/demo/extra/basic/toArrow.json": {
            "position": 19,
            "keepOrien": true,
            "width": 50,
            "height": 20,
            "names": [
              "symbols/demo/extra/basic/toArrow.json"
            ]
          }
        },
        "note": 0
      },
      "a": {
        "index": 0,
        "toolTipRaw": "<div id=\"config_tooltip\" style=\"font-size:12px;line-height:1.75em;letter-spacing:1px\">\n                                            关联绑定信息：<br>\n                                            <li style=\"list-style-type:disc;color:rgba(255,255,255,0.5);\">索引序号：0 | 总共2条</li>\n                                            <li style=\"list-style-type:disc;font-weight:bold;\">操作属性：末尾操作列文字@treeTable-ui1</li>\n                                            <li style=\"list-style-type:none;color:rgba(255,255,255,0.5)\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当前值：undefined</li>\n                                            <li style=\"list-style-type:disc;font-weight:bold\">关联属性：</li>\n                                            <li style=\"list-style-type:none;color:rgba(255,255,255,0.5)\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;关联值：undefined</li>\n                                            </div>"
      }
    },
    {
      "c": "ht.Edge",
      "i": 110756,
      "p": {
        "name": "edge",
        "displayName": "1（edge3）",
        "toolTip": "<div id=\"config_tooltip\" style=\"font-size:12px;line-height:1.75em;letter-spacing:1px\">\n                                            关联绑定信息：<br>\n                                            <li style=\"list-style-type:disc;color:rgba(255,255,255,0.5);\">索引序号：1 | 总共2条</li>\n                                            <li style=\"list-style-type:disc;font-weight:bold;\">操作属性：currentIdSelect@treeTable-ui1</li>\n                                            <li style=\"list-style-type:none;color:rgba(255,255,255,0.5)\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当前值：TEXT</li>\n                                            <li style=\"list-style-type:disc;font-weight:bold\">关联属性：property&gt;0&gt;temp&gt;文字@dlg1</li>\n                                            <li style=\"list-style-type:none;color:rgba(255,255,255,0.5)\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;关联值：undefined</li>\n                                            </div>",
        "parent": {
          "__i": 110754
        },
        "tag": "edge3",
        "source": {
          "__i": 110754
        },
        "target": {
          "__i": 110757
        }
      },
      "s": {
        "label": "",
        "edge.color": "#952224",
        "edge.type": "flex",
        "edge.gap": 16,
        "edge.width.absolute": true,
        "note.border.width": 0,
        "note.position": 7,
        "note.opacity": 0.85,
        "note.background": "#952224",
        "note.offset.x": 0,
        "note.offset.y": 0,
        "icons": {
          "symbols/demo/extra/basic/fromArrow2.json": {
            "position": 15,
            "keepOrien": true,
            "names": [
              "symbols/demo/extra/basic/fromArrow2.json"
            ]
          },
          "symbols/demo/extra/basic/toArrow.json": {
            "position": 19,
            "keepOrien": true,
            "width": 50,
            "height": 20,
            "names": [
              "symbols/demo/extra/basic/toArrow.json"
            ]
          }
        },
        "note": 1
      },
      "a": {
        "index": 1,
        "toolTipRaw": "<div id=\"config_tooltip\" style=\"font-size:12px;line-height:1.75em;letter-spacing:1px\">\n                                            关联绑定信息：<br>\n                                            <li style=\"list-style-type:disc;color:rgba(255,255,255,0.5);\">索引序号：1 | 总共2条</li>\n                                            <li style=\"list-style-type:disc;font-weight:bold;\">操作属性：currentIdSelect@treeTable-ui1</li>\n                                            <li style=\"list-style-type:none;color:rgba(255,255,255,0.5)\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当前值：TEXT</li>\n                                            <li style=\"list-style-type:disc;font-weight:bold\">关联属性：property&gt;0&gt;temp&gt;文字@dlg1</li>\n                                            <li style=\"list-style-type:none;color:rgba(255,255,255,0.5)\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;关联值：undefined</li>\n                                            </div>"
      }
    },
    {
      "c": "ht.Node",
      "i": 110757,
      "p": {
        "displayName": "treeTable-ui（treeTable-ui1）",
        "toolTip": "<p style='color:rgb(242,83,75);margin-top:5px;margin-bottom:5px;font-weight:bold;line-height:1.5em;'>已被布局，不允许拖动（shift+回车可解除）</p><span style='font-weight:bold;color:rgb(125,195,125)'>说明：</span><span style='color:rgb(125,195,125);line-height:1.8em;letter-spacing:1px;'>\n<br>查找中有空格时，只显示已勾选的，去掉空格可显示完整。</span>",
        "tag": "treeTable-ui1",
        "dataBindings": {
          "a": {
            "datas": {
              "id": "iotos.form",
              "func": "__ht__function formParser(rawData) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}",
              "idinfo": "",
              "isTplBinded": false
            },
            "checkSelected": {
              "id": "iotos.form",
              "func": "__ht__function formParser(rawData) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}",
              "idinfo": "",
              "isTplBinded": false
            },
            "onCheck": {
              "id": "iotos.form",
              "func": "__ht__function formParser(rawData) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}",
              "idinfo": "",
              "isTplBinded": false
            },
            "visibleFilterInput": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "__ht__function formParser(rawData) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "queryMatched": {
              "id": "iotos.form",
              "func": "__ht__function formParser(rawData) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}",
              "idinfo": "",
              "isTplBinded": false
            },
            "lastItemRowsText": {
              "id": "iotos.form",
              "func": "__ht__function formParser(rawData) {\r\n    try {\r\n        /********* TODO **********/\r\n        \r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}",
              "idinfo": "",
              "isTplBinded": false,
              "alias": ""
            },
            "currentIdSelect": {
              "id": "iotos.form",
              "func": "__ht__function formParser(rawData) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}",
              "idinfo": "",
              "isTplBinded": false,
              "alias": ""
            },
            "dataComboType": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "dataAdd": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "rowsExtraUserInfo": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "userData": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "checkIndexsGet": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "onDatasLoaded": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "onClick": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "onDoubleClick": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "onLastButtonClick": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "onLastButtonSelected": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "borderWidth": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "checkMode": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "_bindEvents_4": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "display": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popDirection": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popBackground": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popPadding": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popWidth": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popHeight": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popBorderColor": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popBorderWidth": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popBorderRadius": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popTriggerEvent": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "columnFields": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "currentClicked": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "pureTipText": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            }
          },
          "s": {}
        },
        "image": {
          "modified": "Fri Jun 14 2024 13:57:41 GMT+0800 (中国标准时间)",
          "dataBindings": [
            {
              "attr": "symbol",
              "valueType": "Image",
              "name": "symbol"
            },
            {
              "attr": "lastItems",
              "valueType": "StringArray",
              "defaultValue": [
                "查看",
                "添加",
                "删除"
              ],
              "description": "最后一列按钮。",
              "group": "功能",
              "name": "lastItems"
            },
            {
              "attr": "lastRootIgnored",
              "valueType": "NumberArray",
              "defaultValue": [
                2
              ],
              "description": "根节点按钮忽略项",
              "name": "lastRootIgnored"
            },
            {
              "attr": "lastNodeIgnored",
              "valueType": "NumberArray",
              "defaultValue": [
                0,
                2
              ],
              "description": "子节点按钮忽略项。",
              "name": "lastNodeIgnored"
            },
            {
              "attr": "lastChildIgnored",
              "valueType": "NumberArray",
              "defaultValue": [
                1
              ],
              "description": "末端子节点忽略项。",
              "name": "lastChildIgnored"
            },
            {
              "attr": "lastSingleIgnored",
              "valueType": "NumberArray",
              "description": "没有父子结构的节点忽略项。",
              "name": "lastSingleIgnored"
            },
            {
              "attr": "singleRootOrChild",
              "valueType": "Boolean",
              "defaultValue": false,
              "description": "默认根节点还是子节点。\n<br>对于没有下级节点的行，是作为根节点还\n<br>是末端子节点来处理。默认是作为根节点，\n<br>这对于按钮组来说有用，比如根节点不可\n<br>删除，末端子节点可删除这种情况。",
              "name": "singleRootOrChild"
            },
            {
              "attr": "lastItemRowsText",
              "valueType": "StringArray",
              "description": "末尾操作按钮显示文字。\n<br>通常操作按钮显示是一样的，比如删除、添加等。\n<br>也存有差别的情况，比如默认都是“选择”，点\n<br>击后改为“取消”，这样就要求每行对应显示不\n<br>一样。\n<br>本属性就是对于末尾列只有一个操作按钮的情况，\n<br>指定显示文字。数组格式，索引与行号依次对应。\n<br>默认为空或null时，按钮显示默认设置的文字。",
              "name": "lastItemRowsText"
            },
            {
              "attr": "selectAllSet",
              "valueType": "Boolean",
              "defaultValue": false,
              "description": "设置为全选。",
              "name": "selectAllSet"
            },
            {
              "attr": "expandAll",
              "valueType": "Boolean",
              "defaultValue": true,
              "description": "全部展开。",
              "name": "expandAll"
            },
            {
              "attr": "reload",
              "valueType": "Boolean",
              "defaultValue": false,
              "description": "重新加载。",
              "name": "reload"
            },
            {
              "attr": "rowsIdReset",
              "valueType": "Boolean",
              "defaultValue": false,
              "description": "重置行Id。",
              "name": "rowsIdReset"
            },
            {
              "attr": "datas",
              "valueType": "Object",
              "defaultValue": [
                {
                  "rowData": [
                    "23891212",
                    "南入口出入通道模块",
                    "南入口通道",
                    {
                      "type": "graphView",
                      "display": "displays/admin/uiotos/editor/widgets/cellGraphView.json"
                    },
                    [
                      {
                        "type": "image",
                        "icon": "symbols/demo/uiotos/icons/light/address-book.json"
                      },
                      {
                        "type": "image",
                        "icon": "symbols/demo/uiotos/icons/light/amp-guitar.json"
                      }
                    ],
                    "正常通行",
                    {
                      "type": "graphView",
                      "display": "displays/admin/uiotos/editor/widgets/cellGraphViewMutiple.json"
                    }
                  ],
                  "children": [
                    {
                      "rowData": [
                        "23891212",
                        "北入口通道出入模块",
                        "北入口通道",
                        {
                          "type": "graphView",
                          "display": "displays/admin/uiotos/editor/widgets/cellGraphView.json"
                        },
                        [
                          {
                            "type": "image",
                            "icon": "symbols/demo/uiotos/icons/light/ambulance.json"
                          },
                          {
                            "type": "image",
                            "icon": "symbols/demo/uiotos/icons/light/american-sign-language-interpreting.json"
                          },
                          {
                            "type": "image",
                            "icon": "symbols/demo/uiotos/icons/light/american-sign-language-interpreting.json"
                          },
                          {
                            "type": "image",
                            "icon": "symbols/demo/uiotos/icons/light/american-sign-language-interpreting.json"
                          }
                        ],
                        "正常"
                      ],
                      "children": [
                        [
                          "23891212",
                          "西门出入口",
                          "1号门",
                          {
                            "type": "graphView",
                            "display": "displays/admin/uiotos/editor/widgets/cellGraphView.json"
                          },
                          {
                            "type": "image",
                            "icon": "symbols/demo/uiotos/icons/light/address-book.json"
                          },
                          [
                            {
                              "type": "image",
                              "icon": "assets/demo/fcj/403db210783cba7d2720ac2852122342.png"
                            },
                            {
                              "type": "image",
                              "icon": "symbols/demo/uiotos/icons/light/address-book.json"
                            }
                          ],
                          "测试",
                          {
                            "type": "graphView",
                            "display": "displays/admin/uiotos/editor/widgets/cellGraphViewMutiple.json"
                          }
                        ],
                        [
                          "23891212",
                          "北入口通道出入模块",
                          "北入口通道",
                          {
                            "type": "graphView",
                            "display": "displays/admin/uiotos/editor/widgets/cellGraphView.json"
                          },
                          [
                            {
                              "type": "image",
                              "icon": "symbols/demo/uiotos/icons/light/amp-guitar.json"
                            },
                            {
                              "type": "image",
                              "icon": "symbols/demo/uiotos/icons/light/amp-guitar.json"
                            },
                            {
                              "type": "image",
                              "icon": "symbols/demo/uiotos/icons/light/amp-guitar.json"
                            },
                            {
                              "type": "image",
                              "icon": "symbols/demo/uiotos/icons/light/amp-guitar.json"
                            },
                            {
                              "type": "image",
                              "icon": "symbols/demo/uiotos/icons/light/american-sign-language-interpreting.json"
                            },
                            {
                              "type": "image",
                              "icon": "symbols/demo/uiotos/icons/light/american-sign-language-interpreting.json"
                            },
                            {
                              "type": "image",
                              "icon": "symbols/demo/uiotos/icons/light/american-sign-language-interpreting.json"
                            }
                          ],
                          "非法通行",
                          {
                            "type": "graphView",
                            "display": "displays/admin/uiotos/editor/widgets/cellGraphView.json"
                          }
                        ]
                      ]
                    }
                  ]
                },
                [
                  "23891212",
                  "西门出入口",
                  "1号门",
                  {
                    "type": "graphView",
                    "display": "displays/admin/uiotos/editor/widgets/cellGraphView.json"
                  },
                  {
                    "type": "image",
                    "icon": "symbols/demo/uiotos/icons/light/address-book.json"
                  },
                  [
                    {
                      "type": "image",
                      "icon": "assets/demo/fcj/403db210783cba7d2720ac2852122342.png"
                    },
                    {
                      "type": "image",
                      "icon": "symbols/demo/uiotos/icons/light/address-book.json"
                    }
                  ],
                  "测试",
                  {
                    "type": "graphView",
                    "display": "displays/admin/uiotos/editor/widgets/cellGraphViewMutiple.json"
                  }
                ],
                [
                  "23891212",
                  "1门出入口",
                  "2号门",
                  {
                    "type": "graphView",
                    "display": "displays/admin/uiotos/editor/widgets/cellGraphView.json"
                  },
                  {
                    "type": "image",
                    "icon": "symbols/demo/uiotos/icons/light/address-book.json"
                  },
                  [
                    {
                      "type": "image",
                      "icon": "assets/demo/fcj/403db210783cba7d2720ac2852122342.png"
                    },
                    {
                      "type": "image",
                      "icon": "symbols/demo/uiotos/icons/light/address-book.json"
                    }
                  ],
                  "测试2",
                  {
                    "type": "graphView",
                    "display": "displays/admin/uiotos/editor/widgets/cellGraphViewMutiple.json"
                  }
                ],
                [
                  "23891212",
                  "北入口通道出入模块",
                  "北入口通道",
                  {
                    "type": "graphView",
                    "display": "displays/admin/uiotos/editor/widgets/cellGraphView.json"
                  },
                  [
                    {
                      "type": "image",
                      "icon": "symbols/demo/uiotos/icons/light/amp-guitar.json"
                    },
                    {
                      "type": "image",
                      "icon": "symbols/demo/uiotos/icons/light/amp-guitar.json"
                    },
                    {
                      "type": "image",
                      "icon": "symbols/demo/uiotos/icons/light/amp-guitar.json"
                    },
                    {
                      "type": "image",
                      "icon": "symbols/demo/uiotos/icons/light/amp-guitar.json"
                    },
                    {
                      "type": "image",
                      "icon": "symbols/demo/uiotos/icons/light/american-sign-language-interpreting.json"
                    },
                    {
                      "type": "image",
                      "icon": "symbols/demo/uiotos/icons/light/american-sign-language-interpreting.json"
                    },
                    {
                      "type": "image",
                      "icon": "symbols/demo/uiotos/icons/light/american-sign-language-interpreting.json"
                    }
                  ],
                  "非法通行",
                  {
                    "type": "graphView",
                    "display": "displays/admin/uiotos/editor/widgets/cellGraphView.json"
                  }
                ],
                {
                  "rowData": [
                    "23891212",
                    "南入口出入通道模块",
                    "南入口通道",
                    {
                      "type": "graphView",
                      "display": "displays/admin/uiotos/editor/widgets/cellGraphView.json"
                    },
                    [
                      {
                        "type": "image",
                        "icon": "symbols/demo/uiotos/icons/light/address-book.json"
                      },
                      {
                        "type": "image",
                        "icon": "symbols/demo/uiotos/icons/light/amp-guitar.json"
                      }
                    ],
                    "正常通行",
                    {
                      "type": "graphView",
                      "display": "displays/admin/uiotos/editor/widgets/cellGraphViewMutiple.json"
                    }
                  ],
                  "children": [
                    {
                      "rowData": [
                        "23891212",
                        "北入口通道出入模块",
                        "北入口通道",
                        {
                          "type": "graphView",
                          "display": "displays/admin/uiotos/editor/widgets/cellGraphView.json"
                        },
                        [
                          {
                            "type": "image",
                            "icon": "symbols/demo/uiotos/icons/light/ambulance.json"
                          },
                          {
                            "type": "image",
                            "icon": "symbols/demo/uiotos/icons/light/american-sign-language-interpreting.json"
                          },
                          {
                            "type": "image",
                            "icon": "symbols/demo/uiotos/icons/light/american-sign-language-interpreting.json"
                          },
                          {
                            "type": "image",
                            "icon": "symbols/demo/uiotos/icons/light/american-sign-language-interpreting.json"
                          }
                        ],
                        "正常"
                      ],
                      "children": []
                    }
                  ]
                },
                [
                  "23891212",
                  "北入口通道出入模块",
                  "北入口通道",
                  {
                    "type": "graphView",
                    "display": "displays/admin/uiotos/editor/widgets/cellGraphView.json"
                  },
                  [
                    {
                      "type": "image",
                      "icon": "symbols/demo/uiotos/icons/light/ambulance.json"
                    },
                    {
                      "type": "image",
                      "icon": "symbols/demo/uiotos/icons/light/american-sign-language-interpreting.json"
                    },
                    {
                      "type": "image",
                      "icon": "symbols/demo/uiotos/icons/light/american-sign-language-interpreting.json"
                    },
                    {
                      "type": "image",
                      "icon": "symbols/demo/uiotos/icons/light/american-sign-language-interpreting.json"
                    }
                  ],
                  "正常"
                ]
              ],
              "description": "树表的数据。",
              "group": "数据",
              "name": "datas"
            },
            {
              "attr": "dataAdd",
              "valueType": "Object",
              "defaultValue": null,
              "description": "新添加的数据。",
              "name": "dataAdd"
            },
            {
              "attr": "idField",
              "valueType": "String",
              "defaultValue": "id",
              "description": "行数据的ID字段。\n<br>默认为“id”，可以指定其他。“checkSelected”属性以这里确定的ID字段，\n<br>存放勾选的记录列表。",
              "name": "idField"
            },
            {
              "attr": "columns",
              "valueType": "ObjectArray",
              "defaultValue": [
                {
                  "displayName": "序号"
                },
                {
                  "displayName": "人员姓名"
                },
                {
                  "displayName": "所属公司",
                  "editable": false,
                  "editorClass": "ht.ui.editor.StringEditor"
                },
                {
                  "displayName": "人员类型",
                  "editable": true,
                  "editorClass": "ht.ui.editor.StringEditor"
                },
                {
                  "displayName": "连接状态",
                  "drawCell": {}
                },
                {
                  "displayName": "设备名称",
                  "drawCell": {
                    "width": 25,
                    "height": null
                  }
                },
                {
                  "displayName": "通行照片",
                  "editable": true,
                  "drawCell": {
                    "width": null,
                    "height": null
                  }
                },
                {
                  "displayName": "运行状态",
                  "editable": true,
                  "drawCell": {}
                },
                {
                  "displayName": "操作"
                }
              ],
              "description": "表格列定义。\n<br>注意，在编辑器中，支持第一个元素以数组编辑，保存后自动展开\n<br>成数组；可以将长度调整减少成1，此时展开的数组会合并到第一个\n<br>元素以数组方式用于再次编辑调整，保存后继续展开。\n<br>其中数字数组，可以用字符串数组代替，这样数组就逗号间隔的形式\n<br>来合并成一个值在第一个元素中编辑。",
              "name": "columns"
            },
            {
              "attr": "columnWidths",
              "valueType": "StringArray",
              "defaultValue": [
                75,
                200,
                100,
                80,
                100,
                -0.65,
                -0.35,
                180,
                200
              ],
              "description": "列宽度。\n<br>如果大于1时，表明绝对像素宽度。比如200，表示当前列宽为200px。\n如果等于1时，除去所有设置了绝对宽度之外，表格组件剩余的总宽度作为当前列宽。\n如果大于-1且小于0时，除了绝对像素宽度外，剩余总宽度以当前值作为比例对应为\n当前列宽。比如-0.2，剩余宽度总和为100时，当前列宽为20。通常值负数的列，数值\n相加要为-1。",
              "name": "columnWidths"
            },
            {
              "attr": "columnFields",
              "valueType": "ObjectArray",
              "defaultValue": [],
              "description": "列的数据字段（非必需）。\n<br>等同于列定义属性columns中元素对象的name\n<br>字段，两处配置相互同。\n<br>一方面，可以实现[{key1:value1,key2:value2},\n<br>{},{}]类似格式填充表格数据。\n<br>另一方面，点击行时通过currentClick属性可对\n<br>外提供当前行key-value键值对结构的数据，便\n<br>于直接对其他页面做表单操作，实现详情展示。\n<br>此外，若有操作按钮列（lastItems属性有配置），\n<br>此时columnsFields同步到columns中name字段\n<br>的列为columnWidths列数减1。\n<br>注意，首元素对应表格的自增ID字段，通常为空\n<br>null，且对于工具函数转换查询数据到树表操作\n<br>datas属性时，并不需要操作本属性以同步字段，\n<br>会自动将字段右移一位同步给本属性，以对应树\n<br>表中除自增ID之外的各个数据字段。",
              "name": "columnFields"
            },
            {
              "attr": "fieldForCombo",
              "valueType": "String",
              "description": "树表数据的哪一列对应到下拉框显示，即属性dataComboType的\n<br>显示字段name就采用树表treeTable的那一列。值可以是列名称或者\n<br>列索引。其中数字会被当成索引处理，且列索引是从0开始（第0列属于ID序号列）。",
              "defaultValue": "1",
              "name": "fieldForCombo"
            },
            {
              "attr": "dataComboType",
              "valueType": "Object",
              "description": "树表数据的哪一列对应到下拉框显示，即属性dataComboType的\n<br>显示字段name就采用树表treeTable的那一列。值可以是列名称或者\n<br>列索引。其中数字会被当成索引处理，且列索引是从0开始（第0列属于ID序号列）。",
              "name": "dataComboType"
            },
            {
              "attr": "innerDisplays",
              "valueType": "ObjectArray",
              "defaultValue": [],
              "description": "单元格可能存在的内嵌页面。\n只读，从datas属性配置中自动提取显示出来。\n<br>格式如：\n<br>{\n<br>        cellPos: {\n<br>                rowId: 1, //行索引\n<br>                colId: 1 //列索引\n<br>        },\n<br>        display: \"displays/xxx.json\"\n<br>}",
              "name": "innerDisplays"
            },
            {
              "attr": "rowsExtraUserInfo",
              "valueType": "ObjectArray",
              "defaultValue": [],
              "description": "行对应的用户数据。\n<br>数组类型，索引与行序号对应。表格行\n<br>在点击、双击、操作按钮点击时，会更\n<br>新当前属性值，并且在对外连线触发中\n<br>传出。\n<br>对行的交互操作时，会将当前事件操作\n<br>带的数据填充到当前属性对应的索引位\n<br>置，且索引与当前行索引一致。",
              "name": "rowsExtraUserInfo"
            },
            {
              "attr": "userDataSelfInit",
              "valueType": "Boolean",
              "description": "初始化用户数据。",
              "name": "userDataSelfInit"
            },
            {
              "attr": "userData",
              "valueType": "ObjectArray",
              "defaultValue": [],
              "description": "用户数据。",
              "name": "userData"
            },
            {
              "attr": "useAttrCORS",
              "valueType": "Boolean",
              "defaultValue": false,
              "description": "连线操作和处理回写是否一致。\n                        比如多个文本框连线传值给相同对话框，弹窗修改\n                        后是否限定只能写到最新赋值过来的文本框。详见<a href='https://www.yuque.com/liuhuo-nc809/uiotos/fgi6dd7gado51acm#fFUbp' style=\"color:rgb(96,172,252)\"target=\"_blank\">同源属性操作</a>",
              "name": "useAttrCORS",
              "dynamicCreate": true
            },
            {
              "attr": "display",
              "valueType": "Image",
              "defaultValue": "",
              "description": "自定义页面地址。\n                可以是编辑器中的其他页面，也可以\n                是外部网页链接地址。",
              "group": "弹出框",
              "name": "display",
              "dynamicCreate": true
            },
            {
              "attr": "pureTipText",
              "valueType": "String",
              "defaultValue": "",
              "description": "提示文字。\n                    当专业用户属性中，提供display内嵌页属性，\n                    如果有配置，那么本属性设置无效，将以内嵌\n                    页显示为准。",
              "name": "pureTipText",
              "dynamicCreate": true
            },
            {
              "attr": "popDirection",
              "valueType": "SideDirection",
              "defaultValue": "right",
              "description": "提示显示位置。",
              "name": "popDirection",
              "dynamicCreate": true
            },
            {
              "attr": "popBackground",
              "valueType": "Color",
              "defaultValue": "white",
              "description": "箭头和背景色。",
              "name": "popBackground",
              "dynamicCreate": true
            },
            {
              "attr": "popPadding",
              "valueType": "NumberArray",
              "defaultValue": [
                2,
                2,
                2,
                2
              ],
              "description": "内间距。",
              "name": "popPadding",
              "dynamicCreate": true
            },
            {
              "attr": "popWidth",
              "valueType": "Number",
              "defaultValue": 400,
              "description": "弹出框宽度。",
              "name": "popWidth",
              "dynamicCreate": true
            },
            {
              "attr": "popHeight",
              "valueType": "Number",
              "defaultValue": 300,
              "description": "弹出框高度。",
              "name": "popHeight",
              "dynamicCreate": true
            },
            {
              "attr": "popBorderColor",
              "valueType": "Color",
              "defaultValue": "rgb(51,51,51)",
              "description": "边框线颜色。\n                    注意，是设置了边框宽度非0后的边框颜色。\n                    默认边框宽度属性为0时，实际上是白色并\n                    带有箭头指示的边框。本属性不用于修改默\n                    认边框色。",
              "name": "popBorderColor",
              "dynamicCreate": true
            },
            {
              "attr": "popBorderWidth",
              "valueType": "Number",
              "defaultValue": 0,
              "description": "边框线宽度。\n                    默认值为0，此时边框默认为白色并且带有\n                    箭头指示。当设置宽度后，颜色将取边框颜\n                    色属性的设置，并且不再有箭头指示。",
              "name": "popBorderWidth",
              "dynamicCreate": true
            },
            {
              "attr": "popBorderRadius",
              "valueType": "Number",
              "defaultValue": 0,
              "description": "边框线圆角。\n                    设置圆角线后，如果此前默认是白色边框带有\n                    指示箭头，那么将自动不可见，只对内容区域\n                    产生圆角。",
              "name": "popBorderRadius",
              "dynamicCreate": true
            },
            {
              "attr": "popTriggerEvent",
              "valueType": "MouseEvent",
              "defaultValue": "hover",
              "description": "触发方式。\n                支持鼠标移入、点击（按钮时）\n                两种触发提示的方式。",
              "name": "popTriggerEvent",
              "dynamicCreate": true
            },
            {
              "attr": "allRowsIdGet",
              "valueType": "NumberArray",
              "description": "获取所有行id。",
              "name": "allRowsIdGet"
            },
            {
              "attr": "allRowsIndexGet",
              "valueType": "NumberArray",
              "description": "获取所有行索引。",
              "name": "allRowsIndexGet"
            },
            {
              "attr": "colorFilterFunc",
              "valueType": "Function",
              "defaultValue": "__ht__function(node, rObj, cObj, cIndex, value) {//返回null则是配置的默认字体颜色\r\nreturn cIndex == 1 || cObj.getDisplayName() == '人员类型'? \r\n    contain(value,['异常','错误','故障','非法','北']) ? \r\n    'red' : 'green' : null}",
              "extraInfo": {
                "arguments": [
                  "node",
                  "rObj",
                  "cObj",
                  "cIndex",
                  "value"
                ]
              },
              "description": "指定行列文字的颜色。\n<br>过滤函数提供行列信息，可指定某一列，或者某一行的某一列\n<br>（单元格），根据内容判断返回指定的颜色。\n<br>入参：\n<br>        \"node\"：组件对象\n<br>        \"rObj\",：行数据\n<br>        \"cObj\",：列定义\n<br>        \"cIndex\",：列索引\n<br>        \"value\"：当前值",
              "name": "colorFilterFunc"
            },
            {
              "attr": "dataFilterFunc",
              "valueType": "Function",
              "defaultValue": "__ht__function(nodeData, rowObject, columnObject, colunmIndex, value) {return value; //默认不做任何转换}",
              "description": "转换指定行列的显示内容。\n<br>过滤函数提供行列信息，可指定某一列，或者某一行的某一列\n<br>（单元格），根据内容判断返回指定的转换后的内容。\n<br>入参：\n<br>        \"node\"：组件对象\n<br>        \"rObj\",：行数据（图元对象）\n<br>        \"cObj\",：列定义\n<br>        \"cIndex\",：列索引\n<br>        \"value\"：当前值",
              "extraInfo": {
                "arguments": [
                  "node",
                  "rObj",
                  "cObj",
                  "cIndex",
                  "value"
                ]
              },
              "name": "dataFilterFunc"
            },
            {
              "attr": "btnsFilterFunc",
              "valueType": "Function",
              "description": "操作按钮列过滤。\n<br>用于针对操作列中的按钮，提供当前行数据，自定义\n<br>按钮对象的操作，包括识别行数据的标记，对某个按钮进\n<br>行显示或隐藏等。\n<br> 无需返回，直接操作按钮对象即可。\n<br>入参：\n<br>        \"node\"：组件对象\n<br>        \"rObj\",：行数据\n<br>        \"bObj\",：按钮象组\n<br>        \"bIndex\",：按钮组中的索引",
              "extraInfo": {
                "arguments": [
                  "node",
                  "rObj",
                  "bObj",
                  "bIndex"
                ]
              },
              "name": "btnsFilterFunc"
            },
            {
              "attr": "showColumnIndex",
              "valueType": "Boolean",
              "defaultValue": false,
              "description": "展示列索引号。",
              "name": "showColumnIndex"
            },
            {
              "attr": "centerAlign",
              "valueType": "Boolean",
              "defaultValue": true,
              "description": "中心对齐。",
              "name": "centerAlign"
            },
            {
              "attr": "visibleFilterInput",
              "valueType": "Object",
              "defaultValue": "",
              "description": "行数据关键词过滤。\n<br>将所有行以及行的所有列的显示文字作为内容，\n<br>将当前属性内容作为关键词，按照过滤规则进\n<br>行匹配，匹配成功的行会显示，否则不显示，\n<br>以此实现表格行数据的关键词过滤。\n<br>过滤规则如下：\n<br>1）空格隔开的字符串，被识别为多个独立的关\n<br>键词，分别进行匹配，并且所有的都匹配到整体\n<br>才算匹配成功，相当于交集。\n<br>2）英文逗号隔开的字符串，也被识别为多个独\n<br>立的关键词，分别进行匹配，并且任一关键词匹\n<br>配到，那么整体都算匹配成功，相当于并集。\n<br>3）当前属性如果是字符串数组，那么被当做情\n<br>况1）来处理，即多个关键词交集。\n<br>4）关键词末尾为空格（以空格结束）时，将严\n<br>格匹配关键词字符串，内容中有包含字符且紧接\n<br>后面还有字符时，不被认作匹配。",
              "name": "visibleFilterInput"
            },
            {
              "attr": "checkMode",
              "valueType": "Level",
              "defaultValue": 0,
              "description": "勾选类型。",
              "name": "checkMode"
            },
            {
              "attr": "multiSelect",
              "valueType": "Boolean",
              "defaultValue": true,
              "description": "多项选择。",
              "name": "multiSelect"
            },
            {
              "attr": "currentIdSelect",
              "valueType": "PositiveNumber",
              "description": "当前选择的ID。",
              "name": "currentIdSelect"
            },
            {
              "attr": "currentClicked",
              "valueType": "Object",
              "description": "当前点击的行。\n<br>对象格式，包含了当前行的所有信息。注意，包括、单击、\n<br>双击、勾选、去勾选，并非单指勾选时。\n<br>对象包含字段kind和rowData，分别是事件类型和行数据对象。",
              "defaultValue": null,
              "name": "currentClicked"
            },
            {
              "attr": "checkCountGet",
              "valueType": "PositiveNumber",
              "description": "已勾选的行数。\n<br>只读属性，且勾选模式下生效。\n<br>注意，不包含节点，只统计没\n<br>有更下级节点的行中勾选的。",
              "defaultValue": 0,
              "name": "checkCountGet"
            },
            {
              "attr": "allRowCountGet",
              "valueType": "PositiveNumber",
              "description": "所有底层行数量。\n<br>只读属性。注意，不包含节点，只统计没\n<br>有更下级节点行的总数。",
              "defaultValue": 0,
              "name": "allRowCountGet"
            },
            {
              "attr": "checkSelected",
              "valueType": "ObjectArray",
              "defaultValue": [],
              "description": "选中的行ID列表。\n<br>注意，有别于只读属性只读属性checkIndexsGet\n<br>（选中的行序号列表），当前属性是指定的行数据ID\n<br>列表，其中数据ID取决于idField属性的配置。\n<br>此外，本属性的变化，会实时同步给只读的序号ID列\n<br>表属性。默认情况下，未设置行数据ID字段时，本属\n<br>性数据ID通常与行序号相同。\n<br>本属性的变化，也会与查询匹配属性queryMatched双\n<br>同步，不过行数据ID或序号不会重复，但是查询匹配字\n<br>符串可能会重复，尤其是有子节点的树表，在不同节点\n<br>下文字显示可以存在完全相同的，详见queryMatched。",
              "name": "checkSelected"
            },
            {
              "attr": "checkIndexsGet",
              "valueType": "ObjectArray",
              "defaultValue": [],
              "description": "选中的行序号列表。\n<br>只读属性，勾选的一行或多行数据，\n<br>以其行序号来填充本属性。",
              "name": "checkIndexsGet"
            },
            {
              "attr": "fieldQueryRely",
              "valueType": "String",
              "description": "字段查询依赖。",
              "name": "fieldQueryRely"
            },
            {
              "attr": "queryMatched",
              "valueType": "ObjectArray",
              "defaultValue": [],
              "description": "查询匹配项。\n<br>本属性用于设置或显示文字匹配的行数据项，通常与勾选项checkSelected属性双向同步，\n<br>分别是显示文字和数据ID。比如数据id为124，显示文字为'uiotos'，那么不论是在checkS-\n<br>elected中配置124，还是在本属性中配置'uiotos'，两个属性会双向同步，同时也会同步给\n<br>只读属性checkIndexsGet。\n<br>注意，行数据ID或序号不会重复，但是显示文字可能会重复，尤其是有上下级节点的树表\n<br>格式的数据，在不同的节点下，显示文字完全可能有重复的。此时需遵守以下规则：\n<br>1）当checkSelected属性中有配置了指定某个数据ID，而相同数据ID的还有其他项目且未\n<br>在该属性配置时，自动同步给queryMatched属性时，会有显示文字，但是文字对应的其他\n<br>数据项ID，并不会再同步会checkSelected，只会保持已有配置。这样可以避免一旦设置某\n<br>个数据项勾选，结果相同显示文字的也被自动勾选。\n<br>2）当checkSelected属性中没有queryMatched属性中配置文字对应的所有行数据项中的任\n<br>何一项，那么这些匹配到的数据项的行数据ID，都会自动同步追加到checkSelected属性中。\n<br>注意：本属性的设置，直接影响树表格行数据的勾选（如果有设置允许单选或多勾选），并\n<br>且对于节点不起作用，即运行时勾选节点，那么节点下的所有行数据都会被勾选，但目前在\n<br>属性设置中，不论是checkSelected还是queryMatched，设置节点无效，并不会对其下面\n<br>所有项自动勾选。",
              "name": "queryMatched"
            },
            {
              "attr": "treeLinedAttr2Id",
              "valueType": "Object",
              "description": "行keyURL与数据ID的键值对。\n<br>主要对于有多级节点的树表结构的数据，\n<br>最底层行（无更下级行）存在一个唯一\n<br>的字符串对应：从根节点一直往下到行\n<br>节点，每级的显示文字加上'>'符号组成\n<br>的字符串（也叫行keyURL）。\n<br>本属性是行keyURL与行数据id（非序号）\n<br>的对应关系组成的对象键值对。",
              "defaultValue": {},
              "name": "treeLinedAttr2Id"
            },
            {
              "attr": "useTreeLined",
              "valueType": "Boolean",
              "description": "采用节点链数据。\n<br>对于树表多级节点展开的情况，底层基础节点（无下级子节点）显示内容可以在\n<br>不同节点下重复，因此为了精准定位某行数据，用于勾选或者精确查找，提供了\n<br>本属性，当勾选后：\n<br>节点的显示文字逐层往开头加上级节点的文字，一直到根节点，默认以\">\"间隔隔\n<br>开，比如树节点如下：\n<br>行1： a -\n<br>行2：   &nbsp&nbsp&nbspb\n<br>行3：   &nbsp&nbsp&nbspc -\n<br>行4：   &nbsp&nbsp&nbsp&nbsp&nbsp&nbspd \n<br>示例中，底层子节点d的上级节点为c，再上级为a，因此实际上会将d的数据实际\n<br>以\"a>c>d\"来处理（也称作keyURL），主要对queryMatched属性和visibleFilterInput\n<br>属性有影响：\n<br>visibleFilterInput属性中，用带上节点显示keyURL形式的文字代替原本内容被检索。\n<br>queryMatched属性中，设置初始勾选，或者获取勾选的数据，此时本属性显示的不\n<br>是节点d的内容，而是其逐层带上节点后的keyURL形式的内容：“a>c>d”。",
              "name": "useTreeLined"
            },
            {
              "attr": "dragDropEnable",
              "valueType": "Boolean",
              "defaultValue": false,
              "description": "启用拖放。",
              "name": "dragDropEnable"
            },
            {
              "attr": "shadowBorder",
              "valueType": "NumberArray",
              "defaultValue": [
                0,
                0,
                8
              ],
              "group": "外观",
              "name": "shadowBorder"
            },
            {
              "attr": "shadowColor",
              "valueType": "Color",
              "defaultValue": "rgba(102,102,102,0.2)",
              "name": "shadowColor"
            },
            {
              "attr": "shadowEnabled",
              "valueType": "Boolean",
              "defaultValue": false,
              "name": "shadowEnabled"
            },
            {
              "attr": "lastColorsDefault",
              "valueType": "ColorArray",
              "defaultValue": [
                "rgb(55,125,255)",
                "rgb(55,125,255)",
                "rgb(242,83,75)"
              ],
              "description": "按钮的默认颜色。\n<br>这里的0、1、2分别与“lastItems”设置的按钮相对应。",
              "name": "lastColorsDefault"
            },
            {
              "attr": "lastColorsHover",
              "valueType": "ColorArray",
              "defaultValue": [
                "rgb(48,20,166)",
                "rgb(48,20,166)",
                "rgb(255,0,0)"
              ],
              "description": "悬停时按钮的颜色。",
              "name": "lastColorsHover"
            },
            {
              "attr": "lastColorsActive",
              "valueType": "ColorArray",
              "defaultValue": [
                "rgba(48,20,166,0.8)",
                "rgba(48,20,166,0.8)",
                "rgab(255,0,0,0.8)"
              ],
              "description": "点击时按钮的颜色。",
              "name": "lastColorsActive"
            },
            {
              "attr": "lastGap",
              "valueType": "Number",
              "defaultValue": 10,
              "description": "最后列按钮之间的间隙。",
              "name": "lastGap"
            },
            {
              "attr": "itemsGap",
              "valueType": "Number",
              "defaultValue": 10,
              "description": "树表中，图标之间的间隙。",
              "name": "itemsGap"
            },
            {
              "attr": "dropLineColor",
              "valueType": "Color",
              "defaultValue": "rgb(55,125,255)",
              "description": "落线颜色。",
              "name": "dropLineColor"
            },
            {
              "attr": "background",
              "valueType": "Color",
              "defaultValue": "rgb(255,255,255)",
              "description": "表格背景色。",
              "name": "background"
            },
            {
              "attr": "headerBackground",
              "valueType": "Color",
              "defaultValue": "rgb(247,247,247)",
              "description": "表格标题头背景色。",
              "name": "headerBackground"
            },
            {
              "attr": "rowBackground",
              "valueType": "ColorArray",
              "defaultValue": [
                "rgb(255,255,255)",
                "rgba(55,125,255,0.05)",
                "rgba(55,125,255,0.1)"
              ],
              "description": "行背景色。\n<br>颜色层叠自下往上为：表格背景色（background） →  行背景\n<br>色（rowBackground） → 行条纹背景色（stripeColors）。\n<br>其中行背景色和条纹背景色不包括无数据行的表格区域，表格背景\n<br>色则包含。\n<br>因此，若想要表格背景色整体透明/半透明，需要将三个上述三个颜\n<br>色都调整为透明或清理掉。若未勾选条纹背景色（rowStriped）\n<br>则无需设置对应的颜色。\n<br>此外，颜色数组通常表示默认、划过等。条纹背景色数组则依次表示\n<br>间隔的两行分别背景颜色。",
              "name": "rowBackground"
            },
            {
              "attr": "rowStriped",
              "valueType": "Boolean",
              "defaultValue": true,
              "description": "是否显示行条纹背景色。\n<br>勾选构，隔行显示不同的背景色，其中颜色配置在属性stripeColors，\n<br>颜色数组两个颜色分别是条纹的两种颜色。",
              "name": "rowStriped"
            },
            {
              "attr": "stripeColors",
              "valueType": "ColorArray",
              "defaultValue": [
                "rgba(245,245,245,1)",
                "rgba(255,255,255)"
              ],
              "description": "条纹颜色数组。\n<br>可以配置两个颜色（索引为0和1），用于条纹的两种颜色，\n<br>这样列表背景色就回有条纹颜色区别。如果没有条纹背景色\n那么显示的是行背景色（rowBackground），如果行背景色也\n没有，那么就显示表格背景色（background）。",
              "name": "stripeColors"
            },
            {
              "attr": "tableTextColor",
              "valueType": "ColorArray",
              "defaultValue": [
                "black",
                "rgb(64,64,64)"
              ],
              "description": "文字颜色数组。\n<br>第一个颜色（索引为0）为标题文字颜色，\n<br>第二个颜色（索引为1）为表格内容颜色。",
              "name": "tableTextColor"
            },
            {
              "attr": "treeNodeTextColor",
              "valueType": "ColorArray",
              "defaultValue": [
                "black",
                "black"
              ],
              "description": "树节点文字颜色。\n<br>索引0为无下级的节点文字颜色，索引1是作为父节点的文字颜色。\n<br>注意，如果本属性未配置，那么将默认采用tableTextColor属性索\n<br>引1的值。如果本属性索引1未配置，索引0有配置，那么节点颜色\n<br>将采用索引0的颜色。",
              "name": "treeNodeTextColor"
            },
            {
              "attr": "rowLineVisible",
              "valueType": "Boolean",
              "defaultValue": false,
              "description": "行之间边界线是否可见。",
              "name": "rowLineVisible"
            },
            {
              "attr": "columnLineVisible",
              "valueType": "Boolean",
              "defaultValue": true,
              "description": "列之间边界线是否可见。",
              "name": "columnLineVisible"
            },
            {
              "attr": "linesColor",
              "valueType": "Color",
              "defaultValue": "rgb(247,247,247)",
              "description": "行列线背景色。",
              "name": "linesColor"
            },
            {
              "attr": "borderColor",
              "valueType": "Color",
              "defaultValue": "rgb(235,235,235)",
              "name": "borderColor"
            },
            {
              "attr": "borderWidth",
              "valueType": "Number",
              "defaultValue": 0,
              "description": "表格边框线宽度。\n<br>值为0时不可见。",
              "name": "borderWidth"
            },
            {
              "attr": "borderRadius",
              "valueType": "PositiveNumber",
              "defaultValue": 3,
              "name": "borderRadius"
            },
            {
              "attr": "emptyDefaultIcon",
              "valueType": "Image",
              "defaultValue": "symbols/develop/uiotos/icons/common/empty2.json",
              "description": "当表格数据为空时的默认图标。",
              "name": "emptyDefaultIcon"
            },
            {
              "attr": "emptyIconOpacity",
              "valueType": "Opacity",
              "defaultValue": 1,
              "description": "当表格数据为空时，默认图标的透明度。",
              "name": "emptyIconOpacity"
            },
            {
              "attr": "emptyIconSizeScale",
              "valueType": "Percentage",
              "defaultValue": 0.6,
              "description": "当表格数据为空时，默认图标的大小。",
              "name": "emptyIconSizeScale"
            },
            {
              "attr": "rowHeight",
              "valueType": "PositiveNumber",
              "defaultValue": 35,
              "description": "行高。",
              "name": "rowHeight"
            },
            {
              "attr": "nodeExpandMode",
              "valueType": "ExpandMode",
              "description": "父节点的单击展开模式，分为不响应展开（noExpand）、\n<br>展开直接下一级（expandFirstLayer）、展开所有下级（expandAll）。",
              "defaultValue": "expandFirstLayer",
              "name": "nodeExpandMode"
            },
            {
              "attr": "headerHeight",
              "valueType": "PositiveNumber",
              "defaultValue": 40,
              "description": "表格头部高度。",
              "name": "headerHeight"
            },
            {
              "attr": "idColumnVisible",
              "valueType": "Boolean",
              "defaultValue": true,
              "description": "是否显示id列。",
              "name": "idColumnVisible"
            },
            {
              "attr": "copyTypeTextColor",
              "valueType": "Color",
              "defaultValue": "rgb(13,24,97)",
              "description": "复制类型文字颜色。",
              "name": "copyTypeTextColor"
            },
            {
              "attr": "hoverTextIcon",
              "valueType": "Image",
              "defaultValue": "symbols/develop/uiotos/icons/common/copy.json",
              "description": "悬停文本图标。",
              "name": "hoverTextIcon"
            },
            {
              "attr": "hoverTextIconText",
              "valueType": "String",
              "defaultValue": "复制",
              "description": "悬停文本图标文本。",
              "name": "hoverTextIconText"
            },
            {
              "attr": "hoverTextScale",
              "valueType": "Number",
              "defaultValue": 1,
              "description": "悬停文本大小。",
              "name": "hoverTextScale"
            },
            {
              "attr": "hoverTextIconSize",
              "valueType": "NumberArray",
              "defaultValue": [
                40,
                18
              ],
              "description": "悬停文本图标的大小。\n<br>索引0的数值代表图标的宽度。\n<br>索引1的数值代表图标的高度。",
              "name": "hoverTextIconSize"
            },
            {
              "attr": "hoverTextIconColor",
              "valueType": "Color",
              "defaultValue": "rgb(55,125,255)",
              "description": "悬停时文本图标的颜色。",
              "name": "hoverTextIconColor"
            },
            {
              "attr": "font",
              "valueType": "Font",
              "description": "字体。",
              "name": "font"
            },
            {
              "attr": "pageButtonCount",
              "valueType": "PositiveNumber",
              "defaultValue": 3,
              "description": "页码按钮数。",
              "name": "pageButtonCount"
            },
            {
              "attr": "headerVisible",
              "valueType": "Boolean",
              "defaultValue": true,
              "description": "是否显示头部。",
              "name": "headerVisible"
            },
            {
              "attr": "pagesBottomVisible",
              "valueType": "Boolean",
              "defaultValue": true,
              "description": "是否显示页码按钮。",
              "name": "pagesBottomVisible"
            },
            {
              "attr": "disableTooltip",
              "valueType": "Boolean",
              "name": "disableTooltip"
            },
            {
              "attr": "columnForTooltip",
              "valueType": "PositiveNumber",
              "defaultValue": -1,
              "description": "鼠标提示列。\n<br>默认-1，显示当前单元格数据。\n<br>设置指定索引值后，当前行对应列的文字，\n<br>用于鼠标悬停提示。\n<br>注意，这列通常只是数据列中存在，不在\n<br>当前表格中显示。",
              "name": "columnForTooltip"
            },
            {
              "attr": "toolTipCallback",
              "valueType": "Function",
              "description": "自定义表格行鼠标悬停提示回调函数。\n<br>参数说明：\n<br>data：当前表格组件图元对象\n<br>rowData：当然行各列数据\n<br>colIndex：当前单元格列索引\n<br>tipIndex：设置为提示列的索引\n<br>rowNode：当前行数据图元对象\n<br>注意：返回非空内容时，以这里\n<br>设置的为准。",
              "extraInfo": {
                "arguments": [
                  "data",
                  "gv",
                  "cache",
                  "rowData",
                  "colIndex",
                  "tipIndex",
                  "rowNode"
                ]
              },
              "defaultValue": "__ht__function(data, gv, cache, rowData, colIndex, tipIndex) {return '';}",
              "name": "toolTipCallback"
            },
            {
              "attr": "onClick",
              "valueType": "Function",
              "extraInfo": {
                "arguments": [
                  "data",
                  "gv",
                  "cache",
                  "rowData",
                  "button"
                ]
              },
              "description": "当单击时对外触发。",
              "group": "事件",
              "name": "onClick"
            },
            {
              "attr": "onDoubleClick",
              "valueType": "Function",
              "extraInfo": {
                "arguments": [
                  "data",
                  "gv",
                  "cache",
                  "rowData",
                  "button"
                ]
              },
              "description": "当双击时对外触发。",
              "name": "onDoubleClick"
            },
            {
              "attr": "onCheck",
              "valueType": "Function",
              "extraInfo": {
                "arguments": [
                  "data",
                  "gv",
                  "cache",
                  "selected"
                ]
              },
              "description": "当勾选时对外触发。",
              "name": "onCheck"
            },
            {
              "attr": "onDatasLoaded",
              "valueType": "Function",
              "extraInfo": {
                "arguments": [
                  "data",
                  "gv",
                  "cache",
                  "value",
                  "extra"
                ]
              },
              "description": "当数据加载时对外触发。",
              "name": "onDatasLoaded"
            },
            {
              "attr": "onLastButtonSelected",
              "valueType": "Function",
              "extraInfo": {
                "arguments": [
                  "data",
                  "gv",
                  "cache",
                  "value",
                  "extra"
                ]
              },
              "description": "当选择最后按钮时对外触发。",
              "name": "onLastButtonSelected"
            },
            {
              "attr": "onLastButtonClick",
              "valueType": "Function",
              "extraInfo": {
                "arguments": [
                  "data",
                  "gv",
                  "cache",
                  "value",
                  "extra"
                ]
              },
              "description": "当点击最后列按钮时对外触发。",
              "name": "onLastButtonClick"
            },
            {
              "attr": "bindControlsTag",
              "valueType": "StringArray",
              "group": "连线",
              "name": "bindControlsTag"
            },
            {
              "attr": "bindControlsAttr",
              "valueType": "StringArray",
              "name": "bindControlsAttr"
            },
            {
              "attr": "bindControlsVal",
              "valueType": "ObjectArray",
              "description": "静态值。也用作数组索引、JSON对象解析提取值用途。\n<br>一、静态值用途：\n<br>对常规类型的属性赋值且没有反向关联属性值，传入为数值时，不\n<br>会作为数组的索引，而会当成常量值对外赋值。此外，存在特殊值：\n<br>~和undefined表示过滤、不触发；null为默认值，表示传递默认表\n<br>单数据。编辑状态下清空后保存与设置null等价。\n<br>二、数组索引用途\n<br>情况1：被操作的组件属性原先值是数组时（包括空数组），会将\n<br>待输出的值作为被操作数组指定索引的值来传入，而不是整体覆盖。\n<br>情况2：如果要被操作的组件属性原先值不是数组，而且待输出的\n<br>值为数组类型并且长度也在索引范围内，那么会按照索引取自身数\n<br>组指定元素再对外输出。（如果想要取待输出索引值，赋值给被操\n<br>纵属性的指定索引，那么需要中间组件属性连线过渡以下，无法直\n<br>接操作）\n<br>情况3：如果要被操作的组件属性是数组，而且待输出的值也是数组\n<br>类型，此时当情况1来处理。\n<br>三、数据解析用途：\n<br>待输出的值为JSON对象时，用x.y.z这种以字符.或者>为间隔的方式\n<br>实现对JSON字段层次逐层定位，当是数组时x.0.y.1这种以数字的方\n<br>式来指定数组的某个索引。以此实现对任意结果JSON对象字段的定\n<br>位，获取结构内指定字段对应的值。",
              "name": "bindControlsVal"
            },
            {
              "attr": "paramControlTag",
              "valueType": "StringArray",
              "name": "paramControlTag"
            },
            {
              "attr": "paramControlAttr",
              "valueType": "StringArray",
              "name": "paramControlAttr"
            },
            {
              "attr": "paramsGenerator",
              "valueType": "Function",
              "defaultValue": "__ht__function(data, val, index, node,oldVal,form) {//绑定组索引对应的函数处理，用来动态生成复杂的参数变量传入\r\nswitch(index){\r\n    case 0:\r\n        break;\r\n    case 1:\r\n        break;\r\n    case 2:\r\n        break;\r\n    default:\r\n        break;\r\n}\r\n\r\nreturn val;}",
              "extraInfo": {
                "arguments": [
                  "data",
                  "val",
                  "index",
                  "node",
                  "oldVal",
                  "form",
                  "type"
                ]
              },
              "name": "paramsGenerator"
            }
          ],
          "snapshotURL": "symbols/develop/uiotos/arranged/controls/forms_icon/树表.json",
          "rotateAsClock": true,
          "renderHTML": "__ht__function(data, gv, cache) {return __treeTable_ui(data, gv, cache);}",
          "width": 1200,
          "height": 400,
          "fitSize": true,
          "interactive": true,
          "pixelPerfect": false,
          "comps": [],
          "uuid": "5B4AE9B5-8EF0-4EFC-8C89-7FCFCBA8E056"
        },
        "host": {
          "__i": 110753
        },
        "position": {
          "x": -13.84851,
          "y": -30.82403
        },
        "width": 387.32304,
        "height": 544.7602
      },
      "s": {
        "0": {
          "ensure>0>textArea-ui1>a:value": "确定删除？",
          "ensure>0>textArea-ui1>a:htmlContent": false,
          "ensure>0>datas>s:text": 7,
          "_parentId": null
        },
        "1": {
          "ensure>0>textArea-ui1>a:value": "确定删除？",
          "ensure>0>textArea-ui1>a:htmlContent": false,
          "ensure>0>datas>s:text": 7
        },
        "2": {
          "ensure>0>textArea-ui1>a:value": "确定删除？",
          "ensure>0>textArea-ui1>a:htmlContent": false,
          "ensure>0>datas>s:text": 7
        },
        "3": {
          "ensure>0>textArea-ui1>a:value": "确定删除？",
          "ensure>0>textArea-ui1>a:htmlContent": false,
          "ensure>0>datas>s:text": 7
        },
        "6": {
          "ensure>0>textArea-ui1>a:value": "确定删除？",
          "ensure>0>textArea-ui1>a:htmlContent": false,
          "ensure>0>datas>s:text": 7
        },
        "7": {
          "ensure>0>textArea-ui1>a:value": "确定删除？",
          "ensure>0>textArea-ui1>a:htmlContent": false,
          "ensure>0>datas>s:text": 7
        },
        "interactive": true,
        "image.stretch": "uniform",
        "layout.h": "leftright",
        "layout.v": "topbottom",
        "datas": [
          {
            "rowData": [
              "菏泽"
            ],
            "children": [
              [
                "火车站",
                [
                  {
                    "type": "image",
                    "icon": "http://cfg.aiotos.net/custom/uploads/1.png"
                  },
                  {
                    "type": "image",
                    "icon": "http://cfg.aiotos.net/custom/uploads/2.png"
                  }
                ]
              ],
              [
                "汽车站"
              ],
              [
                "山东临沂"
              ]
            ],
            "id": 1,
            "_parentId": null
          },
          {
            "rowData": [
              "青岛高铁"
            ],
            "children": [
              [
                "东广场",
                [
                  {
                    "type": "image",
                    "icon": "http://cfg.aiotos.net/custom/uploads/2.png"
                  },
                  {
                    "type": "image",
                    "icon": "http://cfg.aiotos.net/custom/uploads/1.png"
                  }
                ]
              ]
            ],
            "id": 5,
            "_parentId": null
          },
          {
            "rowData": [
              "测试"
            ],
            "children": [
              [
                "测试"
              ]
            ],
            "id": 7,
            "_parentId": null
          }
        ],
        "rowsIdReset": "1",
        "show": {
          "ensure>0>textArea-ui1>a:value": "确定删除？",
          "ensure>0>textArea-ui1>a:htmlContent": false,
          "ensure>0>datas>s:text": 7
        },
        "label.offset.x": -10,
        "label.rotation": null,
        "visibleFilterInput": "",
        "lastItemRowsText": [
          null
        ],
        "label.position": 14,
        "label.offset.y": 0,
        "label.color": "rgb(61,61,61)",
        "2d.movable": false
      },
      "a": {
        "0": {
          "ensure>0>textArea-ui1>a:value": "确定删除？",
          "ensure>0>textArea-ui1>a:htmlContent": false,
          "ensure>0>datas>s:text": 7,
          "_parentId": null
        },
        "1": {
          "ensure>0>textArea-ui1>a:value": "确定删除？",
          "ensure>0>textArea-ui1>a:htmlContent": false,
          "ensure>0>datas>s:text": 7
        },
        "2": {
          "ensure>0>textArea-ui1>a:value": "确定删除？",
          "ensure>0>textArea-ui1>a:htmlContent": false,
          "ensure>0>datas>s:text": 7
        },
        "3": {
          "ensure>0>textArea-ui1>a:value": "确定删除？",
          "ensure>0>textArea-ui1>a:htmlContent": false,
          "ensure>0>datas>s:text": 7
        },
        "6": {
          "ensure>0>textArea-ui1>a:value": "确定删除？",
          "ensure>0>textArea-ui1>a:htmlContent": false,
          "ensure>0>datas>s:text": 7
        },
        "7": {
          "ensure>0>textArea-ui1>a:value": "确定删除？",
          "ensure>0>textArea-ui1>a:htmlContent": false,
          "ensure>0>datas>s:text": 7
        },
        "lastItems": [
          "选择"
        ],
        "columns": [
          {
            "displayName": "序号"
          },
          {
            "displayName": "属性名"
          },
          {
            "displayName": "当前值"
          },
          {
            "displayName": "自身属性"
          }
        ],
        "columnWidths": [
          45,
          -0.7,
          -0.3,
          100
        ],
        "idColumnVisible": true,
        "centerAlign": true,
        "pagesBottomVisible": false,
        "headerVisible": true,
        "columnLineVisible": false,
        "lastIgnoredRoot": [
          1,
          2,
          3
        ],
        "lastIgnoredNode": [],
        "lastIgnoredChild": [
          0
        ],
        "lastColorsDefault": [
          "rgb(51,153,255)",
          "rgb(242,83,75)",
          "rgb(55,125,255)",
          "#910000"
        ],
        "lastColorsHover": [
          "#60ACFC",
          "rgb(212,0,0)",
          "#60ACFC",
          "rgb(242,83,75)"
        ],
        "lastColorsActive": [
          "rgba(96,172,252,0.8)",
          "#FF7C7C",
          "rgba(96,172,252,0.80)",
          "rgba(242,83,75,0.8)"
        ],
        "rowHeight": 35,
        "headerHeight": 45,
        "font": "12px arial, sans-serif",
        "lastGap": 0,
        "itemsGap": 5,
        "dataComboType": [],
        "singleItemAsRoot": false,
        "bindControlsTag": [
          "dlg1",
          "dlg1",
          "dlg1",
          "dlg1",
          "func1"
        ],
        "bindControlsAttr": [
          "show",
          "property>0>treeTable-ui1>a:queryMatched",
          "property>0>temp>s:text",
          "property>0>input-ui2>a:value",
          "exec"
        ],
        "bindControlsVal": [
          "1",
          null,
          null,
          " ",
          null
        ],
        "paramControlTag": [
          null,
          null,
          null,
          null,
          null
        ],
        "paramControlAttr": [
          null,
          null,
          null,
          null,
          "onLastButtonClick"
        ],
        "Edge3": "dlg1",
        "paramsGenerator": "__ht__function(data, val, index, node, oldVal, form, type) {//绑定组索引对应的函数处理，用来动态生成复杂的参数变量传入\r\nif(type != 'onLastButtonClick') return;\r\nlet rowId = form._row.rowId,\r\n    choosed = form['a:lastItemRowsText'][rowId];\r\nswitch(index){\r\n    case 0:\r\n        //240614，非常重要，需要获取下焦点，否则弹出的反向关联对话框的toolTip，提示还是下层对话框的！\r\n        node._uiView.requestFocus();    \r\n        break;\r\n    case 1:\r\n        return choosed == undefined ? [] : [choosed];\r\n    case 2:\r\n        return rowId;\r\n    case 3:\r\n        return choosed == undefined || choosed == 0 ? '' : choosed;\r\n    default:\r\n        break;\r\n}\r\n\r\nreturn val;}",
        "Edge4": "dialog-ui2",
        "Edge5": "dlg1",
        "Edge6": "dlg1",
        "Edge7": "dlg1",
        "showColumnIndex": false,
        "Edge10": null,
        "singleRootOrChild": false,
        "lastSingleIgnored": [],
        "lastRootIgnored": [
          0
        ],
        "lastNodeIgnored": [],
        "lastChildIgnored": [],
        "Edge12": null,
        "rowsIdReset": false,
        "Edge16": null,
        "Edge17": null,
        "Edge18": null,
        "background": "rgb(255,255,255)",
        "rowBackground": [
          "rgb(255,255,255)",
          "rgba(55,125,255,0.05)",
          "rgba(59,118,255,0.1)"
        ],
        "rowStriped": false,
        "tableTextColor": [
          "rgb(0,0,0)",
          "rgb(0,0,0)"
        ],
        "stripeColors": [
          "rgb(247,247,247)",
          "rgb(255,255,255)"
        ],
        "borderColor": "rgba(51,156,255,0.1)",
        "borderWidth": 0,
        "rowLineVisible": true,
        "Edge1": "treeTable-ui5",
        "show": {
          "ensure>0>textArea-ui1>a:value": "确定删除？",
          "ensure>0>textArea-ui1>a:htmlContent": false,
          "ensure>0>datas>s:text": 7
        },
        "checkMode": 4,
        "checkSelected": [],
        "onCheck": null,
        "visibleFilterInput": "",
        "treeObject": null,
        "queryMatched": [],
        "lastItemRowsText": "~",
        "rowsExtraInfo": null,
        "allRowsIdGet": [],
        "bindEvents": [
          "*",
          "onDatasLoaded",
          "onClick",
          "onDoubleClick",
          "onCheck",
          "onLastButtonClick",
          "onLastButtonSelected"
        ],
        "symbol": "symbols/develop/uiotos/arranged/controls/forms/06-表格或列表/树表.json",
        "oldDynamicAttrs": [],
        "nodeExpandMode": "expandFirstLayer",
        "expandAll": true,
        "datas": [],
        "innerDisplays": [],
        "treeLinedAttr2Id": {},
        "checkCountGet": 0,
        "allRowCountGet": 0,
        "_bindEvents_4-list": [
          "*",
          "onDatasLoaded",
          "onClick",
          "onDoubleClick",
          "onCheck",
          "onLastButtonClick",
          "onLastButtonSelected"
        ],
        "_bindEvents_4": "*",
        "currentIdSelect": "TEXT",
        "toolTipRaw": "<p style='color:rgb(242,83,75);margin-top:5px;margin-bottom:5px;font-weight:bold;line-height:1.5em;'>已被布局，不允许拖动（shift+回车可解除）</p><span style='font-weight:bold;color:rgb(125,195,125)'>说明：</span><span style='color:rgb(125,195,125);line-height:1.8em;letter-spacing:1px;'>\n<br>查找中有空格时，只显示已勾选的，去掉空格可显示完整。</span>",
        "dataFilterFunc": "__ht__function(node, rObj, cObj, cIndex, value) {return value; //默认不做任何转换}",
        "disableTooltip": false,
        "columnForTooltip": 3,
        "toolTipCallback": "__ht__function(data, gv, cache, rowData, colIndex, tipIndex, rowNode) {if(isArrayFn(rowData[0])) return undefined; //对于数组分组，鼠标划过不提示！\r\nif(colIndex == 1){\r\n    let descRaw = rowData[3],\r\n        desctmp = descRaw === undefined ? '（未注释）' : descRaw;\r\n    //240614，如果是keyURL，那么是全部的展开；如果非keyURL，那么就显示属性attr，而不是翻译名了！\r\n    return (_i.isKeyURL(rowData[0]) ? (rowData[0] + ' | ' + (rowData[2] ? rowData[2].split('>').at(-1) : '')) : rowData[2]) + '<br>' + '<span style=\"color:rgba(200,200,200,0.3)\">————————————————</span>' + '<br>' + desctmp;\r\n}else if(colIndex === 3){\r\n    let optButtonText = data.ca('lastItemRowsText')[rowNode.getId()];\r\n    return optButtonText ? optButtonText : '（未关联）';\r\n}else if(colIndex != 0){//索引0的列，也就是id列，放上去，显示注释就好！不要显示“空值”了！\r\n    let valtmp = rowData[colIndex - 1];\r\n    return valtmp === undefined ? '（空值）' : (typeof(valtmp) == 'object' ? i.replaceAll(JSON.stringify(valtmp,undefined,2),'\\n','<br>') : valtmp); //为了让undefined值也能显示，避免显示成注释了！\r\n}}",
        "hoverTextScale": 1
      }
    },
    {
      "c": "ht.Edge",
      "i": 110758,
      "p": {
        "displayName": "0（Edge3）",
        "toolTip": "0: show → false",
        "parent": {
          "__i": 110757
        },
        "tag": "Edge3",
        "source": {
          "__i": 110757
        },
        "target": {
          "__i": 110754
        }
      },
      "s": {
        "edge.color": "rgb(51,153,255)",
        "edge.type": "flex",
        "edge.gap": 16,
        "edge.width.absolute": true,
        "note.border.width": 0,
        "note.position": 7,
        "note.opacity": 0.85,
        "note.background": "rgb(51,153,255)",
        "note.offset.x": 0,
        "note.offset.y": 0,
        "icons": {
          "symbols/demo/extra/basic/fromArrow2.json": {
            "position": 15,
            "keepOrien": true,
            "names": [
              "symbols/demo/extra/basic/fromArrow2.json"
            ]
          },
          "symbols/demo/extra/basic/toArrow.json": {
            "position": 19,
            "keepOrien": true,
            "width": 30,
            "height": 15,
            "names": [
              "symbols/demo/extra/basic/toArrow.json"
            ]
          }
        },
        "note": 0,
        "label.position": 14,
        "label.offset.x": -10,
        "label.offset.y": 0,
        "label.color": "rgb(61,61,61)",
        "edge.width": 4
      },
      "a": {
        "index": 0
      }
    },
    {
      "c": "ht.Edge",
      "i": 110759,
      "p": {
        "displayName": "1（Edge5）",
        "toolTip": "1: property>0>treeTable-ui1>a:queryMatched → show",
        "parent": {
          "__i": 110757
        },
        "tag": "Edge5",
        "source": {
          "__i": 110757
        },
        "target": {
          "__i": 110754
        }
      },
      "s": {
        "edge.color": "#FF7C7C",
        "edge.type": "flex",
        "edge.gap": 16,
        "edge.width.absolute": true,
        "note.border.width": 0,
        "note.position": 7,
        "note.opacity": 0.85,
        "note.background": "#FF7C7C",
        "note.offset.x": 0,
        "note.offset.y": 0,
        "icons": {
          "symbols/demo/extra/basic/fromArrow2.json": {
            "position": 15,
            "keepOrien": true,
            "names": [
              "symbols/demo/extra/basic/fromArrow2.json"
            ]
          },
          "symbols/demo/extra/basic/toArrow.json": {
            "position": 19,
            "keepOrien": true,
            "width": 30,
            "height": 15,
            "names": [
              "symbols/demo/extra/basic/toArrow.json"
            ]
          }
        },
        "note": 1,
        "label.position": 14,
        "label.offset.x": -10,
        "label.offset.y": 0,
        "label.color": "rgb(61,61,61)",
        "edge.width": 3
      },
      "a": {
        "index": 1
      }
    },
    {
      "c": "ht.Edge",
      "i": 110760,
      "p": {
        "displayName": "2（Edge6）",
        "toolTip": "2: property>0>temp>s:text → TEXT",
        "parent": {
          "__i": 110757
        },
        "tag": "Edge6",
        "source": {
          "__i": 110757
        },
        "target": {
          "__i": 110754
        }
      },
      "s": {
        "edge.color": "rgb(0,199,7)",
        "edge.type": "flex",
        "edge.gap": 16,
        "edge.width.absolute": true,
        "note.border.width": 0,
        "note.position": 7,
        "note.opacity": 0.85,
        "note.background": "rgb(0,199,7)",
        "note.offset.x": 0,
        "note.offset.y": 0,
        "icons": {
          "symbols/demo/extra/basic/fromArrow2.json": {
            "position": 15,
            "keepOrien": true,
            "names": [
              "symbols/demo/extra/basic/fromArrow2.json"
            ]
          },
          "symbols/demo/extra/basic/toArrow.json": {
            "position": 19,
            "keepOrien": true,
            "width": 30,
            "height": 15,
            "names": [
              "symbols/demo/extra/basic/toArrow.json"
            ]
          }
        },
        "note": 2,
        "label.position": 14,
        "label.offset.x": -10,
        "label.offset.y": 0,
        "label.color": "rgb(61,61,61)"
      },
      "a": {
        "index": 2
      }
    },
    {
      "c": "ht.Edge",
      "i": 110761,
      "p": {
        "displayName": "3（Edge7）",
        "toolTip": "3: property>0>input-ui2>a:value →  ",
        "parent": {
          "__i": 110757
        },
        "tag": "Edge7",
        "source": {
          "__i": 110757
        },
        "target": {
          "__i": 110754
        }
      },
      "s": {
        "edge.color": "rgb(212,0,0)",
        "edge.type": "flex",
        "edge.gap": 16,
        "edge.width.absolute": true,
        "note.border.width": 0,
        "note.position": 7,
        "note.opacity": 0.85,
        "note.background": "rgb(212,0,0)",
        "note.offset.x": 0,
        "note.offset.y": 0,
        "icons": {
          "symbols/demo/extra/basic/fromArrow2.json": {
            "position": 15,
            "keepOrien": true,
            "names": [
              "symbols/demo/extra/basic/fromArrow2.json"
            ]
          },
          "symbols/demo/extra/basic/toArrow.json": {
            "position": 19,
            "keepOrien": true,
            "width": 30,
            "height": 15,
            "names": [
              "symbols/demo/extra/basic/toArrow.json"
            ]
          }
        },
        "note": 3,
        "label.position": 14,
        "label.offset.x": -10,
        "label.offset.y": 0,
        "label.color": "rgb(61,61,61)",
        "edge.width": 1
      },
      "a": {
        "index": 3
      }
    },
    {
      "c": "ht.Edge",
      "i": 110762,
      "p": {
        "name": "edge",
        "displayName": "4（edge4）",
        "toolTip": "<div id=\"config_tooltip\" style=\"font-size:12px;line-height:1.75em;letter-spacing:1px\">\n                                                        关联绑定信息：<br>\n                                                        <li style=\"list-style-type:disc;color:rgba(255,255,255,0.5);\">索引序号：4 | 总共5条</li>\n                                                        <li style=\"list-style-type:disc;font-weight:bold;\">操作属性：执行@func1</li>\n                                                        <li style=\"list-style-type:none;color:rgba(255,255,255,0.5)\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当前值：undefined</li>\n                                                        <li style=\"list-style-type:disc;font-weight:bold\">关联属性：onLastButtonClick@treeTable-ui1</li>\n                                                        <li style=\"list-style-type:none;color:rgba(255,255,255,0.5)\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;关联值：undefined</li>\n                                                        <li style=\"list-style-type:disc;font-weight:bold;\">解析赋值：null</li>\n                                                        <li style=\"list-style-type:disc;color:rgba(255,255,255,0.5)\">触发事件：*</li>\n                                                        <li style=\"list-style-type:disc;\">注释：<span style=\"color:rgb(125,195,125)\">4。\n<br></span></li>\n                                                    </div>",
        "parent": {
          "__i": 110757
        },
        "tag": "edge4",
        "source": {
          "__i": 110757
        },
        "target": {
          "__i": 110768
        }
      },
      "s": {
        "label": "",
        "edge.color": "rgb(81,91,61)",
        "edge.width": 4,
        "edge.type": "flex",
        "edge.gap": 16,
        "note.border.width": 0,
        "note.position": 7,
        "note.font": "14px arial, sans-serif",
        "note.opacity": 0.75,
        "label.opacity": 0,
        "note.background": "rgb(81,91,61)",
        "note.offset.x": 0,
        "note.offset.y": 0,
        "icons": {
          "symbols/demo/extra/basic/fromArrow2.json": {
            "position": 15,
            "keepOrien": true,
            "names": [
              "symbols/demo/extra/basic/fromArrow2.json"
            ]
          },
          "symbols/demo/extra/basic/toArrow.json": {
            "position": 19,
            "keepOrien": true,
            "width": 50,
            "height": 20,
            "names": [
              "symbols/demo/extra/basic/toArrow.json"
            ]
          }
        },
        "note": 4
      },
      "a": {
        "index": 4,
        "toolTipRaw": "<div id=\"config_tooltip\" style=\"font-size:12px;line-height:1.75em;letter-spacing:1px\">\n                                                        关联绑定信息：<br>\n                                                        <li style=\"list-style-type:disc;color:rgba(255,255,255,0.5);\">索引序号：4 | 总共5条</li>\n                                                        <li style=\"list-style-type:disc;font-weight:bold;\">操作属性：执行@func1</li>\n                                                        <li style=\"list-style-type:none;color:rgba(255,255,255,0.5)\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当前值：undefined</li>\n                                                        <li style=\"list-style-type:disc;font-weight:bold\">关联属性：onLastButtonClick@treeTable-ui1</li>\n                                                        <li style=\"list-style-type:none;color:rgba(255,255,255,0.5)\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;关联值：undefined</li>\n                                                        <li style=\"list-style-type:disc;font-weight:bold;\">解析赋值：null</li>\n                                                        <li style=\"list-style-type:disc;color:rgba(255,255,255,0.5)\">触发事件：*</li>\n                                                        <li style=\"list-style-type:disc;\">注释：<span style=\"color:rgb(125,195,125)\">4。\n<br></span></li>\n                                                    </div>"
      }
    },
    {
      "c": "ht.Node",
      "i": 110763,
      "p": {
        "displayName": "input-ui（input-ui2）",
        "toolTip": "<p style='color:rgb(242,83,75);margin-top:5px;margin-bottom:5px;font-weight:bold;line-height:1.5em;'>已被布局，不允许拖动（shift+回车可解除）</p>",
        "tag": "input-ui2",
        "dataBindings": {
          "a": {
            "value": {
              "id": "iotos.form",
              "func": "__ht__function formParser(rawData) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}",
              "idinfo": "",
              "isTplBinded": false
            },
            "onChange": {
              "id": "iotos.form",
              "func": "__ht__function formParser(rawData) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}",
              "idinfo": "",
              "isTplBinded": false
            },
            "instantTrigger": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "onEnter": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "readOnly": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "initialTrigger": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "display": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popDirection": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popBackground": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popPadding": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popWidth": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popHeight": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popBorderColor": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popBorderWidth": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popBorderRadius": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popTriggerEvent": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            }
          }
        },
        "image": {
          "modified": "Fri Feb 16 2024 09:48:58 GMT+0800 (中国标准时间)",
          "dataBindings": [
            {
              "attr": "symbol",
              "valueType": "Image",
              "group": "功能（关键）",
              "description": "组件源（备选）。\n<br>当组件源（image）为非字符串格式，显示\n<br>[Object]时，可以通过这里备选地址，双击\n<br>打开组件配置。",
              "name": "symbol"
            },
            {
              "attr": "fixedHeight",
              "valueType": "PositiveNumber",
              "defaultValue": 35,
              "description": "固定高度。\n<br>部分组件比如下拉框以及这里的输入框，拖拽或布局时，\n<br>高度默认会保持不变，只是宽度能够变化。高度可以在\n<br>当前页面全局自定义，也能通过当前属性对当个组件设\n<br>定。全局设置为页面的公共属性组中的“组件默认固定高\n<br>度”属性。",
              "name": "fixedHeight"
            },
            {
              "attr": "activeBorderColor",
              "valueType": "Color",
              "defaultValue": "rgb(51,153,255)",
              "description": "激活时边框颜色。\n<br>通常是选中输入状态时的边框色。",
              "name": "activeBorderColor"
            },
            {
              "attr": "background",
              "valueType": "Color",
              "description": "背景颜色。",
              "name": "background"
            },
            {
              "attr": "readOnlyBackground",
              "valueType": "Color",
              "defaultValue": "rgb(247,247,247)",
              "description": "只读时的背景颜色。\n<br>注意，区别于禁用（暂未开放配置）。",
              "name": "readOnlyBackground"
            },
            {
              "attr": "iconPath",
              "valueType": "Image",
              "defaultValue": "symbols/demo/uiotos/icons/light/search.json",
              "description": "图标地址。\n<br>输入框默左侧为“搜索”图标。",
              "name": "iconPath"
            },
            {
              "attr": "iconColor",
              "valueType": "Color",
              "defaultValue": "rgb(213,213,213)",
              "description": "输入框图标颜色。\n<br>对于内置部件中通过工具转换成的图标，\n<br>为支持动态修改背景颜色的矢量形式。",
              "name": "iconColor"
            },
            {
              "attr": "iconType",
              "valueType": "Level",
              "defaultValue": 1,
              "description": "图标类型。\n<br>相同名称图标的不同风格，已弃用，\n<br>当前属性目前作为备用。",
              "name": "iconType"
            },
            {
              "attr": "iconSize",
              "valueType": "NumberArray",
              "defaultValue": [
                20,
                15
              ],
              "description": "图标尺寸。\n<br>数组形式，索引依次为宽度、高度值。",
              "name": "iconSize"
            },
            {
              "attr": "iconTextGap",
              "valueType": "Number",
              "defaultValue": 5,
              "description": "图标文字间距。",
              "name": "iconTextGap"
            },
            {
              "attr": "hoverIcon",
              "valueType": "Image",
              "description": "鼠标滑过时的图标。",
              "name": "hoverIcon"
            },
            {
              "attr": "borderRadius",
              "valueType": "Number",
              "defaultValue": 3,
              "description": "边框圆角。",
              "name": "borderRadius"
            },
            {
              "attr": "borderWidth",
              "valueType": "Number",
              "defaultValue": 1,
              "description": "边框宽度。",
              "name": "borderWidth"
            },
            {
              "attr": "borderColor",
              "valueType": "Color",
              "defaultValue": "rgb(213,213,213)",
              "description": "边框颜色。",
              "name": "borderColor"
            },
            {
              "attr": "font",
              "valueType": "Font",
              "description": "字体。",
              "name": "font"
            },
            {
              "attr": "readOnly",
              "valueType": "Boolean",
              "defaultValue": false,
              "description": "是否只读。",
              "name": "readOnly"
            },
            {
              "attr": "placeholder",
              "valueType": "Object",
              "defaultValue": "请输入",
              "description": "未输入时默认占位符文字。",
              "name": "placeholder"
            },
            {
              "attr": "color",
              "valueType": "Color",
              "defaultValue": "rgb(0,0,0)",
              "description": "文字颜色。",
              "name": "color"
            },
            {
              "attr": "labelColor",
              "valueType": "Color",
              "defaultValue": "rgb(0,0,0)",
              "description": "标签文字颜色。",
              "name": "labelColor"
            },
            {
              "attr": "labelText",
              "valueType": "String",
              "defaultValue": "标签",
              "description": "标签文字。",
              "name": "labelText"
            },
            {
              "attr": "gap",
              "valueType": "PositiveNumber",
              "defaultValue": 0,
              "description": "标签与组件的间距。\n<br>注意，仅在标签内嵌模式（layoutVertical）下，\n<br>改配置参数才有用。",
              "name": "gap"
            },
            {
              "attr": "layoutVertical",
              "valueType": "Boolean",
              "defaultValue": false,
              "description": "标签与组件的布局模式。\n<br>水平左右，或者垂直上下。",
              "name": "layoutVertical"
            },
            {
              "attr": "labelEmbeded",
              "valueType": "Boolean",
              "defaultValue": false,
              "description": "标签是否内嵌。\n<br>不内嵌时，组件的宽度不包含标签。\n<br>选择内嵌时，组件的宽度包含标签文字宽度。",
              "name": "labelEmbeded"
            },
            {
              "attr": "type",
              "valueType": "FormType",
              "defaultValue": "text",
              "description": "输入框表单类型。\n<br>包括密码、文本等类型。",
              "name": "type"
            },
            {
              "attr": "instantTrigger",
              "valueType": "Boolean",
              "defaultValue": true,
              "description": "是否即时触发。\n<br>勾选后，输入时就会对外触发onChange变化事件。",
              "name": "instantTrigger"
            },
            {
              "attr": "initialTrigger",
              "valueType": "Boolean",
              "defaultValue": false,
              "description": "初始触发连线操作。\n<br>默认不勾选，勾选后初始加载值时，如果对外有连线，\n<br>并且初始值为非空时，也会触发对外的赋值连线操作。",
              "name": "initialTrigger"
            },
            {
              "attr": "emptyTrigger",
              "valueType": "Boolean",
              "defaultValue": false,
              "name": "emptyTrigger"
            },
            {
              "attr": "value",
              "valueType": "Object",
              "defaultValue": "",
              "description": "当前值。\n<br>输入框的值。注意，运行时输入数字\n<br>默认会作为字符串。如果初始设定值\n<br>为数字类型（比如0），那么输入的字\n<br>符串形式的数字，会被转成数字。",
              "name": "value"
            },
            {
              "attr": "bindControlsTag",
              "valueType": "StringArray",
              "group": "bindControls",
              "description": "操作的目标组件（标签）。\n<br>连线A → B，那么B就是目标组件。",
              "name": "bindControlsTag"
            },
            {
              "attr": "bindControlsAttr",
              "valueType": "StringArray",
              "description": "操作目标组件的属性。\n<br>比如A.x→B.y时，x就是当前的关联\n<br>属性，y即为操作属性，A的x属性值\n<br>通过连线赋值给B的y属性。",
              "name": "bindControlsAttr"
            },
            {
              "attr": "bindControlsVal",
              "valueType": "ObjectArray",
              "description": "静态值。也用作数组索引、JSON对象解析提取值用途。\n<br>一、静态值用途：\n<br>对常规类型的属性赋值且没有反向关联属性值，传入为数值时，不\n<br>会作为数组的索引，而会当成常量值对外赋值。此外，存在特殊值：\n<br>~和undefined表示过滤、不触发；null为默认值，表示传递默认表\n<br>单数据。编辑状态下清空后保存与设置null等价。\n<br>二、数组索引用途\n<br>情况1：被操作的组件属性原先值是数组时（包括空数组），会将\n<br>待输出的值作为被操作数组指定索引的值来传入，而不是整体覆盖。\n<br>情况2：如果要被操作的组件属性原先值不是数组，而且待输出的\n<br>值为数组类型并且长度也在索引范围内，那么会按照索引取自身数\n<br>组指定元素再对外输出。（如果想要取待输出索引值，赋值给被操\n<br>纵属性的指定索引，那么需要中间组件属性连线过渡以下，无法直\n<br>接操作）\n<br>情况3：如果要被操作的组件属性是数组，而且待输出的值也是数组\n<br>类型，此时当情况1来处理。\n<br>三、数据解析用途：\n<br>待输出的值为JSON对象时，用x.y.z这种以字符.或者>为间隔的方式\n<br>实现对JSON字段层次逐层定位，当是数组时x.0.y.1这种以数字的方\n<br>式来指定数组的某个索引。以此实现对任意结果JSON对象字段的定\n<br>位，获取结构内指定字段对应的值。",
              "name": "bindControlsVal"
            },
            {
              "attr": "paramControlTag",
              "valueType": "StringArray",
              "description": "操作关联的来源组件（标签）。\n<br>连线A → B，那么A就是来源组件。\n<br>注意，为空不用填或者填写A的标\n<br>签效果一样，也可以填入其他组件\n<br>的标签（非正常操作）。",
              "name": "paramControlTag"
            },
            {
              "attr": "paramControlAttr",
              "valueType": "StringArray",
              "description": "关联属性。\n<br>关联的来源组件的指定属性，比如\n<br>A.x→B.y时，x就是当前的关联属性，\n<br>y为操作属性，A的x属性值通过连线\n<br>赋值给B的y属性。",
              "name": "paramControlAttr"
            },
            {
              "attr": "paramsGenerator",
              "valueType": "Function",
              "defaultValue": "__ht__function(data, val, index, node,oldVal,form) {//绑定组索引对应的函数处理，用来动态生成复杂的参数变量传入\r\nswitch(index){\r\n    case 0:\r\n        break;\r\n    case 1:\r\n        break;\r\n    case 2:\r\n        break;\r\n    default:\r\n        break;\r\n}\r\n\r\nreturn val;}",
              "extraInfo": {
                "arguments": [
                  "data",
                  "val",
                  "index",
                  "node",
                  "oldVal",
                  "form"
                ]
              },
              "description": "操作过滤函数。\n<br>所有连线对外操作执行之前，都会经过该函数\n<br>过滤处理，通常无需操作。可以做自定义逻辑。\n<br>其中对相应索引index下直接return返回undefined\n<br>时，将忽略掉指定索引连线的执行触发。",
              "name": "paramsGenerator"
            },
            {
              "attr": "useAttrCORS",
              "valueType": "Boolean",
              "defaultValue": false,
              "description": "连线操作和处理回写是否一致。\n                        比如多个文本框连线传值给相同对话框，弹窗修改\n                        后是否限定只能写到最新赋值过来的文本框。详见<a href='https://www.yuque.com/liuhuo-nc809/uiotos/fgi6dd7gado51acm#fFUbp' style=\"color:rgb(96,172,252)\"target=\"_blank\">同源属性操作</a>",
              "name": "useAttrCORS",
              "dynamicCreate": true
            },
            {
              "attr": "onChange",
              "valueType": "Function",
              "extraInfo": {
                "arguments": [
                  "data",
                  "gv",
                  "cache",
                  "value"
                ]
              },
              "description": "变化事件函数。\n<br>默认为内容改变才触发，当勾选即时触发\n<br>（instantTrigger）时，输入时就会触发本\n<br>事件。",
              "name": "onChange"
            },
            {
              "attr": "onEnter",
              "valueType": "Function",
              "description": "回车事件。\n<br>输入完毕后回车触发，并且传入当前值。",
              "extraInfo": {
                "arguments": [
                  "data",
                  "gv",
                  "cache",
                  "value"
                ]
              },
              "name": "onEnter"
            },
            {
              "attr": "display",
              "name": "display",
              "valueType": "Image",
              "defaultValue": "",
              "description": "自定义页面地址。\n                可以是编辑器中的其他页面，也可以\n                是外部网页链接地址。",
              "group": "弹出框",
              "dynamicCreate": true
            },
            {
              "attr": "popDirection",
              "name": "popDirection",
              "valueType": "SideDirection",
              "defaultValue": "right",
              "description": "提示显示位置。",
              "dynamicCreate": true
            },
            {
              "attr": "popBackground",
              "name": "popBackground",
              "valueType": "Color",
              "defaultValue": "white",
              "description": "箭头和背景色。",
              "dynamicCreate": true
            },
            {
              "attr": "popPadding",
              "name": "padding",
              "valueType": "NumberArray",
              "defaultValue": [
                2,
                2,
                2,
                2
              ],
              "description": "内间距。",
              "dynamicCreate": true
            },
            {
              "attr": "popWidth",
              "name": "popWidth",
              "valueType": "Number",
              "defaultValue": 400,
              "description": "弹出框宽度。",
              "dynamicCreate": true
            },
            {
              "attr": "popHeight",
              "name": "popHeight",
              "valueType": "Number",
              "defaultValue": 300,
              "description": "弹出框高度。",
              "dynamicCreate": true
            },
            {
              "attr": "popBorderColor",
              "name": "popBorderColor",
              "valueType": "Color",
              "defaultValue": "rgb(51,51,51)",
              "description": "边框线颜色。\n                    注意，是设置了边框宽度非0后的边框颜色。\n                    默认边框宽度属性为0时，实际上是白色并\n                    带有箭头指示的边框。本属性不用于修改默\n                    认边框色。",
              "dynamicCreate": true
            },
            {
              "attr": "popBorderWidth",
              "name": "popBorderWidth",
              "valueType": "Number",
              "defaultValue": 0,
              "description": "边框线宽度。\n                    默认值为0，此时边框默认为白色并且带有\n                    箭头指示。当设置宽度后，颜色将取边框颜\n                    色属性的设置，并且不再有箭头指示。",
              "dynamicCreate": true
            },
            {
              "attr": "popBorderRadius",
              "name": "popBorderRadius",
              "valueType": "Number",
              "defaultValue": 0,
              "description": "边框线圆角。\n                    设置圆角线后，如果此前默认是白色边框带有\n                    指示箭头，那么将自动不可见，只对内容区域\n                    产生圆角。",
              "dynamicCreate": true
            },
            {
              "attr": "popTriggerEvent",
              "name": "popTriggerEvent",
              "valueType": "MouseEvent",
              "defaultValue": "hover",
              "description": "触发方式。\n                支持鼠标移入、点击（按钮时）\n                两种触发提示的方式。",
              "dynamicCreate": true
            }
          ],
          "snapshotURL": "symbols/admin/uiotos/icons/snapshot/input.json",
          "renderHTML": "__ht__function(data, gv, cache) {return __input_ui(data, gv, cache);}",
          "width": 180,
          "height": 35,
          "scrollable": true,
          "interactive": true,
          "pixelPerfect": false,
          "comps": [],
          "uuid": "5E0FD203-866B-4F05-A2F7-27977F1C77D2"
        },
        "host": {
          "__i": 110753
        },
        "position": {
          "x": -28.38133,
          "y": -331.94392
        },
        "width": 282.75991,
        "height": 35
      },
      "s": {
        "interactive": true,
        "image.stretch": "uniform",
        "layout.v": "top",
        "layout.h": "leftright",
        "label": "查找",
        "label.position": 14,
        "label.offset.x": -10,
        "label.offset.y": 0,
        "label.color": "rgb(0,0,0)",
        "2d.movable": false
      },
      "a": {
        "iconPath": "symbols/demo/uiotos/icons/light/search.json",
        "gap": 0,
        "labelText": "查找",
        "labelColor": "rgb(0,0,0)",
        "borderRadius": 2,
        "instantTrigger": true,
        "bindControlsTag": [
          "treeTable-ui1"
        ],
        "onChange": null,
        "bindControlsAttr": [
          "visibleFilterInput"
        ],
        "bindControlsVal": [
          ""
        ],
        "paramControlTag": [
          null
        ],
        "paramControlAttr": [
          "value"
        ],
        "Edge2": "treeTable-ui1",
        "value": " ",
        "bindEvents": [
          "*",
          "onChange",
          "onClear",
          "onEnter"
        ],
        "symbol": "symbols/develop/uiotos/base/input-ui.json",
        "oldDynamicAttrs": [
          {
            "attr": "useAttrCORS",
            "valueType": "Boolean",
            "defaultValue": false,
            "description": "属性同源操作。\n                连线操作传递是否限定双方。比如有A/B/C/D/O五个组件，连线操作关系：\n                A→O、B→O、C→O、D→O，以及O→A、O→B、O→C、O→D，总结为\n                A、B、C、D分别与O有往返操作。\n                默认不勾选该属性时，A到D任何一个向O的连线操作，都不会影响到O自身\n                对A到D的下一步操作。勾选了该属性后，那么每次相邻的两次连线交互，\n                则会有同源选择性，比如A→O，下一步则O之会选择到A的操作即O→A。\n                同源操作通常用户多个组件共用一个配置弹窗的情况，比如上述A、B、C、D\n                相当于是四个同类型的组件，而O是公共的属性配置窗口，任何一个比如A点\n                击，可通过O弹窗显示属性，然后修改后将属性值回写到A，且并不会将值给\n                到其他几个组件，即便有连线在。\n                同源操作规则：当连线满足A/B→O.x，且有O.x→A/B时，即前一次组件A连线\n                操作O的x属性，那么，O对外触发且关联x属性值对外时，勾选了本属性同源\n                属性操作的前提下，将只会执行O.x→A，而忽略O.x→B/C等其他非A的图元组\n                件的连线操作。",
            "dynamicCreate": true
          }
        ],
        "placeholder": "关键词过滤。多词空格隔开取交集、逗号并集，包含逐级节点；关键词+空格精准匹配；单空格则显示已勾选项。",
        "toolTipRaw": "<p style='color:rgb(242,83,75);margin-top:5px;margin-bottom:5px;font-weight:bold;line-height:1.5em;'>已被布局，不允许拖动（shift+回车可解除）</p>"
      }
    },
    {
      "c": "ht.Edge",
      "i": 110764,
      "p": {
        "displayName": "0（Edge2）",
        "toolTip": "<div id=\"config_tooltip\" style=\"font-size:12px;line-height:1.75em;letter-spacing:1px\">\n                                            关联绑定信息：<br>\n                                            <li style=\"list-style-type:disc;color:rgba(255,255,255,0.5);\">索引序号：0 | 总共1条</li>\n                                            <li style=\"list-style-type:disc;font-weight:bold;\">操作属性：visibleFilterInput@treeTable-ui1</li>\n                                            <li style=\"list-style-type:none;color:rgba(255,255,255,0.5)\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当前值：</li>\n                                            <li style=\"list-style-type:disc;font-weight:bold\">关联属性：值内容@input-ui2</li>\n                                            <li style=\"list-style-type:none;color:rgba(255,255,255,0.5)\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;关联值：undefined</li>\n                                            </div>",
        "parent": {
          "__i": 110763
        },
        "tag": "Edge2",
        "source": {
          "__i": 110763
        },
        "target": {
          "__i": 110757
        }
      },
      "s": {
        "edge.color": "#680A95",
        "edge.type": "flex",
        "edge.gap": 16,
        "edge.width.absolute": true,
        "note.border.width": 0,
        "note.position": 7,
        "note.opacity": 0.85,
        "note.background": "#680A95",
        "note.offset.x": 0,
        "note.offset.y": 0,
        "icons": {
          "symbols/demo/extra/basic/fromArrow2.json": {
            "position": 15,
            "keepOrien": true,
            "names": [
              "symbols/demo/extra/basic/fromArrow2.json"
            ]
          },
          "symbols/demo/extra/basic/toArrow.json": {
            "position": 19,
            "keepOrien": true,
            "width": 30,
            "height": 15,
            "names": [
              "symbols/demo/extra/basic/toArrow.json"
            ]
          }
        },
        "note": 0,
        "label.position": 14,
        "label.offset.x": -10,
        "label.offset.y": 0,
        "label.color": "rgb(61,61,61)"
      },
      "a": {
        "index": 0,
        "toolTipRaw": "<div id=\"config_tooltip\" style=\"font-size:12px;line-height:1.75em;letter-spacing:1px\">\n                                            关联绑定信息：<br>\n                                            <li style=\"list-style-type:disc;color:rgba(255,255,255,0.5);\">索引序号：0 | 总共1条</li>\n                                            <li style=\"list-style-type:disc;font-weight:bold;\">操作属性：visibleFilterInput@treeTable-ui1</li>\n                                            <li style=\"list-style-type:none;color:rgba(255,255,255,0.5)\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当前值：</li>\n                                            <li style=\"list-style-type:disc;font-weight:bold\">关联属性：值内容@input-ui2</li>\n                                            <li style=\"list-style-type:none;color:rgba(255,255,255,0.5)\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;关联值：undefined</li>\n                                            </div>"
      }
    },
    {
      "c": "ht.Node",
      "i": 110765,
      "p": {
        "name": "tip",
        "displayName": "疑问提示（tip1）",
        "toolTip": "<div style=\"font-size:12px;line-height:1.5em;letter-spacing:1px\">  示例：驱动引擎软件的运行实例，支持跨平台运行（windows/linux、x86/arm），<br> 向上连接中台服务（通过内部接口协议），向下加载驱动接入设备子系统 </div>",
        "tag": "tip1",
        "dataBindings": {
          "a": {
            "display": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popDirection": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popBackground": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popPadding": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popWidth": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popHeight": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popBorderColor": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popBorderWidth": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popBorderRadius": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popTriggerEvent": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            }
          }
        },
        "image": {
          "modified": "Fri May 24 2024 17:10:19 GMT+0800 (中国标准时间)",
          "dataBindings": [
            {
              "attr": "symbol",
              "valueType": "Image",
              "name": "symbol"
            },
            {
              "attr": "toolTip",
              "valueType": "Boolean",
              "description": "运行时提示是否可见。\n<br>默认编辑状态下非空内容的提示鼠标放在上面都可见，\n<br>需要勾选该属性运行模式下才可见。",
              "group": "功能（关键）",
              "name": "toolTip"
            },
            {
              "attr": "path",
              "valueType": "Image",
              "defaultValue": "symbols/develop/uiotos/icons/editroToolBar/edit.json",
              "name": "名称",
              "description": "图标。\n<br>可以设置其他图标地址。\n<br>如果清空，则会自动填充一个纯色矩形，\n<br>并且默认透明度为0.1。可以设置默认、\n<br>划过、点击颜色来调整。"
            },
            {
              "attr": "openUrl",
              "valueType": "String",
              "description": "浏览器地址。\n<br>运行模式下点击，会在浏览器新页签打开地址。",
              "name": "openUrl"
            },
            {
              "attr": "default-background",
              "valueType": "Color",
              "defaultValue": "rgb(55,125,255)",
              "name": "默认颜色"
            },
            {
              "attr": "hover-background",
              "valueType": "Color",
              "defaultValue": "rgb(51,153,255)",
              "name": "划过颜色"
            },
            {
              "attr": "click-background",
              "valueType": "Color",
              "defaultValue": "#60ACFC",
              "name": "按下颜色"
            },
            {
              "attr": "iconType",
              "valueType": "Level",
              "defaultValue": 1,
              "name": "类型"
            },
            {
              "attr": "param",
              "valueType": "Function",
              "name": "数据参数",
              "extraInfo": {
                "arguments": [
                  "data",
                  "gv"
                ]
              },
              "defaultValue": "__ht__function(data, gv) {return null;}"
            },
            {
              "attr": "disabled",
              "valueType": "Boolean",
              "name": "disabled"
            },
            {
              "attr": "bindTabview",
              "valueType": "StringArray",
              "defaultValue": [
                "tab1",
                -1
              ],
              "group": "bindControls",
              "name": "bindTabview"
            },
            {
              "attr": "bindControlsTag",
              "valueType": "ObjectArray",
              "name": "bindControlsTag"
            },
            {
              "attr": "bindControlsAttr",
              "valueType": "ObjectArray",
              "description": "静态值。也用作数组索引、JSON对象解析提取值用途。\n<br>一、静态值用途：\n<br>对常规类型的属性赋值且没有反向关联属性值，传入为数值时，不\n<br>会作为数组的索引，而会当成常量值对外赋值。此外，存在特殊值：\n<br>~和undefined表示过滤、不触发；null为默认值，表示传递默认表\n<br>单数据。编辑状态下清空后保存与设置null等价。\n<br>二、数组索引用途\n<br>情况1：被操作的组件属性原先值是数组时（包括空数组），会将\n<br>待输出的值作为被操作数组指定索引的值来传入，而不是整体覆盖。\n<br>情况2：如果要被操作的组件属性原先值不是数组，而且待输出的\n<br>值为数组类型并且长度也在索引范围内，那么会按照索引取自身数\n<br>组指定元素再对外输出。（如果想要取待输出索引值，赋值给被操\n<br>纵属性的指定索引，那么需要中间组件属性连线过渡以下，无法直\n<br>接操作）\n<br>情况3：如果要被操作的组件属性是数组，而且待输出的值也是数组\n<br>类型，此时当情况1来处理。\n<br>三、数据解析用途：\n<br>待输出的值为JSON对象时，用x.y.z这种以字符.或者>为间隔的方式\n<br>实现对JSON字段层次逐层定位，当是数组时x.0.y.1这种以数字的方\n<br>式来指定数组的某个索引。以此实现对任意结果JSON对象字段的定\n<br>位，获取结构内指定字段对应的值。",
              "name": "bindControlsAttr"
            },
            {
              "attr": "bindControlsVal",
              "valueType": "ObjectArray",
              "name": "bindControlsVal"
            },
            {
              "attr": "paramControlTag",
              "valueType": "StringArray",
              "name": "paramControlTag"
            },
            {
              "attr": "paramControlAttr",
              "valueType": "ObjectArray",
              "name": "paramControlAttr"
            },
            {
              "attr": "paramsGenerator",
              "valueType": "Function",
              "defaultValue": "__ht__function(data, val, index, node,oldVal,form) {//绑定组索引对应的函数处理，用来动态生成复杂的参数变量传入\r\nswitch(index){\r\n    case 0:\r\n        break;\r\n    case 1:\r\n        break;\r\n    case 2:\r\n        break;\r\n    default:\r\n        break;\r\n}\r\n\r\nreturn val;}",
              "extraInfo": {
                "arguments": [
                  "data",
                  "val",
                  "index",
                  "node",
                  "oldVal",
                  "form"
                ]
              },
              "name": "paramsGenerator"
            },
            {
              "attr": "useAttrCORS",
              "valueType": "Boolean",
              "defaultValue": false,
              "description": "连线操作和处理回写是否一致。\n                        比如多个文本框连线传值给相同对话框，弹窗修改\n                        后是否限定只能写到最新赋值过来的文本框。详见<a href='https://www.yuque.com/liuhuo-nc809/uiotos/fgi6dd7gado51acm#fFUbp' style=\"color:rgb(96,172,252)\"target=\"_blank\">同源属性操作</a>",
              "name": "useAttrCORS",
              "dynamicCreate": true
            },
            {
              "attr": "clicked",
              "valueType": "Function",
              "name": "点击事件",
              "extraInfo": {
                "arguments": [
                  "data",
                  "param"
                ]
              }
            },
            {
              "attr": "userData",
              "valueType": "ObjectArray",
              "name": "userData"
            },
            {
              "attr": "display",
              "name": "display",
              "valueType": "Image",
              "defaultValue": "",
              "description": "自定义页面地址。\n                可以是编辑器中的其他页面，也可以\n                是外部网页链接地址。",
              "group": "弹出框",
              "dynamicCreate": true
            },
            {
              "attr": "popDirection",
              "name": "popDirection",
              "valueType": "SideDirection",
              "defaultValue": "right",
              "description": "提示显示位置。",
              "dynamicCreate": true
            },
            {
              "attr": "popBackground",
              "name": "popBackground",
              "valueType": "Color",
              "defaultValue": "white",
              "description": "箭头和背景色。",
              "dynamicCreate": true
            },
            {
              "attr": "popPadding",
              "name": "padding",
              "valueType": "NumberArray",
              "defaultValue": [
                2,
                2,
                2,
                2
              ],
              "description": "内间距。",
              "dynamicCreate": true
            },
            {
              "attr": "popWidth",
              "name": "popWidth",
              "valueType": "Number",
              "defaultValue": 400,
              "description": "弹出框宽度。",
              "dynamicCreate": true
            },
            {
              "attr": "popHeight",
              "name": "popHeight",
              "valueType": "Number",
              "defaultValue": 300,
              "description": "弹出框高度。",
              "dynamicCreate": true
            },
            {
              "attr": "popBorderColor",
              "name": "popBorderColor",
              "valueType": "Color",
              "defaultValue": "rgb(51,51,51)",
              "description": "边框线颜色。\n                    注意，是设置了边框宽度非0后的边框颜色。\n                    默认边框宽度属性为0时，实际上是白色并\n                    带有箭头指示的边框。本属性不用于修改默\n                    认边框色。",
              "dynamicCreate": true
            },
            {
              "attr": "popBorderWidth",
              "name": "popBorderWidth",
              "valueType": "Number",
              "defaultValue": 0,
              "description": "边框线宽度。\n                    默认值为0，此时边框默认为白色并且带有\n                    箭头指示。当设置宽度后，颜色将取边框颜\n                    色属性的设置，并且不再有箭头指示。",
              "dynamicCreate": true
            },
            {
              "attr": "popBorderRadius",
              "name": "popBorderRadius",
              "valueType": "Number",
              "defaultValue": 0,
              "description": "边框线圆角。\n                    设置圆角线后，如果此前默认是白色边框带有\n                    指示箭头，那么将自动不可见，只对内容区域\n                    产生圆角。",
              "dynamicCreate": true
            },
            {
              "attr": "popTriggerEvent",
              "name": "popTriggerEvent",
              "valueType": "MouseEvent",
              "defaultValue": "hover",
              "description": "触发方式。\n                支持鼠标移入、点击（按钮时）\n                两种触发提示的方式。",
              "dynamicCreate": true
            }
          ],
          "snapshotURL": "symbols/develop/uiotos/arranged/controls/forms_icon/图片按钮.json",
          "onDown": "__ht__function(event, data, view, point, width, height) {\n!data.ca('disabled') && data.ca('icon-background',data.ca('click-background'))\n}",
          "onUp": "__ht__function(event, data, view, point, width, height) {\nif(!data.ca('disabled')){\r\n    data.ca('icon-background',data.ca('hover-background'));\r\n    let cb = new Function('return ' + data.ca('clicked'))(),\r\n        cb2 = new Function('return ' + data.ca('onClick'))();//240523，兼容onClick命名\r\n    typeof(setBindTabviewIndex) != 'undefined' && setBindTabviewIndex(data,data.ca('bindTabview'));\r\n    let paramCb = new Function('return ' + data.ca('param'))();\r\n    let param = paramCb ? paramCb(data,view) : null;\r\n    if(typeof(i) != 'undefined' && typeof(i.updateBindControls) != 'undefined'){\r\n        //240304，需要改成i.formEventBubblingUpper，否则执行操作可能会出问题！比如tab页签索引切换，切换不了！\r\n        // i.updateBindControls(data,param,[],false,'~','clicked');//params是response的位置，所以得是对象类型\\\r\n        //触发事件连线操作\r\n        i.formEventBubblingUpper(\r\n            data,\r\n            data._gv,\r\n            data._cache,\r\n            'clicked',\r\n            null,\r\n            false\r\n        );\r\n    }\r\n    //230819，支持传入url，点击浏览器新窗口打开。\r\n    let urltmp = data.ca('openUrl');\r\n    if(urltmp && urltmp.indexOf('http') == -1) urltmp = 'http://' + urltmp;\r\n    urltmp && window.open(urltmp,'_blank');\r\n    \r\n    if(cb2) return cb2(data,param);\r\n    else return cb && cb(data,param)\r\n}\n}",
          "onEnter": "__ht__function(event, data, view, point, width, height) {\nif(data.ca('disabled')){\r\n    view.getView().style.cursor = 'not-allowed'\r\n}else{\r\n    data.ca('icon-background',data.ca('hover-background'))\r\n    data.iv();\r\n    view.getView().style.cursor = 'pointer'\r\n}\n}",
          "onLeave": "__ht__function(event, data, view, point, width, height) {\ndata.ca('icon-background',data.ca('default-background'))\r\nview.getView().style.cursor = 'default'\n}",
          "renderHTML": "__ht__function(data, gv, cache) {/*240304，所以渲染元素最简，都需要加上这句调用，否则连线赋值时，判断\r\ni.hasInnerSymbolInited()识别渲染元素是否初始化就极可能识别判断失误！\r\n加上了这句，上面的data._gv、data._cache散装调用貌似可以去掉了，暂时\r\n不动，留着也无妨！*/\r\ncache = _i.innerRecoveredDataCache(data, cache,false,'cbtn','图片按钮');\r\n\r\n//对于提示组件，初始没有配置（undefined），那么自动勾选，允许运行时提示可见！\r\nif(data.getName() == 'tip' && data.ca('toolTip') === undefined){\r\n    data.ca('toolTip',true);\r\n    data.s('pixelPerfect',false);\r\n}\r\n\r\n//240518，清空时，给一个矩形，可以配置颜色包括透明的，避免清理不掉默认图标。当清理图标时，自动矩形半透明0.1\r\nif(!data._gv){\r\n    i.md(data, gv, cache, {\r\n        'a:path': e => {\r\n            if(!e.newValue || e.newValue.trim() == ''){\r\n                data.ca('path','symbols/develop/uiotos/common/pureRect.json');\r\n                data.ca('default-background', rgbaForced(data.ca('default-background'),0.1));\r\n                data.ca('hover-background', rgbaForced(data.ca('hover-background'),0.1));\r\n                data.ca('click-background', rgbaForced(data.ca('click-background'),0.1));\r\n                data.s('image.stretch','fill');\r\n            }\r\n        },\r\n    }, [], null, null, null);\r\n}\r\n\r\n//240304，发现iconButton图片按钮没有渲染元素代码实现，需要这里手动加\r\ndata._gv = gv;\r\ndata._cache = data.__cache = cache;}",
          "width": 100,
          "height": 100,
          "pixelPerfect": false,
          "comps": [
            {
              "type": "image",
              "color": null,
              "name": {
                "func": "__ht__function(data, view) {\nfunction func(data,view){\r\n    if((typeof(runningMode) != 'undefined' && !runningMode()) || view.getView().style.cursor != 'pointer'){//最好不用 == 'default'，因为存在代码初始赋值\r\n        data.ca('icon-background',data.ca('default-background'))\r\n    }\r\n    var typeArr = ['light','light','regular','light'] //枚举下拉选择\r\n    var typetmp = typeArr[data.ca('iconType')] //类型选择\r\n    var path = data.ca('path')                 //图标路径\r\n    if(path != undefined && path.trim() !== ''){\r\n        if(path.indexOf('.') == -1){           //传入图标文件名称时\r\n            path = 'symbols/demo/uiotos/icons/' + typetmp + '/' + path + '.json'\r\n        }else if(path.indexOf(typetmp) == -1){ //图标类型发生变化时\r\n            typeArr.forEach((curType,index)=>{\r\n                if(curType != typetmp){        //路径中先前的类型名称换成新的\r\n                    path = path.replace(curType,typetmp)               \r\n                }\r\n            })\r\n        }\r\n    }\r\n    data.ca('path',path)                      //回写过去\r\n    return path\r\n}\r\n\r\n//整体复制的话需要带上这句，因为属性func外层已经是函数体\r\nreturn func(data,view)\n}",
                "value": "symbols/demo/uiotos/icons/light/square-full.json"
              },
              "displayName": "democrat（democrat1）",
              "rect": [
                0,
                0,
                100,
                100
              ]
            }
          ],
          "uuid": "7CEB0068-9C6A-42E8-ACDD-51765D95A830"
        },
        "position": {
          "x": -630.29666,
          "y": -359.70378
        },
        "width": 16,
        "height": 16
      },
      "s": {
        "label.opacity": 0,
        "2d.editable": false,
        "label.position": 14,
        "label.offset.x": -10,
        "label.offset.y": 0,
        "label.color": "rgb(61,61,61)",
        "interactive": true,
        "image.stretch": "uniform",
        "pixelPerfect": false
      },
      "a": {
        "path": "symbols/demo/uiotos/icons/light/question-circle.json",
        "hover-background": "rgb(51,153,255)",
        "iconType": 3,
        "default-background": "rgb(124,145,155)",
        "toolTip": true,
        "icon-background": "rgb(124,145,155)",
        "symbol": "symbols/develop/uiotos/base/iconClick.json"
      }
    },
    {
      "c": "ht.Node",
      "i": 110766,
      "p": {
        "name": "title",
        "displayName": "标签文字（title1）",
        "toolTip": "<p style='color:rgb(242,83,75);margin-top:5px;margin-bottom:5px;font-weight:bold;line-height:1.5em;'>已被布局，不允许拖动（shift+回车可解除）</p><p style='color:rgb(242,83,75);margin:0px;font-weight:bold'>已被布局，不允许拖动<p>",
        "tag": "title1",
        "dataBindings": {
          "a": {
            "text": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "display": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popDirection": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popBackground": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popPadding": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popWidth": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popHeight": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popBorderColor": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popBorderWidth": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popBorderRadius": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popTriggerEvent": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            }
          }
        },
        "image": {
          "modified": "Mon Nov 27 2023 06:31:21 GMT+0800 (中国标准时间)",
          "background": "rgb(32,37,46)",
          "dataBindings": [
            {
              "attr": "shadowBorder",
              "valueType": "NumberArray",
              "defaultValue": [
                0,
                0,
                8
              ],
              "group": "功能（关键）",
              "description": "阴影边框。\n<br>数组类型，比如0、0、8，作为边框\n<br>阴影显示的三个参数，可以分别调整。",
              "name": "shadowBorder"
            },
            {
              "attr": "shadowColor",
              "valueType": "Color",
              "defaultValue": "rgba(55,125,255,0.50)",
              "description": "阴影边框色。",
              "name": "shadowColor"
            },
            {
              "attr": "shadowEnabled",
              "valueType": "Boolean",
              "defaultValue": false,
              "description": "阴影边框是否可见。",
              "name": "shadowEnabled"
            },
            {
              "attr": "text",
              "valueType": "String",
              "defaultValue": "文字",
              "description": "标签文字。\n<br>可以为空，当勾选四周任何一边时，则为线条，折线、\n<br>框线，可用于显示在非绘图组件上层。比如文本框、\n<br>容器等组件，始终会遮盖绘图组件包括矩形、连线。",
              "name": "text"
            },
            {
              "attr": "hAlign",
              "valueType": "HAlignType",
              "defaultValue": "left",
              "description": "文字水平对齐方式。",
              "name": "hAlign"
            },
            {
              "attr": "vAlign",
              "valueType": "VAlignType",
              "defaultValue": "middle",
              "description": "文字垂直对齐方式。",
              "name": "vAlign"
            },
            {
              "attr": "font",
              "valueType": "Font",
              "description": "文字字体。",
              "name": "font"
            },
            {
              "attr": "labelColor",
              "valueType": "Color",
              "defaultValue": "rgb(124,145,155)",
              "description": "文字颜色。",
              "name": "labelColor"
            },
            {
              "attr": "background",
              "valueType": "Color",
              "defaultValue": null,
              "description": "背景颜色。",
              "name": "background"
            },
            {
              "attr": "borderColor",
              "valueType": "Color",
              "defaultValue": "rgb(124,145,155)",
              "description": "边框线颜色。",
              "name": "borderColor"
            },
            {
              "attr": "borderWidth",
              "valueType": "PositiveNumber",
              "defaultValue": 3,
              "description": "边框线宽度。",
              "name": "borderWidth"
            },
            {
              "attr": "borderRadius",
              "valueType": "NumberArray",
              "defaultValue": [
                0,
                0,
                0,
                0
              ],
              "description": "边框圆角半径。",
              "name": "borderRadius"
            },
            {
              "attr": "padding",
              "valueType": "NumberArray",
              "defaultValue": [
                2,
                2,
                2,
                5
              ],
              "description": "四周间距。\n<br>数组类型，上、右、下、左，表示文字与\n<br>四周边框的距离。",
              "name": "padding"
            },
            {
              "attr": "borderLeft",
              "valueType": "Boolean",
              "defaultValue": true,
              "description": "是否显示左边框。",
              "name": "borderLeft"
            },
            {
              "attr": "borderTop",
              "valueType": "Boolean",
              "description": "是否显示上边框。",
              "name": "borderTop"
            },
            {
              "attr": "borderRight",
              "valueType": "Boolean",
              "description": "是否显示右边框。",
              "name": "borderRight"
            },
            {
              "attr": "borderDown",
              "valueType": "Boolean",
              "description": "是否显示下边框。",
              "name": "borderDown"
            },
            {
              "attr": "useAttrCORS",
              "valueType": "Boolean",
              "defaultValue": false,
              "description": "连线操作和处理回写是否一致。\n                        比如多个文本框连线传值给相同对话框，弹窗修改\n                        后是否限定只能写到最新赋值过来的文本框。详见<a href='https://www.yuque.com/liuhuo-nc809/uiotos/fgi6dd7gado51acm#fFUbp' style=\"color:rgb(96,172,252)\"target=\"_blank\">同源属性操作</a>",
              "name": "useAttrCORS",
              "dynamicCreate": true
            },
            {
              "attr": "display",
              "name": "display",
              "valueType": "Image",
              "defaultValue": "",
              "description": "自定义页面地址。\n                可以是编辑器中的其他页面，也可以\n                是外部网页链接地址。",
              "group": "弹出框",
              "dynamicCreate": true
            },
            {
              "attr": "popDirection",
              "name": "popDirection",
              "valueType": "SideDirection",
              "defaultValue": "right",
              "description": "提示显示位置。",
              "dynamicCreate": true
            },
            {
              "attr": "popBackground",
              "name": "popBackground",
              "valueType": "Color",
              "defaultValue": "white",
              "description": "箭头和背景色。",
              "dynamicCreate": true
            },
            {
              "attr": "popPadding",
              "name": "padding",
              "valueType": "NumberArray",
              "defaultValue": [
                2,
                2,
                2,
                2
              ],
              "description": "内间距。",
              "dynamicCreate": true
            },
            {
              "attr": "popWidth",
              "name": "popWidth",
              "valueType": "Number",
              "defaultValue": 400,
              "description": "弹出框宽度。",
              "dynamicCreate": true
            },
            {
              "attr": "popHeight",
              "name": "popHeight",
              "valueType": "Number",
              "defaultValue": 300,
              "description": "弹出框高度。",
              "dynamicCreate": true
            },
            {
              "attr": "popBorderColor",
              "name": "popBorderColor",
              "valueType": "Color",
              "defaultValue": "rgb(51,51,51)",
              "description": "边框线颜色。\n                    注意，是设置了边框宽度非0后的边框颜色。\n                    默认边框宽度属性为0时，实际上是白色并\n                    带有箭头指示的边框。本属性不用于修改默\n                    认边框色。",
              "dynamicCreate": true
            },
            {
              "attr": "popBorderWidth",
              "name": "popBorderWidth",
              "valueType": "Number",
              "defaultValue": 0,
              "description": "边框线宽度。\n                    默认值为0，此时边框默认为白色并且带有\n                    箭头指示。当设置宽度后，颜色将取边框颜\n                    色属性的设置，并且不再有箭头指示。",
              "dynamicCreate": true
            },
            {
              "attr": "popBorderRadius",
              "name": "popBorderRadius",
              "valueType": "Number",
              "defaultValue": 0,
              "description": "边框线圆角。\n                    设置圆角线后，如果此前默认是白色边框带有\n                    指示箭头，那么将自动不可见，只对内容区域\n                    产生圆角。",
              "dynamicCreate": true
            },
            {
              "attr": "popTriggerEvent",
              "name": "popTriggerEvent",
              "valueType": "MouseEvent",
              "defaultValue": "hover",
              "description": "触发方式。\n                支持鼠标移入、点击（按钮时）\n                两种触发提示的方式。",
              "dynamicCreate": true
            }
          ],
          "renderHTML": "__ht__function(data, gv, cache) {return __label_ui(data,gv,cache);}",
          "width": 50,
          "height": 20,
          "pixelPerfect": false,
          "comps": [],
          "uuid": "38EBA268-CECF-44B3-990A-3AB61A834388"
        },
        "host": {
          "__i": 110754
        },
        "position": {
          "x": -518.93196,
          "y": -359.70378
        },
        "width": 43.91207,
        "height": 20
      },
      "s": {
        "label.opacity": 0,
        "label.position": 14,
        "label.offset.x": -10,
        "label.offset.y": 0,
        "label.color": "rgb(61,61,61)",
        "2d.movable": false,
        "interactive": true,
        "image.stretch": "uniform",
        "layout.h": "right",
        "layout.v": "top"
      },
      "a": {
        "text": "帮助？",
        "borderDown": false,
        "borderLeft": false,
        "labelColor": "rgb(51,153,255)",
        "hostLayerLine": {
          "__i": 110767
        },
        "toolTipRaw": "<p style='color:rgb(242,83,75);margin-top:5px;margin-bottom:5px;font-weight:bold;line-height:1.5em;'>已被布局，不允许拖动（shift+回车可解除）</p><p style='color:rgb(242,83,75);margin:0px;font-weight:bold'>已被布局，不允许拖动<p>",
        "symbol": "symbols/develop/uiotos/base/label_ui.json",
        "oldDynamicAttrs": [
          {
            "attr": "useAttrCORS",
            "valueType": "Boolean",
            "defaultValue": false,
            "description": "属性同源操作。\n                连线操作传递是否限定双方。比如有A/B/C/D/O五个组件，连线操作关系：\n                A→O、B→O、C→O、D→O，以及O→A、O→B、O→C、O→D，总结为\n                A、B、C、D分别与O有往返操作。\n                默认不勾选该属性时，A到D任何一个向O的连线操作，都不会影响到O自身\n                对A到D的下一步操作。勾选了该属性后，那么每次相邻的两次连线交互，\n                则会有同源选择性，比如A→O，下一步则O之会选择到A的操作即O→A。\n                同源操作通常用户多个组件共用一个配置弹窗的情况，比如上述A、B、C、D\n                相当于是四个同类型的组件，而O是公共的属性配置窗口，任何一个比如A点\n                击，可通过O弹窗显示属性，然后修改后将属性值回写到A，且并不会将值给\n                到其他几个组件，即便有连线在。\n                同源操作规则：当连线满足A/B→O.x，且有O.x→A/B时，即前一次组件A连线\n                操作O的x属性，那么，O对外触发且关联x属性值对外时，勾选了本属性同源\n                属性操作的前提下，将只会执行O.x→A，而忽略O.x→B/C等其他非A的图元组\n                件的连线操作。",
            "dynamicCreate": true
          }
        ]
      }
    },
    {
      "c": "ht.Edge",
      "i": 110767,
      "p": {
        "name": "吸附布局",
        "displayName": "edge（吸附布局1）",
        "toolTip": "吸附布局：<p style=color:lightgreen>标签文字（title1） → dlg（dlg1）</p>吸附参数：right top",
        "parent": {
          "__i": 110766
        },
        "tag": "吸附布局1",
        "source": {
          "__i": 110766
        },
        "target": {
          "__i": 110754
        }
      },
      "s": {
        "edge.color": "rgba(53,153,219,0)",
        "edge.width": 1,
        "label.opacity": 0,
        "label.position": 14,
        "label.offset.x": -10,
        "label.offset.y": 0,
        "label.color": "rgb(61,61,61)",
        "label": "",
        "edge.type": "boundary",
        "edge.gap": 16,
        "edge.width.absolute": true,
        "note.border.width": 0,
        "edge.dash": true,
        "edge.dash.pattern": [
          4,
          4
        ],
        "edge.dash.color": "rgb(244,109,103)",
        "note.position": 7,
        "note.opacity": 0.85,
        "note.background": "rgb(244,109,103)",
        "note.offset.x": 0,
        "note.offset.y": 0,
        "icons": {
          "symbols/demo/extra/basic/fromArrow2.json": {
            "position": 15,
            "width": 5,
            "height": 5,
            "keepOrien": true,
            "names": [
              "symbols/demo/extra/basic/fromArrow2.json"
            ]
          },
          "symbols/demo/extra/basic/toArrow.json": {
            "position": 19,
            "keepOrien": true,
            "width": 20,
            "height": 10,
            "names": [
              "symbols/demo/extra/basic/toArrow.json"
            ]
          }
        },
        "interactive": true,
        "image.stretch": "uniform"
      },
      "a": {
        "hostLayerFrom": {
          "__i": 110766
        },
        "toolTipRaw": "吸附布局：<p style=color:lightgreen>标签文字（title1） → dlg（dlg1）</p>吸附参数：right top"
      }
    },
    {
      "c": "ht.UNode",
      "i": 110768,
      "p": {
        "name": "func",
        "displayName": "工具函数（func1）",
        "toolTip": "<p style='color:rgb(242,83,75);margin-top:5px;margin-bottom:5px;font-weight:bold;line-height:1.5em;'>已被布局，不允许拖动（shift+回车可解除）</p><p style='color:rgb(242,83,75);margin-top:5px;margin-bottom:5px;font-weight:bold;line-height:1.5em;'>已被布局，不允许拖动</p><span style='font-weight:bold;color:rgb(125,195,125)'>说明：</span><span style='color:rgb(125,195,125);line-height:1.8em;letter-spacing:1px;'>\n<br>240315，发现需要复位，否则连线操作面板中，\n<br>点击某个勾选取消，再反向关联，确定，发现不\n<br>会自动勾选上！原因是因为本属性的值未变化，\n<br>不会触发进入响应，执行fireViewEvent。</span>",
        "tag": "func1",
        "dataBindings": {
          "a": {
            "userData": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "output": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "outputByEvent": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "inputs": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "exec": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "arrExec": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "onOutput": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "_bindEvents_0": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            }
          }
        },
        "image": {
          "modified": "Mon Mar 11 2024 21:17:29 GMT+0800 (中国标准时间)",
          "background": "rgb(32,37,46)",
          "dataBindings": [
            {
              "attr": "symbol",
              "valueType": "Image",
              "name": "组件地址"
            },
            {
              "attr": "color",
              "valueType": "Color",
              "defaultValue": "rgb(51,153,255)",
              "description": "图标颜色。\n<br>包括显示文字。",
              "group": "功能（关键）",
              "name": "图标颜色"
            },
            {
              "attr": "function",
              "valueType": "ToolFunction",
              "defaultValue": "transfer",
              "name": "功能选项",
              "description": "透明传递"
            },
            {
              "attr": "noteTips",
              "valueType": "Multiline",
              "name": "函数别名注释",
              "description": "函数别名注释。\n<br>默认为函数名称，可以修改，方便理解具体用途。\n<br>通常结合“提示”属性做详细功能注释，便于理解当\n<br>前配置下的操作。"
            },
            {
              "attr": "exeWhenInput",
              "valueType": "Boolean",
              "defaultValue": false,
              "name": "输入赋值时执行"
            },
            {
              "attr": "resetAfterInput",
              "valueType": "Boolean",
              "name": "输入赋值后清空",
              "description": "勾选后，每次输入值有更新，在触发下一步（如果有勾选输入时执行）后，同时复位清空输入属性\n的值，确保下一次再输入同样内容时也能按照变化处理触发执行。注意，再多条连线操作inputs输入\n的不同索引index时，该属性不能勾选，否则无法实现多个值连线（异步先后）赋值传入。",
              "defaultValue": false
            },
            {
              "attr": "inputsArrToObj",
              "valueType": "Boolean",
              "name": "输入数组转对象",
              "description": "是否切换成对象格式。\n<br>输入组（inputs）默认为数组格式，当前属性勾选时\n<br>会将输入组切换成非数组的对象格式，再次取消勾选\n<br>时，会恢复成数组格式。\n<br>\n切换成对象，主要是为了连线操作时，能对初始的非\n<br>数组属性值进行操作，这对于数组取自身索引值对外\n<br>赋值时有用，否则会因为操作数组类型属性值，导致\n<br>被识别为操作目标数组的索引进行赋值。",
              "defaultValue": true
            },
            {
              "attr": "stripSingleInput",
              "valueType": "Boolean",
              "defaultValue": true,
              "name": "输入组单个取出",
              "description": "输入组为数组且只有1个元素时，取出\n<br>这个元素作为实际输入值，代替原先的输入。默\n<br>认inputs为数组格式，手动输入时通常会在数组\n<br>的首元素输入，本属性保持默认勾选时，实际计\n<br>算会以首元素作为实际输入值。\n<br>也可以勾选“输入数组转对象”，此时输入组的属\n<br>性栏由数组切换为对象输入，就可以任意输入非\n<br>数组类型的值了。"
            },
            {
              "attr": "exeWhenLoad",
              "valueType": "Boolean",
              "defaultValue": false,
              "name": "组件加载时执行"
            },
            {
              "attr": "oldValueMerge",
              "valueType": "Boolean",
              "defaultValue": false,
              "name": "输出合并非覆盖",
              "description": "对被操作的属性值做追加而不是覆盖替换。\n<br>被操作属性值作为旧值，按照值类型（数值、字符串、数组、对象等）追加分为以下\n<br>情况：\n<br>1）如果被赋值的（要操作的旧值）为数组类型，通常会将当前值追加过去而不是覆盖。\n<br>注意，如果传入的新值（支持经由解析赋值）也是数组，那么区分情况：\n<br>    ■ 旧值为常规数组，新值也为数组，则新数组元素都追加到旧数组合成一个，而非整\n<br>体数组作为一个元素追加。此外注意，如果新数组内元素都为数组，即本身是数组的数\n<br>组，那么自身数组先合并成一个数组，再进行下一步与旧数组合并操作。\n<br>    ■ 旧值为数组的数组时，新值即便也为数组，那么也会整体作为一个元素追加到旧值。\n<br>2）被赋值的为空（注意，并非0、空字符串等\"空\"值）时，输入（组）中一个或多个输\n<br>入项，会合并成一个值输出。其中，合并取决于输入组的类型（输入组多个值中类型数\n<br>量最多的被认为是当前输入组的值类型），具体如下:\n<br>    ■ 数字：输入组各项强制转换成数值并相加，将结果输出；\n<br>    ■ 字符串：输入组各项转成字符串依次拼接形成新的字符串输出；\n<br>    ■ 布尔型：输入组的各项转换成布尔然后做并集（或）后逻辑结果输出；\n<br>    ■ 对象：输入组各项被当成对象，然后字段合并成新对象后输出；\n<br>强制转换这里需注意：\n<br>    ■ 非空字符串转数值时，除了\"true\"（大小写均可）会作为1，其他字符串会作为0；\n<br>3）被赋值的不为空，有具体类型时，比如数字、字符串、布尔、对象类型，此时输入\n<br>组各项值，不再按照类型的多数（如果存在多个输入项）来强制转换少数输入项，而是\n<br>统一按照操作赋值的旧值类型，来转换输入的各项，并且按照类型类自动选择合适的合\n<br>并方式（如上），生成结果来赋值。\n<br>    ○ 注意1：多项输入和旧值会参与一起做合并操作，并非仅仅输入组的各项之间进行。\n<br>    ○ 注意2：如果输入值并非数组，会作当成输入组且元素个数为1的情况来处理。"
            },
            {
              "attr": "outputByEvent",
              "valueType": "Boolean",
              "defaultValue": true,
              "name": "输出经事件返回",
              "description": "默认情况下输出事件onOutput跟常规事件一样，\n<br>会输出当前组件的表单对象，而不是具体某个属性值，\n<br>需要经过赋值解析提取（通常是属性名加上前缀'a:'）。\n<br>工具函数的输出output通常要从内嵌页面中传给上层，\n<br>为了简化操作，当勾选了本属性后，无需赋值解析，输\n<br>出onOutput事件会自动将输出属性（a:output）带出。\n<br>而无需再通过表单对象+解析，也无需两条连线前者关\n<br>联output输出、后者关联onOutput触发以省去赋值解析。\n<br>注意，不影响数据进一步的赋值解析，只是此时不再是\n<br>以表单对象为解析基础，而是以函数output的返回结果。"
            },
            {
              "attr": "parseFailedNull",
              "valueType": "Boolean",
              "defaultValue": true,
              "name": "输出解析默认空",
              "description": "解析赋值输出时，如果对象\n<br>没有匹配到的解析字段，就返回未定\n<br>义的空值（undefined）。如果不勾选\n<br>本属性，未匹配到的解析赋值（非静\n<br>态赋值情况下），则返回原对象本身。\n<br>通常有反向关联属性时，参数被当成\n<br>赋值解析参数而非静态值。"
            },
            {
              "attr": "inputs",
              "valueType": "ObjectArray",
              "name": "输入（组）",
              "defaultValue": [],
              "description": "用于接收函数参数输入，可默认对象或数组形式，可以设置多个入参。\n<br>外部可以多条连线操作该属性，利用数组操作特性，在各自的连线操作\n<br>中bindControlsVal中设置对应的索引值，用来指定传入输入数组中指定\n<br>值，实现多参数传入。\n<br>\n注意，对于透明传递不做任何业务逻辑处理时，默认会将输入组的值直接输\n<br>出，默认以空（undefined）对外操作赋值，通常用于对外清空值。\n<br>此外，输入组长度为1时，将去掉数组后以元素本身值对外输出，比如\n<br>[1]、['hello']、[true]，['']会被当做1、'hello'、true、''输出。长度大于1的\n<br>输入组，对外输出则是正常的数组值。"
            },
            {
              "attr": "delay",
              "valueType": "PositiveNumber",
              "defaultValue": 0,
              "name": "延时执行毫秒"
            },
            {
              "attr": "exec",
              "valueType": "Boolean",
              "defaultValue": false,
              "name": "执行"
            },
            {
              "attr": "arrExec",
              "valueType": "Boolean",
              "defaultValue": false,
              "name": "遍历执行",
              "description": "数组循环遍历执行。\n<br>准输出值如果是数组时，自动拆成多\n<br>个元素，依次对外触发。相当于在连\n<br>线静态值bindControlsVal中依次填入\n<br>从0到n-1后，再点击常规“执行”。\n<br>对于透明传递而言，通常输出就等于\n<br>输入，因此也相当于将输入的多个参\n<br>数（数组元素），依次填入触发执行。"
            },
            {
              "attr": "whenOutputing",
              "valueType": "MultiComboBox",
              "name": "whenOutputing"
            },
            {
              "attr": "changeOutputTo",
              "valueType": "MultiComboBox",
              "extraInfo": {
                "enum": {
                  "values": [
                    "不转换",
                    "空对象（null）",
                    "未定义（undefined）",
                    "空字符串（\"\"）",
                    "否（false）",
                    "等于零（0）"
                  ]
                }
              },
              "defaultValue": "不转换",
              "name": "changeOutputTo"
            },
            {
              "attr": "output",
              "valueType": "Object",
              "name": "输出",
              "description": "函数输出。\n<br>当函数执行、遍历执行或输入赋值执行时，函数输出，\n<br>如果有对外连线，则会触发将输出值传递出去。\n<br>如果函数所在页面作为内嵌，将继承到上层的输出属\n<br>性对外连线对外，那么内嵌函数的执行，同样会触发\n<br>上层对外连线传递值。\n<br>注意，不论是当前层还是嵌套层，所有对工具函数输\n<br>出属性的直接赋值，只会改变属性值本身，不会触发\n<br>连线操作对外传递，只有通过前面说的几种函数本身\n<br>的执行操作才会触发连线操作。\n<br>"
            },
            {
              "attr": "bindControlsTag",
              "valueType": "ObjectArray",
              "group": "bindControls",
              "name": "bindControlsTag"
            },
            {
              "attr": "bindControlsAttr",
              "valueType": "ObjectArray",
              "name": "bindControlsAttr"
            },
            {
              "attr": "bindControlsVal",
              "valueType": "ObjectArray",
              "description": "静态值。也用作数组索引、JSON对象解析提取值用途。\n<br>一、静态值用途：\n<br>对常规类型的属性赋值且没有反向关联属性值，传入为数值时，不\n<br>会作为数组的索引，而会当成常量值对外赋值。此外，存在特殊值：\n<br>~和undefined表示过滤、不触发；null为默认值，表示传递默认表\n<br>单数据。编辑状态下清空后保存与设置null等价。\n<br>二、数组索引用途\n<br>情况1：被操作的组件属性原先值是数组时（包括空数组），会将\n<br>待输出的值作为被操作数组指定索引的值来传入，而不是整体覆盖。\n<br>情况2：如果要被操作的组件属性原先值不是数组，而且待输出的\n<br>值为数组类型并且长度也在索引范围内，那么会按照索引取自身数\n<br>组指定元素再对外输出。（如果想要取待输出索引值，赋值给被操\n<br>纵属性的指定索引，那么需要中间组件属性连线过渡以下，无法直\n<br>接操作）\n<br>情况3：如果要被操作的组件属性是数组，而且待输出的值也是数组\n<br>类型，此时当情况1来处理。\n<br>三、数据解析用途：\n<br>待输出的值为JSON对象时，用x.y.z这种以字符.或者>为间隔的方式\n<br>实现对JSON字段层次逐层定位，当是数组时x.0.y.1这种以数字的方\n<br>式来指定数组的某个索引。以此实现对任意结果JSON对象字段的定\n<br>位，获取结构内指定字段对应的值。",
              "name": "bindControlsVal"
            },
            {
              "attr": "paramControlTag",
              "valueType": "ObjectArray",
              "name": "paramControlTag"
            },
            {
              "attr": "paramControlAttr",
              "valueType": "ObjectArray",
              "name": "paramControlAttr"
            },
            {
              "attr": "paramsGenerator",
              "valueType": "Function",
              "defaultValue": "__ht__function(data, val, index, node, oldVal, form, type, inner) {//绑定组索引对应的函数处理，用来动态生成复杂的参数变量传入\r\nswitch(index){\r\n    case 0:\r\n        break;\r\n    case 1:\r\n        break;\r\n    case 2:\r\n        break;\r\n    default:\r\n        break;\r\n}\r\n\r\nreturn val;}",
              "extraInfo": {
                "arguments": [
                  "data",
                  "val",
                  "index",
                  "node",
                  "oldVal",
                  "form",
                  "type",
                  "inner"
                ]
              },
              "name": "paramsGenerator"
            },
            {
              "attr": "useAttrCORS",
              "valueType": "Boolean",
              "defaultValue": false,
              "description": "连线操作和处理回写是否一致。\n                        比如多个文本框连线传值给相同对话框，弹窗修改\n                        后是否限定只能写到最新赋值过来的文本框。详见<a href='https://www.yuque.com/liuhuo-nc809/uiotos/fgi6dd7gado51acm#fFUbp' style=\"color:rgb(96,172,252)\"target=\"_blank\">同源属性操作</a>",
              "name": "useAttrCORS",
              "dynamicCreate": true
            },
            {
              "attr": "userData",
              "valueType": "ObjectArray",
              "defaultValue": [],
              "description": "用户数据。",
              "name": "userData"
            },
            {
              "attr": "onOutput",
              "valueType": "Function",
              "description": "输出事件。",
              "extraInfo": {
                "arguments": [
                  "data",
                  "gv",
                  "cache",
                  "value"
                ]
              },
              "name": "onOutput"
            },
            {
              "attr": "_bindEvents_0",
              "valueType": "MultiComboBox",
              "defaultValue": "*",
              "group": "bindEvents",
              "description": "连线索引[0]的触发事件过滤器，默认全部通过",
              "dynamicCreate": true,
              "name": "_bindEvents_0"
            }
          ],
          "renderHTML": "__ht__function(data, gv, cache) {return __convertor(data,gv,cache);}",
          "width": 45,
          "height": 40,
          "comps": [
            {
              "type": "image",
              "color": {
                "func": "__ht__function(data, view) {\nlet color = data.ca('color');\r\ndata.s('label.color',color);\r\nreturn color;\n}",
                "value": "rgb(51,153,255)"
              },
              "name": "symbols/develop/uiotos/icons/editroToolBar/function.json",
              "shadowColor": "rgb(61,61,61)",
              "displayName": "node_image",
              "rect": [
                0.53882,
                4.53779,
                43.92236,
                30.92443
              ]
            }
          ],
          "uuid": "DDCE99D0-D6CA-4B14-84CD-DA064C1BB2B4"
        },
        "host": {
          "__i": 110753
        },
        "position": {
          "x": 279.89309,
          "y": -30.82403
        },
        "width": 45,
        "height": 40
      },
      "s": {
        "label.position": 13,
        "label.offset.y": 0,
        "2d.movable": false,
        "interactive": true,
        "image.stretch": "uniform",
        "2d.editable": false,
        "select.width": 0.5,
        "select.type": "roundRect",
        "select.color": "rgb(124,145,155)",
        "label": "复位\ncurrentIdSelect",
        "label.font": "26px Microsoft YaHei",
        "label.color": "rgb(51,153,255)",
        "label.align": "left",
        "layout.h": "right",
        "layout.v": "bottom"
      },
      "a": {
        "toolTipRaw": "<p style='color:rgb(242,83,75);margin-top:5px;margin-bottom:5px;font-weight:bold;line-height:1.5em;'>已被布局，不允许拖动（shift+回车可解除）</p><p style='color:rgb(242,83,75);margin-top:5px;margin-bottom:5px;font-weight:bold;line-height:1.5em;'>已被布局，不允许拖动</p><span style='font-weight:bold;color:rgb(125,195,125)'>说明：</span><span style='color:rgb(125,195,125);line-height:1.8em;letter-spacing:1px;'>\n<br>240315，发现需要复位，否则连线操作面板中，\n<br>点击某个勾选取消，再反向关联，确定，发现不\n<br>会自动勾选上！原因是因为本属性的值未变化，\n<br>不会触发进入响应，执行fireViewEvent。</span>",
        "noteTips": "复位\ncurrentIdSelect",
        "bindEvents": [
          "*",
          "onOutput"
        ],
        "输出遇到空值": "全部（*）",
        "输出遇到空值-list": [
          "全部（*）",
          "空对象（null）",
          "未定义（undefined）",
          "空字符串（\"\"）",
          "否（false）",
          "等于零（0）",
          "小于零（<0）",
          "NaN"
        ],
        "symbol": "symbols/develop/uiotos/base/__convertor.json",
        "icon": "symbols/develop/uiotos/icons/functions/function.json",
        "arrExec": false,
        "paramControlTag": [
          null
        ],
        "paramControlAttr": [
          "output"
        ],
        "bindControlsTag": [
          "treeTable-ui1"
        ],
        "bindControlsAttr": [
          "currentIdSelect"
        ],
        "bindControlsVal": [
          null
        ],
        "_bindEvents_0-list": [
          "*",
          "onOutput"
        ],
        "_bindEvents_0": "*",
        "inputsArrToObj": false,
        "stripSingleInput": true,
        "exeWhenInput": false,
        "resetAfterInput": false,
        "inputs": [
          null
        ],
        "exec": false,
        "inputKeys": [
          "0"
        ],
        "inputValues": [
          null
        ],
        "output": null
      }
    },
    {
      "c": "ht.Edge",
      "i": 110769,
      "p": {
        "name": "edge",
        "displayName": "0（edge5）",
        "toolTip": "<div id=\"config_tooltip\" style=\"font-size:12px;line-height:1.75em;letter-spacing:1px\">\n                                                        关联绑定信息：<br>\n                                                        <li style=\"list-style-type:disc;color:rgba(255,255,255,0.5);\">索引序号：0 | 总共1条</li>\n                                                        <li style=\"list-style-type:disc;font-weight:bold;\">操作属性：currentIdSelect@treeTable-ui1</li>\n                                                        <li style=\"list-style-type:none;color:rgba(255,255,255,0.5)\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当前值：TEXT</li>\n                                                        <li style=\"list-style-type:disc;font-weight:bold\">关联属性：输出@func1</li>\n                                                        <li style=\"list-style-type:none;color:rgba(255,255,255,0.5)\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;关联值：undefined</li>\n                                                        <li style=\"list-style-type:disc;font-weight:bold;\">解析赋值：null</li>\n                                                        <li style=\"list-style-type:disc;color:rgba(255,255,255,0.5)\">触发事件：*</li>\n                                                        <li style=\"list-style-type:disc;\">注释：<span style=\"color:rgb(125,195,125)\">0。\n<br></span></li>\n                                                    </div>",
        "parent": {
          "__i": 110768
        },
        "tag": "edge5",
        "source": {
          "__i": 110768
        },
        "target": {
          "__i": 110757
        }
      },
      "s": {
        "label": "",
        "edge.color": "rgb(51,153,255)",
        "edge.width": 4,
        "edge.type": "flex",
        "edge.gap": 16,
        "note.border.width": 0,
        "note.position": 7,
        "note.font": "14px arial, sans-serif",
        "note.opacity": 0.75,
        "label.opacity": 0,
        "note.background": "rgb(51,153,255)",
        "note.offset.x": 0,
        "note.offset.y": 0,
        "icons": {
          "symbols/demo/extra/basic/fromArrow2.json": {
            "position": 15,
            "keepOrien": true,
            "names": [
              "symbols/demo/extra/basic/fromArrow2.json"
            ]
          },
          "symbols/demo/extra/basic/toArrow.json": {
            "position": 19,
            "keepOrien": true,
            "width": 50,
            "height": 20,
            "names": [
              "symbols/demo/extra/basic/toArrow.json"
            ]
          }
        },
        "note": 0
      },
      "a": {
        "index": 0,
        "toolTipRaw": "<div id=\"config_tooltip\" style=\"font-size:12px;line-height:1.75em;letter-spacing:1px\">\n                                                        关联绑定信息：<br>\n                                                        <li style=\"list-style-type:disc;color:rgba(255,255,255,0.5);\">索引序号：0 | 总共1条</li>\n                                                        <li style=\"list-style-type:disc;font-weight:bold;\">操作属性：currentIdSelect@treeTable-ui1</li>\n                                                        <li style=\"list-style-type:none;color:rgba(255,255,255,0.5)\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当前值：TEXT</li>\n                                                        <li style=\"list-style-type:disc;font-weight:bold\">关联属性：输出@func1</li>\n                                                        <li style=\"list-style-type:none;color:rgba(255,255,255,0.5)\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;关联值：undefined</li>\n                                                        <li style=\"list-style-type:disc;font-weight:bold;\">解析赋值：null</li>\n                                                        <li style=\"list-style-type:disc;color:rgba(255,255,255,0.5)\">触发事件：*</li>\n                                                        <li style=\"list-style-type:disc;\">注释：<span style=\"color:rgb(125,195,125)\">0。\n<br></span></li>\n                                                    </div>"
      }
    },
    {
      "c": "ht.UNode",
      "i": 110770,
      "p": {
        "name": "bt",
        "displayName": "普通按钮 v2（bt1）",
        "toolTip": "<p style='color:rgb(242,83,75);margin-top:5px;margin-bottom:5px;font-weight:bold;line-height:1.5em;'>已被布局，不允许拖动（shift+回车可解除）</p>",
        "tag": "bt1",
        "dataBindings": {
          "a": {
            "text": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "onFormClick": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "userData": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "display": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popDirection": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popBackground": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popPadding": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popWidth": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popHeight": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popBorderColor": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popBorderWidth": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popBorderRadius": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "popTriggerEvent": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "pureTipText": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            },
            "_bindEvents_0": {
              "id": "iotos.form",
              "idinfo": "",
              "isTplBinded": false,
              "func": "function formParser(rawData, node) {\r\n    try {\r\n        /********* TODO **********/\r\n\r\n\r\n        /************************/\r\n        return rawData;\r\n    } catch (err) {\r\n        return rawData;\r\n    }\r\n}"
            }
          }
        },
        "image": {
          "modified": "Fri Jun 07 2024 10:14:51 GMT+0800 (中国标准时间)",
          "dataBindings": [
            {
              "attr": "symbol",
              "valueType": "Image",
              "name": "symbol"
            },
            {
              "attr": "bindTabview",
              "valueType": "String",
              "defaultValue": "tab1",
              "description": "默认关联的Tab1页签（此时无需连线）。\n<br>也可更换其他Tab页签。",
              "group": "功能",
              "name": "bindTabview"
            },
            {
              "attr": "userData",
              "valueType": "ObjectArray",
              "defaultValue": [],
              "description": "用户数据。",
              "group": "数据",
              "name": "userData"
            },
            {
              "attr": "useAttrCORS",
              "valueType": "Boolean",
              "defaultValue": false,
              "description": "连线操作和处理回写是否一致。\n                        比如多个文本框连线传值给相同对话框，弹窗修改\n                        后是否限定只能写到最新赋值过来的文本框。详见<a href='https://www.yuque.com/liuhuo-nc809/uiotos/fgi6dd7gado51acm#fFUbp' style=\"color:rgb(96,172,252)\"target=\"_blank\">同源属性操作</a>",
              "name": "useAttrCORS",
              "dynamicCreate": true
            },
            {
              "attr": "display",
              "valueType": "Image",
              "defaultValue": "",
              "description": "自定义页面地址。\n                可以是编辑器中的其他页面，也可以\n                是外部网页链接地址。",
              "group": "弹出框",
              "name": "display",
              "dynamicCreate": true
            },
            {
              "attr": "pureTipText",
              "valueType": "String",
              "defaultValue": "",
              "description": "提示文字。\n                    当专业用户属性中，提供display内嵌页属性，\n                    如果有配置，那么本属性设置无效，将以内嵌\n                    页显示为准。",
              "name": "pureTipText",
              "dynamicCreate": true
            },
            {
              "attr": "popDirection",
              "valueType": "SideDirection",
              "defaultValue": "right",
              "description": "提示显示位置。",
              "name": "popDirection",
              "dynamicCreate": true
            },
            {
              "attr": "popBackground",
              "valueType": "Color",
              "defaultValue": "white",
              "description": "箭头和背景色。",
              "name": "popBackground",
              "dynamicCreate": true
            },
            {
              "attr": "popPadding",
              "valueType": "NumberArray",
              "defaultValue": [
                2,
                2,
                2,
                2
              ],
              "description": "内间距。",
              "name": "popPadding",
              "dynamicCreate": true
            },
            {
              "attr": "popWidth",
              "valueType": "Number",
              "defaultValue": 400,
              "description": "弹出框宽度。",
              "name": "popWidth",
              "dynamicCreate": true
            },
            {
              "attr": "popHeight",
              "valueType": "Number",
              "defaultValue": 300,
              "description": "弹出框高度。",
              "name": "popHeight",
              "dynamicCreate": true
            },
            {
              "attr": "popBorderColor",
              "valueType": "Color",
              "defaultValue": "rgb(51,51,51)",
              "description": "边框线颜色。\n                    注意，是设置了边框宽度非0后的边框颜色。\n                    默认边框宽度属性为0时，实际上是白色并\n                    带有箭头指示的边框。本属性不用于修改默\n                    认边框色。",
              "name": "popBorderColor",
              "dynamicCreate": true
            },
            {
              "attr": "popBorderWidth",
              "valueType": "Number",
              "defaultValue": 0,
              "description": "边框线宽度。\n                    默认值为0，此时边框默认为白色并且带有\n                    箭头指示。当设置宽度后，颜色将取边框颜\n                    色属性的设置，并且不再有箭头指示。",
              "name": "popBorderWidth",
              "dynamicCreate": true
            },
            {
              "attr": "popBorderRadius",
              "valueType": "Number",
              "defaultValue": 0,
              "description": "边框线圆角。\n                    设置圆角线后，如果此前默认是白色边框带有\n                    指示箭头，那么将自动不可见，只对内容区域\n                    产生圆角。",
              "name": "popBorderRadius",
              "dynamicCreate": true
            },
            {
              "attr": "popTriggerEvent",
              "valueType": "MouseEvent",
              "defaultValue": "hover",
              "description": "触发方式。\n                支持鼠标移入、点击（按钮时）\n                两种触发提示的方式。",
              "name": "popTriggerEvent",
              "dynamicCreate": true
            },
            {
              "attr": "fixedHeight",
              "valueType": "PositiveNumber",
              "defaultValue": 35,
              "group": "外观",
              "name": "fixedHeight"
            },
            {
              "attr": "shadowBorder",
              "valueType": "NumberArray",
              "defaultValue": [
                0,
                0,
                8
              ],
              "description": "",
              "name": "shadowBorder"
            },
            {
              "attr": "shadowColor",
              "valueType": "Color",
              "defaultValue": "rgba(102,102,102,0.2)",
              "name": "shadowColor"
            },
            {
              "attr": "shadowEnabled",
              "valueType": "Boolean",
              "defaultValue": false,
              "name": "shadowEnabled"
            },
            {
              "attr": "text",
              "valueType": "Multiline",
              "defaultValue": "Button",
              "description": "文本。",
              "name": "text"
            },
            {
              "attr": "textColor",
              "valueType": "ColorArray",
              "defaultValue": [
                "rgb(255,255,255)",
                "rgb(255,255,255)"
              ],
              "description": "文本颜色，数组类型。\n<br>索引0为默认文本颜色，\n<br>索引1为鼠标划过时的文本颜色。",
              "name": "textColor"
            },
            {
              "attr": "textFont",
              "valueType": "Font",
              "defaultValue": "12px sans-serif, Arial",
              "description": "字体大小设置。",
              "name": "textFont"
            },
            {
              "attr": "background",
              "valueType": "ColorArray",
              "defaultValue": [
                "rgb(55,125,255)",
                "rgba(55,125,255,0.9)"
              ],
              "description": "背景颜色，数组类型。\n<br>索引0为默认背景颜色，\n<br>索引1为鼠标划过时的背景颜色。",
              "name": "background"
            },
            {
              "attr": "activeBackground",
              "valueType": "ColorArray",
              "defaultValue": [
                "rgb(50,99,250)",
                "rgba(55,125,255,0.9)"
              ],
              "description": "按下背景颜色。\n<br>索引0未鼠标按下时的背景颜色，\n<br>索引1暂未用，备用。",
              "name": "activeBackground"
            },
            {
              "attr": "activeTextColor",
              "valueType": "ColorArray",
              "defaultValue": [
                "white",
                "white"
              ],
              "description": "按下文本颜色。\n<br>索引0未鼠标按下时的文本颜色，\n<br>索引1暂未用，备用。",
              "name": "activeTextColor"
            },
            {
              "attr": "radius",
              "valueType": "NumberArray",
              "defaultValue": [
                3,
                3,
                3,
                3
              ],
              "description": "圆角半径设置\n<br>索引0、1、2、3的值分别对应按钮组的\n<br>左上角、右上角、右下角、左下角。",
              "name": "radius"
            },
            {
              "attr": "borderWidth",
              "valueType": "PositiveNumber",
              "defaultValue": 1,
              "description": "边框宽度。",
              "name": "borderWidth"
            },
            {
              "attr": "darkStyle",
              "valueType": "Boolean",
              "defaultValue": true,
              "description": "黑色风格",
              "name": "darkStyle"
            },
            {
              "attr": "onFormClick",
              "valueType": "Function",
              "extraInfo": {
                "arguments": [
                  "data",
                  "gv",
                  "cache",
                  "value",
                  "extra"
                ]
              },
              "group": "事件",
              "description": "当点击时触发。",
              "name": "onFormClick"
            },
            {
              "attr": "bindControlsTag",
              "valueType": "StringArray",
              "group": "连线",
              "name": "bindControlsTag"
            },
            {
              "attr": "bindControlsAttr",
              "valueType": "StringArray",
              "name": "bindControlsAttr"
            },
            {
              "attr": "bindControlsVal",
              "valueType": "ObjectArray",
              "description": "静态值。也用作数组索引、JSON对象解析提取值用途。\n<br>一、静态值用途：\n<br>对常规类型的属性赋值且没有反向关联属性值，传入为数值时，不\n<br>会作为数组的索引，而会当成常量值对外赋值。此外，存在特殊值：\n<br>~和undefined表示过滤、不触发；null为默认值，表示传递默认表\n<br>单数据。编辑状态下清空后保存与设置null等价。\n<br>二、数组索引用途\n<br>情况1：被操作的组件属性原先值是数组时（包括空数组），会将\n<br>待输出的值作为被操作数组指定索引的值来传入，而不是整体覆盖。\n<br>情况2：如果要被操作的组件属性原先值不是数组，而且待输出的\n<br>值为数组类型并且长度也在索引范围内，那么会按照索引取自身数\n<br>组指定元素再对外输出。（如果想要取待输出索引值，赋值给被操\n<br>纵属性的指定索引，那么需要中间组件属性连线过渡以下，无法直\n<br>接操作）\n<br>情况3：如果要被操作的组件属性是数组，而且待输出的值也是数组\n<br>类型，此时当情况1来处理。\n<br>三、数据解析用途：\n<br>待输出的值为JSON对象时，用x.y.z这种以字符.或者>为间隔的方式\n<br>实现对JSON字段层次逐层定位，当是数组时x.0.y.1这种以数字的方\n<br>式来指定数组的某个索引。以此实现对任意结果JSON对象字段的定\n<br>位，获取结构内指定字段对应的值。",
              "name": "bindControlsVal"
            },
            {
              "attr": "paramControlTag",
              "valueType": "StringArray",
              "name": "paramControlTag"
            },
            {
              "attr": "paramControlAttr",
              "valueType": "StringArray",
              "name": "paramControlAttr"
            },
            {
              "attr": "paramsGenerator",
              "valueType": "Function",
              "defaultValue": "__ht__function(data, val, index, node,oldVal,form) {//绑定组索引对应的函数处理，用来动态生成复杂的参数变量传入\r\nswitch(index){\r\n    case 0:\r\n        break;\r\n    case 1:\r\n        break;\r\n    case 2:\r\n        break;\r\n    default:\r\n        break;\r\n}\r\n\r\nreturn val;}",
              "extraInfo": {
                "arguments": [
                  "data",
                  "val",
                  "index",
                  "node",
                  "oldVal",
                  "form"
                ]
              },
              "name": "paramsGenerator"
            },
            {
              "attr": "_bindEvents_0",
              "valueType": "MultiComboBox",
              "defaultValue": "*",
              "group": "bindEvents",
              "description": "连线索引[0]的触发事件过滤器，默认全部通过",
              "name": "_bindEvents_0",
              "dynamicCreate": true
            }
          ],
          "snapshotURL": "symbols/develop/uiotos/arranged/controls/forms_icon/普通按钮V2.json",
          "renderHTML": "__ht__function(data, gv, cache) {return __button_ui(data,gv,cache);}",
          "width": 75,
          "height": 35,
          "interactive": true,
          "pixelPerfect": false,
          "comps": [],
          "uuid": "ABF1E521-935C-40DA-B2B2-E682E62107CA"
        },
        "host": {
          "__i": 110753
        },
        "position": {
          "x": 147.76743,
          "y": -332.20378
        },
        "width": 43.52804,
        "height": 35
      },
      "s": {
        "label.opacity": 0,
        "label.position": 14,
        "label.offset.x": -10,
        "label.offset.y": 0,
        "label.color": "rgb(61,61,61)",
        "interactive": true,
        "image.stretch": "uniform",
        "2d.movable": false,
        "layout.h": "right",
        "layout.v": "top"
      },
      "a": {
        "icon-background": "rgb(255,255,255)",
        "symbol": "symbols/develop/uiotos/base/button-ui.json",
        "text": "全部",
        "darkStyle": true,
        "textColor": [
          "rgb(255,255,255)",
          "rgb(247,247,247)"
        ],
        "activeTextColor": [
          "rgb(247,247,247)",
          "rgb(247,247,247)"
        ],
        "background": [
          "rgb(55,125,255)",
          "rgb(55,125,255)"
        ],
        "activeBackground": [
          "rgb(51,153,255)",
          "rgb(51,153,255)"
        ],
        "bindTabview": "tab1",
        "paramControlTag": [
          null
        ],
        "paramControlAttr": [
          null
        ],
        "bindControlsTag": [
          "input-ui2"
        ],
        "bindControlsAttr": [
          "a:value"
        ],
        "bindControlsVal": [
          ""
        ],
        "_bindEvents_0": "*",
        "paramBindEvent": [],
        "paramsGenerator": "function paramsGenerator(data, val, index, node, oldVal, form) {\r\n    //绑定组索引对应的函数处理，用来动态生成复杂的参数变量传入\r\n    switch (index) {\r\n        case 0:\r\n            break;\r\n        case 1:\r\n            break;\r\n        case 2:\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n    return val;\r\n}",
        "radius": [
          5,
          5,
          5,
          5
        ],
        "iconSize": [
          20,
          20
        ]
      }
    },
    {
      "c": "ht.Edge",
      "i": 110771,
      "p": {
        "name": "edge",
        "displayName": "0（edge6）",
        "toolTip": "<div id=\"config_tooltip\" style=\"font-size:12px;line-height:1.75em;letter-spacing:1px\">\n                                                        关联绑定信息：<br>\n                                                        <li style=\"list-style-type:disc;color:rgba(255,255,255,0.5);\">索引序号：0 | 总共1条</li>\n                                                        <li style=\"list-style-type:disc;font-weight:bold;\">操作属性：值内容@input-ui2</li> \n                                                        <li style=\"list-style-type:none;color:rgba(255,255,255,0.5)\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当前值：undefined</li>\n                                                        <li style=\"list-style-type:disc;font-weight:bold\">关联属性：</li> \n                                                        <li style=\"list-style-type:none;color:rgba(255,255,255,0.5)\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;关联值：undefined</li>\n                                                        <li style=\"list-style-type:disc;font-weight:bold;\">解析赋值：</li>\n                                                        <li style=\"list-style-type:disc;color:rgba(255,255,255,0.5)\">触发事件：*</li>\n                                                        <li style=\"list-style-type:disc;\">注释：<span style=\"color:rgb(125,195,125)\">0。\n<br></span></li>\n                                                    </div>",
        "parent": {
          "__i": 110770
        },
        "tag": "edge6",
        "source": {
          "__i": 110770
        },
        "target": {
          "__i": 110763
        }
      },
      "s": {
        "label": "",
        "edge.color": "rgb(51,153,255)",
        "edge.width": 4,
        "edge.type": "flex",
        "edge.gap": 16,
        "note.border.width": 0,
        "note.position": 7,
        "note.font": "14px arial, sans-serif",
        "note.opacity": 0.75,
        "label.opacity": 0,
        "note.background": "rgb(51,153,255)",
        "note.offset.x": 0,
        "note.offset.y": 0,
        "icons": {
          "symbols/demo/extra/basic/fromArrow2.json": {
            "position": 15,
            "keepOrien": true,
            "names": [
              "symbols/demo/extra/basic/fromArrow2.json"
            ]
          },
          "symbols/demo/extra/basic/toArrow.json": {
            "position": 19,
            "keepOrien": true,
            "width": 50,
            "height": 20,
            "names": [
              "symbols/demo/extra/basic/toArrow.json"
            ]
          }
        },
        "note": 0
      },
      "a": {
        "index": 0,
        "toolTipRaw": "<div id=\"config_tooltip\" style=\"font-size:12px;line-height:1.75em;letter-spacing:1px\">\n                                                        关联绑定信息：<br>\n                                                        <li style=\"list-style-type:disc;color:rgba(255,255,255,0.5);\">索引序号：0 | 总共1条</li>\n                                                        <li style=\"list-style-type:disc;font-weight:bold;\">操作属性：值内容@input-ui2</li> \n                                                        <li style=\"list-style-type:none;color:rgba(255,255,255,0.5)\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当前值：undefined</li>\n                                                        <li style=\"list-style-type:disc;font-weight:bold\">关联属性：</li> \n                                                        <li style=\"list-style-type:none;color:rgba(255,255,255,0.5)\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;关联值：undefined</li>\n                                                        <li style=\"list-style-type:disc;font-weight:bold;\">解析赋值：</li>\n                                                        <li style=\"list-style-type:disc;color:rgba(255,255,255,0.5)\">触发事件：*</li>\n                                                        <li style=\"list-style-type:disc;\">注释：<span style=\"color:rgb(125,195,125)\">0。\n<br></span></li>\n                                                    </div>"
      }
    }
  ],
  "modified": "Wed Jun 26 2024 09:12:57 GMT+0800 (中国标准时间)",
  "contentRect": {
    "x": -885.58103,
    "y": -512.20684,
    "width": 1379.40772,
    "height": 828.88281
  }
}